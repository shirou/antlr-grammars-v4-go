// Generated from SQLite.g4 by ANTLR 4.6.

package parser // SQLite

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 1072, 54993, 33286, 44333, 17431, 44785, 36224, 43741, 3, 165, 1742,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 3, 2, 3, 2, 7, 2, 169, 10, 2, 12, 2, 14,
	2, 172, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 4, 7, 4, 180, 10, 4, 12,
	4, 14, 4, 183, 11, 4, 3, 4, 3, 4, 6, 4, 187, 10, 4, 13, 4, 14, 4, 188,
	3, 4, 7, 4, 192, 10, 4, 12, 4, 14, 4, 195, 11, 4, 3, 4, 7, 4, 198, 10,
	4, 12, 4, 14, 4, 201, 11, 4, 3, 5, 3, 5, 3, 5, 5, 5, 206, 10, 5, 5, 5,
	208, 10, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 240, 10, 5, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 247, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 5, 6, 255, 10, 6, 3, 6, 5, 6, 258, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 5, 7, 267, 10, 7, 3, 8, 3, 8, 5, 8, 271, 10, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 5, 9, 279, 10, 9, 3, 9, 3, 9, 5, 9, 283,
	10, 9, 5, 9, 285, 10, 9, 3, 10, 3, 10, 3, 10, 5, 10, 290, 10, 10, 5, 10,
	292, 10, 10, 3, 11, 3, 11, 5, 11, 296, 10, 11, 3, 11, 3, 11, 3, 11, 7,
	11, 301, 10, 11, 12, 11, 14, 11, 304, 11, 11, 5, 11, 306, 10, 11, 3, 11,
	3, 11, 3, 11, 5, 11, 311, 10, 11, 3, 11, 3, 11, 5, 11, 315, 10, 11, 3,
	11, 6, 11, 318, 10, 11, 13, 11, 14, 11, 319, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 7, 11, 327, 10, 11, 12, 11, 14, 11, 330, 11, 11, 5, 11, 332, 10,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 338, 10, 11, 5, 11, 340, 10, 11,
	3, 12, 3, 12, 5, 12, 344, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 350,
	10, 12, 3, 12, 3, 12, 3, 12, 5, 12, 355, 10, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 7, 12, 364, 10, 12, 12, 12, 14, 12, 367, 11, 12,
	3, 12, 3, 12, 3, 12, 5, 12, 372, 10, 12, 3, 13, 3, 13, 5, 13, 376, 10,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 382, 10, 13, 3, 13, 3, 13, 3, 13,
	5, 13, 387, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13, 394, 10,
	13, 12, 13, 14, 13, 397, 11, 13, 3, 13, 3, 13, 7, 13, 401, 10, 13, 12,
	13, 14, 13, 404, 11, 13, 3, 13, 3, 13, 3, 13, 5, 13, 409, 10, 13, 3, 13,
	3, 13, 5, 13, 413, 10, 13, 3, 14, 3, 14, 5, 14, 417, 10, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 5, 14, 423, 10, 14, 3, 14, 3, 14, 3, 14, 5, 14, 428,
	10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 435, 10, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 444, 10, 14, 12, 14, 14,
	14, 447, 11, 14, 5, 14, 449, 10, 14, 5, 14, 451, 10, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 5, 14, 457, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 463,
	10, 14, 3, 14, 3, 14, 5, 14, 467, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 5, 14, 474, 10, 14, 3, 14, 3, 14, 6, 14, 478, 10, 14, 13, 14, 14, 14,
	479, 3, 14, 3, 14, 3, 15, 3, 15, 5, 15, 486, 10, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 5, 15, 492, 10, 15, 3, 15, 3, 15, 3, 15, 5, 15, 497, 10, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16,
	509, 10, 16, 3, 16, 3, 16, 3, 16, 5, 16, 514, 10, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 523, 10, 16, 12, 16, 14, 16, 526,
	11, 16, 3, 16, 3, 16, 5, 16, 530, 10, 16, 3, 17, 5, 17, 533, 10, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 540, 10, 17, 3, 18, 5, 18, 543,
	10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 550, 10, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 7, 18, 557, 10, 18, 12, 18, 14, 18, 560, 11, 18,
	5, 18, 562, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 568, 10, 18, 5,
	18, 570, 10, 18, 3, 19, 3, 19, 5, 19, 574, 10, 19, 3, 19, 3, 19, 3, 20,
	3, 20, 3, 20, 3, 20, 5, 20, 582, 10, 20, 3, 20, 3, 20, 3, 20, 5, 20, 587,
	10, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 595, 10, 21, 3,
	21, 3, 21, 3, 21, 5, 21, 600, 10, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22,
	3, 22, 5, 22, 608, 10, 22, 3, 22, 3, 22, 3, 22, 5, 22, 613, 10, 22, 3,
	22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 621, 10, 23, 3, 23, 3, 23,
	3, 23, 5, 23, 626, 10, 23, 3, 23, 3, 23, 3, 24, 3, 24, 5, 24, 632, 10,
	24, 3, 24, 3, 24, 3, 24, 7, 24, 637, 10, 24, 12, 24, 14, 24, 640, 11, 24,
	5, 24, 642, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 648, 10, 24, 12,
	24, 14, 24, 651, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 658,
	10, 24, 12, 24, 14, 24, 661, 11, 24, 5, 24, 663, 10, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 5, 24, 669, 10, 24, 5, 24, 671, 10, 24, 3, 25, 5, 25, 674,
	10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 693, 10,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 699, 10, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 7, 25, 706, 10, 25, 12, 25, 14, 25, 709, 11, 25, 3, 25, 3,
	25, 5, 25, 713, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 7, 25, 720,
	10, 25, 12, 25, 14, 25, 723, 11, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 7, 25, 731, 10, 25, 12, 25, 14, 25, 734, 11, 25, 3, 25, 3, 25, 7,
	25, 738, 10, 25, 12, 25, 14, 25, 741, 11, 25, 3, 25, 3, 25, 3, 25, 5, 25,
	746, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 752, 10, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 761, 10, 26, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 5, 27, 768, 10, 27, 3, 27, 3, 27, 5, 27, 772, 10,
	27, 5, 27, 774, 10, 27, 3, 28, 3, 28, 5, 28, 778, 10, 28, 3, 28, 3, 28,
	3, 29, 3, 29, 3, 29, 5, 29, 785, 10, 29, 5, 29, 787, 10, 29, 3, 29, 3,
	29, 5, 29, 791, 10, 29, 3, 29, 5, 29, 794, 10, 29, 3, 30, 3, 30, 3, 30,
	3, 31, 3, 31, 5, 31, 801, 10, 31, 3, 31, 3, 31, 3, 31, 7, 31, 806, 10,
	31, 12, 31, 14, 31, 809, 11, 31, 5, 31, 811, 10, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 7, 31, 819, 10, 31, 12, 31, 14, 31, 822, 11, 31, 5,
	31, 824, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 830, 10, 31, 5, 31,
	832, 10, 31, 3, 32, 3, 32, 5, 32, 836, 10, 32, 3, 32, 3, 32, 3, 32, 7,
	32, 841, 10, 32, 12, 32, 14, 32, 844, 11, 32, 5, 32, 846, 10, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 7, 32, 852, 10, 32, 12, 32, 14, 32, 855, 11, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 862, 10, 32, 12, 32, 14, 32, 865,
	11, 32, 5, 32, 867, 10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 873, 10,
	32, 5, 32, 875, 10, 32, 3, 33, 3, 33, 5, 33, 879, 10, 33, 3, 33, 3, 33,
	3, 33, 7, 33, 884, 10, 33, 12, 33, 14, 33, 887, 11, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 7, 33, 893, 10, 33, 12, 33, 14, 33, 896, 11, 33, 3, 33, 5, 33,
	899, 10, 33, 5, 33, 901, 10, 33, 3, 33, 3, 33, 5, 33, 905, 10, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 912, 10, 33, 12, 33, 14, 33, 915, 11,
	33, 3, 33, 3, 33, 5, 33, 919, 10, 33, 5, 33, 921, 10, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 7, 33, 928, 10, 33, 12, 33, 14, 33, 931, 11, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 939, 10, 33, 12, 33, 14,
	33, 942, 11, 33, 3, 33, 3, 33, 7, 33, 946, 10, 33, 12, 33, 14, 33, 949,
	11, 33, 5, 33, 951, 10, 33, 3, 34, 5, 34, 954, 10, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 967,
	10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 7, 34, 979, 10, 34, 12, 34, 14, 34, 982, 11, 34, 3, 34, 3, 34, 5,
	34, 986, 10, 34, 3, 35, 5, 35, 989, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 1002, 10, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35,
	1014, 10, 35, 12, 35, 14, 35, 1017, 11, 35, 3, 35, 3, 35, 5, 35, 1021,
	10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 1028, 10, 35, 12, 35,
	14, 35, 1031, 11, 35, 5, 35, 1033, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	5, 35, 1039, 10, 35, 5, 35, 1041, 10, 35, 3, 36, 3, 36, 3, 37, 3, 37, 5,
	37, 1047, 10, 37, 3, 37, 7, 37, 1050, 10, 37, 12, 37, 14, 37, 1053, 11,
	37, 3, 38, 6, 38, 1056, 10, 38, 13, 38, 14, 38, 1057, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 1070, 10, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 1078, 10, 38, 3, 39, 3,
	39, 5, 39, 1082, 10, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1087, 10, 39, 3, 39,
	3, 39, 5, 39, 1091, 10, 39, 3, 39, 5, 39, 1094, 10, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 5, 39, 1112, 10, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1117,
	10, 39, 3, 40, 3, 40, 3, 40, 5, 40, 1122, 10, 40, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 5, 41, 1130, 10, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1135,
	10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1144, 10,
	41, 3, 41, 3, 41, 3, 41, 7, 41, 1149, 10, 41, 12, 41, 14, 41, 1152, 11,
	41, 3, 41, 5, 41, 1155, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1171, 10,
	41, 3, 41, 5, 41, 1174, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	5, 41, 1182, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 6, 41, 1189, 10,
	41, 13, 41, 14, 41, 1190, 3, 41, 3, 41, 5, 41, 1195, 10, 41, 3, 41, 3,
	41, 3, 41, 5, 41, 1200, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 5, 41, 1230, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 5, 41, 1242, 10, 41, 3, 41, 3, 41, 3, 41, 5, 41,
	1247, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 5, 41, 1259, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1265,
	10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1272, 10, 41, 3, 41,
	3, 41, 5, 41, 1276, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 7,
	41, 1284, 10, 41, 12, 41, 14, 41, 1287, 11, 41, 5, 41, 1289, 10, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 5, 41, 1295, 10, 41, 3, 41, 5, 41, 1298, 10, 41,
	7, 41, 1300, 10, 41, 12, 41, 14, 41, 1303, 11, 41, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 7, 42, 1311, 10, 42, 12, 42, 14, 42, 1314, 11, 42,
	3, 42, 3, 42, 5, 42, 1318, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1330, 10, 42, 3, 42, 3, 42, 5, 42,
	1334, 10, 42, 7, 42, 1336, 10, 42, 12, 42, 14, 42, 1339, 11, 42, 3, 42,
	5, 42, 1342, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1349, 10,
	42, 5, 42, 1351, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43,
	1359, 10, 43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 5, 44, 1366, 10, 44, 3,
	44, 5, 44, 1369, 10, 44, 3, 45, 3, 45, 5, 45, 1373, 10, 45, 3, 45, 3, 45,
	3, 45, 5, 45, 1378, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1384, 10,
	45, 12, 45, 14, 45, 1387, 11, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 1403,
	10, 45, 12, 45, 14, 45, 1406, 11, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1411,
	10, 45, 3, 46, 3, 46, 5, 46, 1415, 10, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 7, 46, 1429, 10,
	46, 12, 46, 14, 46, 1432, 11, 46, 3, 47, 3, 47, 3, 47, 5, 47, 1437, 10,
	47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1445, 10, 47, 3, 48,
	3, 48, 3, 48, 5, 48, 1450, 10, 48, 3, 48, 5, 48, 1453, 10, 48, 3, 49, 3,
	49, 3, 49, 5, 49, 1458, 10, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 7, 50,
	1465, 10, 50, 12, 50, 14, 50, 1468, 11, 50, 3, 50, 3, 50, 5, 50, 1472,
	10, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 5, 51, 1486, 10, 51, 3, 51, 5, 51, 1489, 10, 51, 5,
	51, 1491, 10, 51, 3, 52, 3, 52, 3, 52, 5, 52, 1496, 10, 52, 3, 52, 3, 52,
	5, 52, 1500, 10, 52, 3, 52, 5, 52, 1503, 10, 52, 3, 52, 3, 52, 3, 52, 3,
	52, 3, 52, 5, 52, 1510, 10, 52, 3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 1516,
	10, 52, 12, 52, 14, 52, 1519, 11, 52, 3, 52, 5, 52, 1522, 10, 52, 3, 52,
	3, 52, 5, 52, 1526, 10, 52, 3, 52, 5, 52, 1529, 10, 52, 3, 52, 3, 52, 3,
	52, 3, 52, 5, 52, 1535, 10, 52, 3, 52, 5, 52, 1538, 10, 52, 5, 52, 1540,
	10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53, 1547, 10, 53, 12, 53,
	14, 53, 1550, 11, 53, 3, 54, 3, 54, 5, 54, 1554, 10, 54, 3, 54, 3, 54,
	5, 54, 1558, 10, 54, 3, 54, 3, 54, 5, 54, 1562, 10, 54, 3, 54, 5, 54, 1565,
	10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 7, 55, 1574, 10,
	55, 12, 55, 14, 55, 1577, 11, 55, 3, 55, 3, 55, 5, 55, 1581, 10, 55, 3,
	56, 3, 56, 5, 56, 1585, 10, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1590, 10, 56,
	12, 56, 14, 56, 1593, 11, 56, 3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1599,
	10, 56, 12, 56, 14, 56, 1602, 11, 56, 3, 56, 5, 56, 1605, 10, 56, 5, 56,
	1607, 10, 56, 3, 56, 3, 56, 5, 56, 1611, 10, 56, 3, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 7, 56, 1618, 10, 56, 12, 56, 14, 56, 1621, 11, 56, 3, 56, 3,
	56, 5, 56, 1625, 10, 56, 5, 56, 1627, 10, 56, 3, 56, 3, 56, 3, 56, 3, 56,
	3, 56, 7, 56, 1634, 10, 56, 12, 56, 14, 56, 1637, 11, 56, 3, 56, 3, 56,
	3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1645, 10, 56, 12, 56, 14, 56, 1648,
	11, 56, 3, 56, 3, 56, 7, 56, 1652, 10, 56, 12, 56, 14, 56, 1655, 11, 56,
	5, 56, 1657, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1664, 10,
	57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 7, 58, 1671, 10, 58, 12, 58, 14,
	58, 1674, 11, 58, 3, 58, 3, 58, 5, 58, 1678, 10, 58, 3, 59, 5, 59, 1681,
	10, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 61, 3, 61, 3, 62, 3, 62, 3, 63,
	3, 63, 5, 63, 1693, 10, 63, 3, 64, 3, 64, 3, 65, 3, 65, 3, 66, 3, 66, 3,
	67, 3, 67, 3, 68, 3, 68, 3, 69, 3, 69, 3, 70, 3, 70, 3, 71, 3, 71, 3, 72,
	3, 72, 3, 73, 3, 73, 3, 74, 3, 74, 3, 75, 3, 75, 3, 76, 3, 76, 3, 77, 3,
	77, 3, 78, 3, 78, 3, 79, 3, 79, 3, 80, 3, 80, 3, 81, 3, 81, 3, 82, 3, 82,
	3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 1740, 10, 83, 3,
	83, 2, 3, 80, 84, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66,
	68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102,
	104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132,
	134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
	164, 2, 20, 5, 2, 60, 60, 71, 71, 84, 84, 4, 2, 49, 49, 68, 68, 4, 2, 7,
	7, 108, 108, 3, 2, 133, 134, 4, 2, 31, 31, 64, 64, 4, 2, 36, 36, 62, 62,
	7, 2, 27, 27, 74, 74, 83, 83, 124, 124, 127, 127, 4, 2, 9, 9, 14, 15, 3,
	2, 10, 11, 3, 2, 16, 19, 3, 2, 20, 23, 6, 2, 79, 79, 99, 99, 101, 101,
	120, 120, 4, 2, 61, 61, 141, 141, 5, 2, 27, 27, 74, 74, 127, 127, 6, 2,
	54, 56, 106, 106, 158, 158, 160, 161, 4, 2, 10, 12, 104, 104, 4, 2, 157,
	157, 160, 160, 3, 2, 27, 150, 2017, 2, 170, 3, 2, 2, 2, 4, 175, 3, 2, 2,
	2, 6, 181, 3, 2, 2, 2, 8, 207, 3, 2, 2, 2, 10, 241, 3, 2, 2, 2, 12, 259,
	3, 2, 2, 2, 14, 268, 3, 2, 2, 2, 16, 276, 3, 2, 2, 2, 18, 286, 3, 2, 2,
	2, 20, 305, 3, 2, 2, 2, 22, 341, 3, 2, 2, 2, 24, 373, 3, 2, 2, 2, 26, 414,
	3, 2, 2, 2, 28, 483, 3, 2, 2, 2, 30, 502, 3, 2, 2, 2, 32, 532, 3, 2, 2,
	2, 34, 542, 3, 2, 2, 2, 36, 571, 3, 2, 2, 2, 38, 577, 3, 2, 2, 2, 40, 590,
	3, 2, 2, 2, 42, 603, 3, 2, 2, 2, 44, 616, 3, 2, 2, 2, 46, 641, 3, 2, 2,
	2, 48, 673, 3, 2, 2, 2, 50, 747, 3, 2, 2, 2, 52, 762, 3, 2, 2, 2, 54, 775,
	3, 2, 2, 2, 56, 781, 3, 2, 2, 2, 58, 795, 3, 2, 2, 2, 60, 810, 3, 2, 2,
	2, 62, 845, 3, 2, 2, 2, 64, 950, 3, 2, 2, 2, 66, 953, 3, 2, 2, 2, 68, 988,
	3, 2, 2, 2, 70, 1042, 3, 2, 2, 2, 72, 1044, 3, 2, 2, 2, 74, 1077, 3, 2,
	2, 2, 76, 1081, 3, 2, 2, 2, 78, 1121, 3, 2, 2, 2, 80, 1199, 3, 2, 2, 2,
	82, 1304, 3, 2, 2, 2, 84, 1352, 3, 2, 2, 2, 86, 1362, 3, 2, 2, 2, 88, 1372,
	3, 2, 2, 2, 90, 1412, 3, 2, 2, 2, 92, 1436, 3, 2, 2, 2, 94, 1446, 3, 2,
	2, 2, 96, 1457, 3, 2, 2, 2, 98, 1459, 3, 2, 2, 2, 100, 1490, 3, 2, 2, 2,
	102, 1539, 3, 2, 2, 2, 104, 1541, 3, 2, 2, 2, 106, 1564, 3, 2, 2, 2, 108,
	1580, 3, 2, 2, 2, 110, 1656, 3, 2, 2, 2, 112, 1663, 3, 2, 2, 2, 114, 1665,
	3, 2, 2, 2, 116, 1680, 3, 2, 2, 2, 118, 1684, 3, 2, 2, 2, 120, 1686, 3,
	2, 2, 2, 122, 1688, 3, 2, 2, 2, 124, 1692, 3, 2, 2, 2, 126, 1694, 3, 2,
	2, 2, 128, 1696, 3, 2, 2, 2, 130, 1698, 3, 2, 2, 2, 132, 1700, 3, 2, 2,
	2, 134, 1702, 3, 2, 2, 2, 136, 1704, 3, 2, 2, 2, 138, 1706, 3, 2, 2, 2,
	140, 1708, 3, 2, 2, 2, 142, 1710, 3, 2, 2, 2, 144, 1712, 3, 2, 2, 2, 146,
	1714, 3, 2, 2, 2, 148, 1716, 3, 2, 2, 2, 150, 1718, 3, 2, 2, 2, 152, 1720,
	3, 2, 2, 2, 154, 1722, 3, 2, 2, 2, 156, 1724, 3, 2, 2, 2, 158, 1726, 3,
	2, 2, 2, 160, 1728, 3, 2, 2, 2, 162, 1730, 3, 2, 2, 2, 164, 1739, 3, 2,
	2, 2, 166, 169, 5, 6, 4, 2, 167, 169, 5, 4, 3, 2, 168, 166, 3, 2, 2, 2,
	168, 167, 3, 2, 2, 2, 169, 172, 3, 2, 2, 2, 170, 168, 3, 2, 2, 2, 170,
	171, 3, 2, 2, 2, 171, 173, 3, 2, 2, 2, 172, 170, 3, 2, 2, 2, 173, 174,
	7, 2, 2, 3, 174, 3, 3, 2, 2, 2, 175, 176, 7, 165, 2, 2, 176, 177, 8, 3,
	1, 2, 177, 5, 3, 2, 2, 2, 178, 180, 7, 3, 2, 2, 179, 178, 3, 2, 2, 2, 180,
	183, 3, 2, 2, 2, 181, 179, 3, 2, 2, 2, 181, 182, 3, 2, 2, 2, 182, 184,
	3, 2, 2, 2, 183, 181, 3, 2, 2, 2, 184, 193, 5, 8, 5, 2, 185, 187, 7, 3,
	2, 2, 186, 185, 3, 2, 2, 2, 187, 188, 3, 2, 2, 2, 188, 186, 3, 2, 2, 2,
	188, 189, 3, 2, 2, 2, 189, 190, 3, 2, 2, 2, 190, 192, 5, 8, 5, 2, 191,
	186, 3, 2, 2, 2, 192, 195, 3, 2, 2, 2, 193, 191, 3, 2, 2, 2, 193, 194,
	3, 2, 2, 2, 194, 199, 3, 2, 2, 2, 195, 193, 3, 2, 2, 2, 196, 198, 7, 3,
	2, 2, 197, 196, 3, 2, 2, 2, 198, 201, 3, 2, 2, 2, 199, 197, 3, 2, 2, 2,
	199, 200, 3, 2, 2, 2, 200, 7, 3, 2, 2, 2, 201, 199, 3, 2, 2, 2, 202, 205,
	7, 73, 2, 2, 203, 204, 7, 116, 2, 2, 204, 206, 7, 113, 2, 2, 205, 203,
	3, 2, 2, 2, 205, 206, 3, 2, 2, 2, 206, 208, 3, 2, 2, 2, 207, 202, 3, 2,
	2, 2, 207, 208, 3, 2, 2, 2, 208, 239, 3, 2, 2, 2, 209, 240, 5, 10, 6, 2,
	210, 240, 5, 12, 7, 2, 211, 240, 5, 14, 8, 2, 212, 240, 5, 16, 9, 2, 213,
	240, 5, 18, 10, 2, 214, 240, 5, 20, 11, 2, 215, 240, 5, 22, 12, 2, 216,
	240, 5, 24, 13, 2, 217, 240, 5, 26, 14, 2, 218, 240, 5, 28, 15, 2, 219,
	240, 5, 30, 16, 2, 220, 240, 5, 32, 17, 2, 221, 240, 5, 34, 18, 2, 222,
	240, 5, 36, 19, 2, 223, 240, 5, 38, 20, 2, 224, 240, 5, 40, 21, 2, 225,
	240, 5, 42, 22, 2, 226, 240, 5, 44, 23, 2, 227, 240, 5, 46, 24, 2, 228,
	240, 5, 48, 25, 2, 229, 240, 5, 50, 26, 2, 230, 240, 5, 52, 27, 2, 231,
	240, 5, 54, 28, 2, 232, 240, 5, 56, 29, 2, 233, 240, 5, 58, 30, 2, 234,
	240, 5, 60, 31, 2, 235, 240, 5, 62, 32, 2, 236, 240, 5, 66, 34, 2, 237,
	240, 5, 68, 35, 2, 238, 240, 5, 70, 36, 2, 239, 209, 3, 2, 2, 2, 239, 210,
	3, 2, 2, 2, 239, 211, 3, 2, 2, 2, 239, 212, 3, 2, 2, 2, 239, 213, 3, 2,
	2, 2, 239, 214, 3, 2, 2, 2, 239, 215, 3, 2, 2, 2, 239, 216, 3, 2, 2, 2,
	239, 217, 3, 2, 2, 2, 239, 218, 3, 2, 2, 2, 239, 219, 3, 2, 2, 2, 239,
	220, 3, 2, 2, 2, 239, 221, 3, 2, 2, 2, 239, 222, 3, 2, 2, 2, 239, 223,
	3, 2, 2, 2, 239, 224, 3, 2, 2, 2, 239, 225, 3, 2, 2, 2, 239, 226, 3, 2,
	2, 2, 239, 227, 3, 2, 2, 2, 239, 228, 3, 2, 2, 2, 239, 229, 3, 2, 2, 2,
	239, 230, 3, 2, 2, 2, 239, 231, 3, 2, 2, 2, 239, 232, 3, 2, 2, 2, 239,
	233, 3, 2, 2, 2, 239, 234, 3, 2, 2, 2, 239, 235, 3, 2, 2, 2, 239, 236,
	3, 2, 2, 2, 239, 237, 3, 2, 2, 2, 239, 238, 3, 2, 2, 2, 240, 9, 3, 2, 2,
	2, 241, 242, 7, 32, 2, 2, 242, 246, 7, 132, 2, 2, 243, 244, 5, 134, 68,
	2, 244, 245, 7, 4, 2, 2, 245, 247, 3, 2, 2, 2, 246, 243, 3, 2, 2, 2, 246,
	247, 3, 2, 2, 2, 247, 248, 3, 2, 2, 2, 248, 257, 5, 136, 69, 2, 249, 250,
	7, 123, 2, 2, 250, 251, 7, 136, 2, 2, 251, 258, 5, 140, 71, 2, 252, 254,
	7, 29, 2, 2, 253, 255, 7, 48, 2, 2, 254, 253, 3, 2, 2, 2, 254, 255, 3,
	2, 2, 2, 255, 256, 3, 2, 2, 2, 256, 258, 5, 72, 37, 2, 257, 249, 3, 2,
	2, 2, 257, 252, 3, 2, 2, 2, 258, 11, 3, 2, 2, 2, 259, 266, 7, 33, 2, 2,
	260, 267, 5, 134, 68, 2, 261, 267, 5, 138, 70, 2, 262, 263, 5, 134, 68,
	2, 263, 264, 7, 4, 2, 2, 264, 265, 5, 138, 70, 2, 265, 267, 3, 2, 2, 2,
	266, 260, 3, 2, 2, 2, 266, 261, 3, 2, 2, 2, 266, 262, 3, 2, 2, 2, 266,
	267, 3, 2, 2, 2, 267, 13, 3, 2, 2, 2, 268, 270, 7, 37, 2, 2, 269, 271,
	7, 57, 2, 2, 270, 269, 3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 272, 3, 2,
	2, 2, 272, 273, 5, 80, 41, 2, 273, 274, 7, 35, 2, 2, 274, 275, 5, 134,
	68, 2, 275, 15, 3, 2, 2, 2, 276, 278, 7, 40, 2, 2, 277, 279, 9, 2, 2, 2,
	278, 277, 3, 2, 2, 2, 278, 279, 3, 2, 2, 2, 279, 284, 3, 2, 2, 2, 280,
	282, 7, 137, 2, 2, 281, 283, 5, 162, 82, 2, 282, 281, 3, 2, 2, 2, 282,
	283, 3, 2, 2, 2, 283, 285, 3, 2, 2, 2, 284, 280, 3, 2, 2, 2, 284, 285,
	3, 2, 2, 2, 285, 17, 3, 2, 2, 2, 286, 291, 9, 3, 2, 2, 287, 289, 7, 137,
	2, 2, 288, 290, 5, 162, 82, 2, 289, 288, 3, 2, 2, 2, 289, 290, 3, 2, 2,
	2, 290, 292, 3, 2, 2, 2, 291, 287, 3, 2, 2, 2, 291, 292, 3, 2, 2, 2, 292,
	19, 3, 2, 2, 2, 293, 295, 7, 149, 2, 2, 294, 296, 7, 118, 2, 2, 295, 294,
	3, 2, 2, 2, 295, 296, 3, 2, 2, 2, 296, 297, 3, 2, 2, 2, 297, 302, 5, 98,
	50, 2, 298, 299, 7, 7, 2, 2, 299, 301, 5, 98, 50, 2, 300, 298, 3, 2, 2,
	2, 301, 304, 3, 2, 2, 2, 302, 300, 3, 2, 2, 2, 302, 303, 3, 2, 2, 2, 303,
	306, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2, 305, 293, 3, 2, 2, 2, 305, 306,
	3, 2, 2, 2, 306, 307, 3, 2, 2, 2, 307, 317, 5, 110, 56, 2, 308, 310, 7,
	139, 2, 2, 309, 311, 7, 31, 2, 2, 310, 309, 3, 2, 2, 2, 310, 311, 3, 2,
	2, 2, 311, 315, 3, 2, 2, 2, 312, 315, 7, 92, 2, 2, 313, 315, 7, 70, 2,
	2, 314, 308, 3, 2, 2, 2, 314, 312, 3, 2, 2, 2, 314, 313, 3, 2, 2, 2, 315,
	316, 3, 2, 2, 2, 316, 318, 5, 110, 56, 2, 317, 314, 3, 2, 2, 2, 318, 319,
	3, 2, 2, 2, 319, 317, 3, 2, 2, 2, 319, 320, 3, 2, 2, 2, 320, 331, 3, 2,
	2, 2, 321, 322, 7, 111, 2, 2, 322, 323, 7, 42, 2, 2, 323, 328, 5, 94, 48,
	2, 324, 325, 7, 7, 2, 2, 325, 327, 5, 94, 48, 2, 326, 324, 3, 2, 2, 2,
	327, 330, 3, 2, 2, 2, 328, 326, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329,
	332, 3, 2, 2, 2, 330, 328, 3, 2, 2, 2, 331, 321, 3, 2, 2, 2, 331, 332,
	3, 2, 2, 2, 332, 339, 3, 2, 2, 2, 333, 334, 7, 100, 2, 2, 334, 337, 5,
	80, 41, 2, 335, 336, 9, 4, 2, 2, 336, 338, 5, 80, 41, 2, 337, 335, 3, 2,
	2, 2, 337, 338, 3, 2, 2, 2, 338, 340, 3, 2, 2, 2, 339, 333, 3, 2, 2, 2,
	339, 340, 3, 2, 2, 2, 340, 21, 3, 2, 2, 2, 341, 343, 7, 52, 2, 2, 342,
	344, 7, 140, 2, 2, 343, 342, 3, 2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 345,
	3, 2, 2, 2, 345, 349, 7, 86, 2, 2, 346, 347, 7, 82, 2, 2, 347, 348, 7,
	104, 2, 2, 348, 350, 7, 72, 2, 2, 349, 346, 3, 2, 2, 2, 349, 350, 3, 2,
	2, 2, 350, 354, 3, 2, 2, 2, 351, 352, 5, 134, 68, 2, 352, 353, 7, 4, 2,
	2, 353, 355, 3, 2, 2, 2, 354, 351, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355,
	356, 3, 2, 2, 2, 356, 357, 5, 148, 75, 2, 357, 358, 7, 109, 2, 2, 358,
	359, 5, 136, 69, 2, 359, 360, 7, 5, 2, 2, 360, 365, 5, 86, 44, 2, 361,
	362, 7, 7, 2, 2, 362, 364, 5, 86, 44, 2, 363, 361, 3, 2, 2, 2, 364, 367,
	3, 2, 2, 2, 365, 363, 3, 2, 2, 2, 365, 366, 3, 2, 2, 2, 366, 368, 3, 2,
	2, 2, 367, 365, 3, 2, 2, 2, 368, 371, 7, 6, 2, 2, 369, 370, 7, 148, 2,
	2, 370, 372, 5, 80, 41, 2, 371, 369, 3, 2, 2, 2, 371, 372, 3, 2, 2, 2,
	372, 23, 3, 2, 2, 2, 373, 375, 7, 52, 2, 2, 374, 376, 9, 5, 2, 2, 375,
	374, 3, 2, 2, 2, 375, 376, 3, 2, 2, 2, 376, 377, 3, 2, 2, 2, 377, 381,
	7, 132, 2, 2, 378, 379, 7, 82, 2, 2, 379, 380, 7, 104, 2, 2, 380, 382,
	7, 72, 2, 2, 381, 378, 3, 2, 2, 2, 381, 382, 3, 2, 2, 2, 382, 386, 3, 2,
	2, 2, 383, 384, 5, 134, 68, 2, 384, 385, 7, 4, 2, 2, 385, 387, 3, 2, 2,
	2, 386, 383, 3, 2, 2, 2, 386, 387, 3, 2, 2, 2, 387, 388, 3, 2, 2, 2, 388,
	412, 5, 136, 69, 2, 389, 390, 7, 5, 2, 2, 390, 395, 5, 72, 37, 2, 391,
	392, 7, 7, 2, 2, 392, 394, 5, 72, 37, 2, 393, 391, 3, 2, 2, 2, 394, 397,
	3, 2, 2, 2, 395, 393, 3, 2, 2, 2, 395, 396, 3, 2, 2, 2, 396, 402, 3, 2,
	2, 2, 397, 395, 3, 2, 2, 2, 398, 399, 7, 7, 2, 2, 399, 401, 5, 88, 45,
	2, 400, 398, 3, 2, 2, 2, 401, 404, 3, 2, 2, 2, 402, 400, 3, 2, 2, 2, 402,
	403, 3, 2, 2, 2, 403, 405, 3, 2, 2, 2, 404, 402, 3, 2, 2, 2, 405, 408,
	7, 6, 2, 2, 406, 407, 7, 150, 2, 2, 407, 409, 7, 157, 2, 2, 408, 406, 3,
	2, 2, 2, 408, 409, 3, 2, 2, 2, 409, 413, 3, 2, 2, 2, 410, 411, 7, 35, 2,
	2, 411, 413, 5, 62, 32, 2, 412, 389, 3, 2, 2, 2, 412, 410, 3, 2, 2, 2,
	413, 25, 3, 2, 2, 2, 414, 416, 7, 52, 2, 2, 415, 417, 9, 5, 2, 2, 416,
	415, 3, 2, 2, 2, 416, 417, 3, 2, 2, 2, 417, 418, 3, 2, 2, 2, 418, 422,
	7, 138, 2, 2, 419, 420, 7, 82, 2, 2, 420, 421, 7, 104, 2, 2, 421, 423,
	7, 72, 2, 2, 422, 419, 3, 2, 2, 2, 422, 423, 3, 2, 2, 2, 423, 427, 3, 2,
	2, 2, 424, 425, 5, 134, 68, 2, 425, 426, 7, 4, 2, 2, 426, 428, 3, 2, 2,
	2, 427, 424, 3, 2, 2, 2, 427, 428, 3, 2, 2, 2, 428, 429, 3, 2, 2, 2, 429,
	434, 5, 150, 76, 2, 430, 435, 7, 39, 2, 2, 431, 435, 7, 30, 2, 2, 432,
	433, 7, 91, 2, 2, 433, 435, 7, 107, 2, 2, 434, 430, 3, 2, 2, 2, 434, 431,
	3, 2, 2, 2, 434, 432, 3, 2, 2, 2, 434, 435, 3, 2, 2, 2, 435, 450, 3, 2,
	2, 2, 436, 451, 7, 61, 2, 2, 437, 451, 7, 90, 2, 2, 438, 448, 7, 141, 2,
	2, 439, 440, 7, 107, 2, 2, 440, 445, 5, 142, 72, 2, 441, 442, 7, 7, 2,
	2, 442, 444, 5, 142, 72, 2, 443, 441, 3, 2, 2, 2, 444, 447, 3, 2, 2, 2,
	445, 443, 3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 449, 3, 2, 2, 2, 447,
	445, 3, 2, 2, 2, 448, 439, 3, 2, 2, 2, 448, 449, 3, 2, 2, 2, 449, 451,
	3, 2, 2, 2, 450, 436, 3, 2, 2, 2, 450, 437, 3, 2, 2, 2, 450, 438, 3, 2,
	2, 2, 451, 452, 3, 2, 2, 2, 452, 456, 7, 109, 2, 2, 453, 454, 5, 134, 68,
	2, 454, 455, 7, 4, 2, 2, 455, 457, 3, 2, 2, 2, 456, 453, 3, 2, 2, 2, 456,
	457, 3, 2, 2, 2, 457, 458, 3, 2, 2, 2, 458, 462, 5, 136, 69, 2, 459, 460,
	7, 75, 2, 2, 460, 461, 7, 66, 2, 2, 461, 463, 7, 128, 2, 2, 462, 459, 3,
	2, 2, 2, 462, 463, 3, 2, 2, 2, 463, 466, 3, 2, 2, 2, 464, 465, 7, 147,
	2, 2, 465, 467, 5, 80, 41, 2, 466, 464, 3, 2, 2, 2, 466, 467, 3, 2, 2,
	2, 467, 468, 3, 2, 2, 2, 468, 477, 7, 40, 2, 2, 469, 474, 5, 66, 34, 2,
	470, 474, 5, 48, 25, 2, 471, 474, 5, 32, 17, 2, 472, 474, 5, 62, 32, 2,
	473, 469, 3, 2, 2, 2, 473, 470, 3, 2, 2, 2, 473, 471, 3, 2, 2, 2, 473,
	472, 3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475, 476, 7, 3, 2, 2, 476, 478,
	3, 2, 2, 2, 477, 473, 3, 2, 2, 2, 478, 479, 3, 2, 2, 2, 479, 477, 3, 2,
	2, 2, 479, 480, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481, 482, 7, 68, 2, 2,
	482, 27, 3, 2, 2, 2, 483, 485, 7, 52, 2, 2, 484, 486, 9, 5, 2, 2, 485,
	484, 3, 2, 2, 2, 485, 486, 3, 2, 2, 2, 486, 487, 3, 2, 2, 2, 487, 491,
	7, 145, 2, 2, 488, 489, 7, 82, 2, 2, 489, 490, 7, 104, 2, 2, 490, 492,
	7, 72, 2, 2, 491, 488, 3, 2, 2, 2, 491, 492, 3, 2, 2, 2, 492, 496, 3, 2,
	2, 2, 493, 494, 5, 134, 68, 2, 494, 495, 7, 4, 2, 2, 495, 497, 3, 2, 2,
	2, 496, 493, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 498, 3, 2, 2, 2, 498,
	499, 5, 152, 77, 2, 499, 500, 7, 35, 2, 2, 500, 501, 5, 62, 32, 2, 501,
	29, 3, 2, 2, 2, 502, 503, 7, 52, 2, 2, 503, 504, 7, 146, 2, 2, 504, 508,
	7, 132, 2, 2, 505, 506, 7, 82, 2, 2, 506, 507, 7, 104, 2, 2, 507, 509,
	7, 72, 2, 2, 508, 505, 3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509, 513, 3, 2,
	2, 2, 510, 511, 5, 134, 68, 2, 511, 512, 7, 4, 2, 2, 512, 514, 3, 2, 2,
	2, 513, 510, 3, 2, 2, 2, 513, 514, 3, 2, 2, 2, 514, 515, 3, 2, 2, 2, 515,
	516, 5, 136, 69, 2, 516, 517, 7, 142, 2, 2, 517, 529, 5, 154, 78, 2, 518,
	519, 7, 5, 2, 2, 519, 524, 5, 124, 63, 2, 520, 521, 7, 7, 2, 2, 521, 523,
	5, 124, 63, 2, 522, 520, 3, 2, 2, 2, 523, 526, 3, 2, 2, 2, 524, 522, 3,
	2, 2, 2, 524, 525, 3, 2, 2, 2, 525, 527, 3, 2, 2, 2, 526, 524, 3, 2, 2,
	2, 527, 528, 7, 6, 2, 2, 528, 530, 3, 2, 2, 2, 529, 518, 3, 2, 2, 2, 529,
	530, 3, 2, 2, 2, 530, 31, 3, 2, 2, 2, 531, 533, 5, 90, 46, 2, 532, 531,
	3, 2, 2, 2, 532, 533, 3, 2, 2, 2, 533, 534, 3, 2, 2, 2, 534, 535, 7, 61,
	2, 2, 535, 536, 7, 77, 2, 2, 536, 539, 5, 92, 47, 2, 537, 538, 7, 148,
	2, 2, 538, 540, 5, 80, 41, 2, 539, 537, 3, 2, 2, 2, 539, 540, 3, 2, 2,
	2, 540, 33, 3, 2, 2, 2, 541, 543, 5, 90, 46, 2, 542, 541, 3, 2, 2, 2, 542,
	543, 3, 2, 2, 2, 543, 544, 3, 2, 2, 2, 544, 545, 7, 61, 2, 2, 545, 546,
	7, 77, 2, 2, 546, 549, 5, 92, 47, 2, 547, 548, 7, 148, 2, 2, 548, 550,
	5, 80, 41, 2, 549, 547, 3, 2, 2, 2, 549, 550, 3, 2, 2, 2, 550, 569, 3,
	2, 2, 2, 551, 552, 7, 111, 2, 2, 552, 553, 7, 42, 2, 2, 553, 558, 5, 94,
	48, 2, 554, 555, 7, 7, 2, 2, 555, 557, 5, 94, 48, 2, 556, 554, 3, 2, 2,
	2, 557, 560, 3, 2, 2, 2, 558, 556, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559,
	562, 3, 2, 2, 2, 560, 558, 3, 2, 2, 2, 561, 551, 3, 2, 2, 2, 561, 562,
	3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563, 564, 7, 100, 2, 2, 564, 567, 5,
	80, 41, 2, 565, 566, 9, 4, 2, 2, 566, 568, 5, 80, 41, 2, 567, 565, 3, 2,
	2, 2, 567, 568, 3, 2, 2, 2, 568, 570, 3, 2, 2, 2, 569, 561, 3, 2, 2, 2,
	569, 570, 3, 2, 2, 2, 570, 35, 3, 2, 2, 2, 571, 573, 7, 63, 2, 2, 572,
	574, 7, 57, 2, 2, 573, 572, 3, 2, 2, 2, 573, 574, 3, 2, 2, 2, 574, 575,
	3, 2, 2, 2, 575, 576, 5, 134, 68, 2, 576, 37, 3, 2, 2, 2, 577, 578, 7,
	65, 2, 2, 578, 581, 7, 86, 2, 2, 579, 580, 7, 82, 2, 2, 580, 582, 7, 72,
	2, 2, 581, 579, 3, 2, 2, 2, 581, 582, 3, 2, 2, 2, 582, 586, 3, 2, 2, 2,
	583, 584, 5, 134, 68, 2, 584, 585, 7, 4, 2, 2, 585, 587, 3, 2, 2, 2, 586,
	583, 3, 2, 2, 2, 586, 587, 3, 2, 2, 2, 587, 588, 3, 2, 2, 2, 588, 589,
	5, 148, 75, 2, 589, 39, 3, 2, 2, 2, 590, 591, 7, 65, 2, 2, 591, 594, 7,
	132, 2, 2, 592, 593, 7, 82, 2, 2, 593, 595, 7, 72, 2, 2, 594, 592, 3, 2,
	2, 2, 594, 595, 3, 2, 2, 2, 595, 599, 3, 2, 2, 2, 596, 597, 5, 134, 68,
	2, 597, 598, 7, 4, 2, 2, 598, 600, 3, 2, 2, 2, 599, 596, 3, 2, 2, 2, 599,
	600, 3, 2, 2, 2, 600, 601, 3, 2, 2, 2, 601, 602, 5, 136, 69, 2, 602, 41,
	3, 2, 2, 2, 603, 604, 7, 65, 2, 2, 604, 607, 7, 138, 2, 2, 605, 606, 7,
	82, 2, 2, 606, 608, 7, 72, 2, 2, 607, 605, 3, 2, 2, 2, 607, 608, 3, 2,
	2, 2, 608, 612, 3, 2, 2, 2, 609, 610, 5, 134, 68, 2, 610, 611, 7, 4, 2,
	2, 611, 613, 3, 2, 2, 2, 612, 609, 3, 2, 2, 2, 612, 613, 3, 2, 2, 2, 613,
	614, 3, 2, 2, 2, 614, 615, 5, 150, 76, 2, 615, 43, 3, 2, 2, 2, 616, 617,
	7, 65, 2, 2, 617, 620, 7, 145, 2, 2, 618, 619, 7, 82, 2, 2, 619, 621, 7,
	72, 2, 2, 620, 618, 3, 2, 2, 2, 620, 621, 3, 2, 2, 2, 621, 625, 3, 2, 2,
	2, 622, 623, 5, 134, 68, 2, 623, 624, 7, 4, 2, 2, 624, 626, 3, 2, 2, 2,
	625, 622, 3, 2, 2, 2, 625, 626, 3, 2, 2, 2, 626, 627, 3, 2, 2, 2, 627,
	628, 5, 152, 77, 2, 628, 45, 3, 2, 2, 2, 629, 631, 7, 149, 2, 2, 630, 632,
	7, 118, 2, 2, 631, 630, 3, 2, 2, 2, 631, 632, 3, 2, 2, 2, 632, 633, 3,
	2, 2, 2, 633, 638, 5, 98, 50, 2, 634, 635, 7, 7, 2, 2, 635, 637, 5, 98,
	50, 2, 636, 634, 3, 2, 2, 2, 637, 640, 3, 2, 2, 2, 638, 636, 3, 2, 2, 2,
	638, 639, 3, 2, 2, 2, 639, 642, 3, 2, 2, 2, 640, 638, 3, 2, 2, 2, 641,
	629, 3, 2, 2, 2, 641, 642, 3, 2, 2, 2, 642, 643, 3, 2, 2, 2, 643, 649,
	5, 110, 56, 2, 644, 645, 5, 112, 57, 2, 645, 646, 5, 110, 56, 2, 646, 648,
	3, 2, 2, 2, 647, 644, 3, 2, 2, 2, 648, 651, 3, 2, 2, 2, 649, 647, 3, 2,
	2, 2, 649, 650, 3, 2, 2, 2, 650, 662, 3, 2, 2, 2, 651, 649, 3, 2, 2, 2,
	652, 653, 7, 111, 2, 2, 653, 654, 7, 42, 2, 2, 654, 659, 5, 94, 48, 2,
	655, 656, 7, 7, 2, 2, 656, 658, 5, 94, 48, 2, 657, 655, 3, 2, 2, 2, 658,
	661, 3, 2, 2, 2, 659, 657, 3, 2, 2, 2, 659, 660, 3, 2, 2, 2, 660, 663,
	3, 2, 2, 2, 661, 659, 3, 2, 2, 2, 662, 652, 3, 2, 2, 2, 662, 663, 3, 2,
	2, 2, 663, 670, 3, 2, 2, 2, 664, 665, 7, 100, 2, 2, 665, 668, 5, 80, 41,
	2, 666, 667, 9, 4, 2, 2, 667, 669, 5, 80, 41, 2, 668, 666, 3, 2, 2, 2,
	668, 669, 3, 2, 2, 2, 669, 671, 3, 2, 2, 2, 670, 664, 3, 2, 2, 2, 670,
	671, 3, 2, 2, 2, 671, 47, 3, 2, 2, 2, 672, 674, 5, 90, 46, 2, 673, 672,
	3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674, 692, 3, 2, 2, 2, 675, 693, 7, 90,
	2, 2, 676, 693, 7, 124, 2, 2, 677, 678, 7, 90, 2, 2, 678, 679, 7, 110,
	2, 2, 679, 693, 7, 124, 2, 2, 680, 681, 7, 90, 2, 2, 681, 682, 7, 110,
	2, 2, 682, 693, 7, 127, 2, 2, 683, 684, 7, 90, 2, 2, 684, 685, 7, 110,
	2, 2, 685, 693, 7, 27, 2, 2, 686, 687, 7, 90, 2, 2, 687, 688, 7, 110, 2,
	2, 688, 693, 7, 74, 2, 2, 689, 690, 7, 90, 2, 2, 690, 691, 7, 110, 2, 2,
	691, 693, 7, 83, 2, 2, 692, 675, 3, 2, 2, 2, 692, 676, 3, 2, 2, 2, 692,
	677, 3, 2, 2, 2, 692, 680, 3, 2, 2, 2, 692, 683, 3, 2, 2, 2, 692, 686,
	3, 2, 2, 2, 692, 689, 3, 2, 2, 2, 693, 694, 3, 2, 2, 2, 694, 698, 7, 93,
	2, 2, 695, 696, 5, 134, 68, 2, 696, 697, 7, 4, 2, 2, 697, 699, 3, 2, 2,
	2, 698, 695, 3, 2, 2, 2, 698, 699, 3, 2, 2, 2, 699, 700, 3, 2, 2, 2, 700,
	712, 5, 136, 69, 2, 701, 702, 7, 5, 2, 2, 702, 707, 5, 142, 72, 2, 703,
	704, 7, 7, 2, 2, 704, 706, 5, 142, 72, 2, 705, 703, 3, 2, 2, 2, 706, 709,
	3, 2, 2, 2, 707, 705, 3, 2, 2, 2, 707, 708, 3, 2, 2, 2, 708, 710, 3, 2,
	2, 2, 709, 707, 3, 2, 2, 2, 710, 711, 7, 6, 2, 2, 711, 713, 3, 2, 2, 2,
	712, 701, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 745, 3, 2, 2, 2, 714,
	715, 7, 144, 2, 2, 715, 716, 7, 5, 2, 2, 716, 721, 5, 80, 41, 2, 717, 718,
	7, 7, 2, 2, 718, 720, 5, 80, 41, 2, 719, 717, 3, 2, 2, 2, 720, 723, 3,
	2, 2, 2, 721, 719, 3, 2, 2, 2, 721, 722, 3, 2, 2, 2, 722, 724, 3, 2, 2,
	2, 723, 721, 3, 2, 2, 2, 724, 739, 7, 6, 2, 2, 725, 726, 7, 7, 2, 2, 726,
	727, 7, 5, 2, 2, 727, 732, 5, 80, 41, 2, 728, 729, 7, 7, 2, 2, 729, 731,
	5, 80, 41, 2, 730, 728, 3, 2, 2, 2, 731, 734, 3, 2, 2, 2, 732, 730, 3,
	2, 2, 2, 732, 733, 3, 2, 2, 2, 733, 735, 3, 2, 2, 2, 734, 732, 3, 2, 2,
	2, 735, 736, 7, 6, 2, 2, 736, 738, 3, 2, 2, 2, 737, 725, 3, 2, 2, 2, 738,
	741, 3, 2, 2, 2, 739, 737, 3, 2, 2, 2, 739, 740, 3, 2, 2, 2, 740, 746,
	3, 2, 2, 2, 741, 739, 3, 2, 2, 2, 742, 746, 5, 62, 32, 2, 743, 744, 7,
	58, 2, 2, 744, 746, 7, 144, 2, 2, 745, 714, 3, 2, 2, 2, 745, 742, 3, 2,
	2, 2, 745, 743, 3, 2, 2, 2, 746, 49, 3, 2, 2, 2, 747, 751, 7, 114, 2, 2,
	748, 749, 5, 134, 68, 2, 749, 750, 7, 4, 2, 2, 750, 752, 3, 2, 2, 2, 751,
	748, 3, 2, 2, 2, 751, 752, 3, 2, 2, 2, 752, 753, 3, 2, 2, 2, 753, 760,
	5, 156, 79, 2, 754, 755, 7, 8, 2, 2, 755, 761, 5, 96, 49, 2, 756, 757,
	7, 5, 2, 2, 757, 758, 5, 96, 49, 2, 758, 759, 7, 6, 2, 2, 759, 761, 3,
	2, 2, 2, 760, 754, 3, 2, 2, 2, 760, 756, 3, 2, 2, 2, 760, 761, 3, 2, 2,
	2, 761, 51, 3, 2, 2, 2, 762, 773, 7, 121, 2, 2, 763, 774, 5, 144, 73, 2,
	764, 765, 5, 134, 68, 2, 765, 766, 7, 4, 2, 2, 766, 768, 3, 2, 2, 2, 767,
	764, 3, 2, 2, 2, 767, 768, 3, 2, 2, 2, 768, 771, 3, 2, 2, 2, 769, 772,
	5, 136, 69, 2, 770, 772, 5, 148, 75, 2, 771, 769, 3, 2, 2, 2, 771, 770,
	3, 2, 2, 2, 772, 774, 3, 2, 2, 2, 773, 763, 3, 2, 2, 2, 773, 767, 3, 2,
	2, 2, 773, 774, 3, 2, 2, 2, 774, 53, 3, 2, 2, 2, 775, 777, 7, 122, 2, 2,
	776, 778, 7, 129, 2, 2, 777, 776, 3, 2, 2, 2, 777, 778, 3, 2, 2, 2, 778,
	779, 3, 2, 2, 2, 779, 780, 5, 158, 80, 2, 780, 55, 3, 2, 2, 2, 781, 786,
	7, 127, 2, 2, 782, 784, 7, 137, 2, 2, 783, 785, 5, 162, 82, 2, 784, 783,
	3, 2, 2, 2, 784, 785, 3, 2, 2, 2, 785, 787, 3, 2, 2, 2, 786, 782, 3, 2,
	2, 2, 786, 787, 3, 2, 2, 2, 787, 793, 3, 2, 2, 2, 788, 790, 7, 136, 2,
	2, 789, 791, 7, 129, 2, 2, 790, 789, 3, 2, 2, 2, 790, 791, 3, 2, 2, 2,
	791, 792, 3, 2, 2, 2, 792, 794, 5, 158, 80, 2, 793, 788, 3, 2, 2, 2, 793,
	794, 3, 2, 2, 2, 794, 57, 3, 2, 2, 2, 795, 796, 7, 129, 2, 2, 796, 797,
	5, 158, 80, 2, 797, 59, 3, 2, 2, 2, 798, 800, 7, 149, 2, 2, 799, 801, 7,
	118, 2, 2, 800, 799, 3, 2, 2, 2, 800, 801, 3, 2, 2, 2, 801, 802, 3, 2,
	2, 2, 802, 807, 5, 98, 50, 2, 803, 804, 7, 7, 2, 2, 804, 806, 5, 98, 50,
	2, 805, 803, 3, 2, 2, 2, 806, 809, 3, 2, 2, 2, 807, 805, 3, 2, 2, 2, 807,
	808, 3, 2, 2, 2, 808, 811, 3, 2, 2, 2, 809, 807, 3, 2, 2, 2, 810, 798,
	3, 2, 2, 2, 810, 811, 3, 2, 2, 2, 811, 812, 3, 2, 2, 2, 812, 823, 5, 110,
	56, 2, 813, 814, 7, 111, 2, 2, 814, 815, 7, 42, 2, 2, 815, 820, 5, 94,
	48, 2, 816, 817, 7, 7, 2, 2, 817, 819, 5, 94, 48, 2, 818, 816, 3, 2, 2,
	2, 819, 822, 3, 2, 2, 2, 820, 818, 3, 2, 2, 2, 820, 821, 3, 2, 2, 2, 821,
	824, 3, 2, 2, 2, 822, 820, 3, 2, 2, 2, 823, 813, 3, 2, 2, 2, 823, 824,
	3, 2, 2, 2, 824, 831, 3, 2, 2, 2, 825, 826, 7, 100, 2, 2, 826, 829, 5,
	80, 41, 2, 827, 828, 9, 4, 2, 2, 828, 830, 5, 80, 41, 2, 829, 827, 3, 2,
	2, 2, 829, 830, 3, 2, 2, 2, 830, 832, 3, 2, 2, 2, 831, 825, 3, 2, 2, 2,
	831, 832, 3, 2, 2, 2, 832, 61, 3, 2, 2, 2, 833, 835, 7, 149, 2, 2, 834,
	836, 7, 118, 2, 2, 835, 834, 3, 2, 2, 2, 835, 836, 3, 2, 2, 2, 836, 837,
	3, 2, 2, 2, 837, 842, 5, 98, 50, 2, 838, 839, 7, 7, 2, 2, 839, 841, 5,
	98, 50, 2, 840, 838, 3, 2, 2, 2, 841, 844, 3, 2, 2, 2, 842, 840, 3, 2,
	2, 2, 842, 843, 3, 2, 2, 2, 843, 846, 3, 2, 2, 2, 844, 842, 3, 2, 2, 2,
	845, 833, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847,
	853, 5, 64, 33, 2, 848, 849, 5, 112, 57, 2, 849, 850, 5, 64, 33, 2, 850,
	852, 3, 2, 2, 2, 851, 848, 3, 2, 2, 2, 852, 855, 3, 2, 2, 2, 853, 851,
	3, 2, 2, 2, 853, 854, 3, 2, 2, 2, 854, 866, 3, 2, 2, 2, 855, 853, 3, 2,
	2, 2, 856, 857, 7, 111, 2, 2, 857, 858, 7, 42, 2, 2, 858, 863, 5, 94, 48,
	2, 859, 860, 7, 7, 2, 2, 860, 862, 5, 94, 48, 2, 861, 859, 3, 2, 2, 2,
	862, 865, 3, 2, 2, 2, 863, 861, 3, 2, 2, 2, 863, 864, 3, 2, 2, 2, 864,
	867, 3, 2, 2, 2, 865, 863, 3, 2, 2, 2, 866, 856, 3, 2, 2, 2, 866, 867,
	3, 2, 2, 2, 867, 874, 3, 2, 2, 2, 868, 869, 7, 100, 2, 2, 869, 872, 5,
	80, 41, 2, 870, 871, 9, 4, 2, 2, 871, 873, 5, 80, 41, 2, 872, 870, 3, 2,
	2, 2, 872, 873, 3, 2, 2, 2, 873, 875, 3, 2, 2, 2, 874, 868, 3, 2, 2, 2,
	874, 875, 3, 2, 2, 2, 875, 63, 3, 2, 2, 2, 876, 878, 7, 130, 2, 2, 877,
	879, 9, 6, 2, 2, 878, 877, 3, 2, 2, 2, 878, 879, 3, 2, 2, 2, 879, 880,
	3, 2, 2, 2, 880, 885, 5, 100, 51, 2, 881, 882, 7, 7, 2, 2, 882, 884, 5,
	100, 51, 2, 883, 881, 3, 2, 2, 2, 884, 887, 3, 2, 2, 2, 885, 883, 3, 2,
	2, 2, 885, 886, 3, 2, 2, 2, 886, 900, 3, 2, 2, 2, 887, 885, 3, 2, 2, 2,
	888, 898, 7, 77, 2, 2, 889, 894, 5, 102, 52, 2, 890, 891, 7, 7, 2, 2, 891,
	893, 5, 102, 52, 2, 892, 890, 3, 2, 2, 2, 893, 896, 3, 2, 2, 2, 894, 892,
	3, 2, 2, 2, 894, 895, 3, 2, 2, 2, 895, 899, 3, 2, 2, 2, 896, 894, 3, 2,
	2, 2, 897, 899, 5, 104, 53, 2, 898, 889, 3, 2, 2, 2, 898, 897, 3, 2, 2,
	2, 899, 901, 3, 2, 2, 2, 900, 888, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901,
	904, 3, 2, 2, 2, 902, 903, 7, 148, 2, 2, 903, 905, 5, 80, 41, 2, 904, 902,
	3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 920, 3, 2, 2, 2, 906, 907, 7, 80,
	2, 2, 907, 908, 7, 42, 2, 2, 908, 913, 5, 80, 41, 2, 909, 910, 7, 7, 2,
	2, 910, 912, 5, 80, 41, 2, 911, 909, 3, 2, 2, 2, 912, 915, 3, 2, 2, 2,
	913, 911, 3, 2, 2, 2, 913, 914, 3, 2, 2, 2, 914, 918, 3, 2, 2, 2, 915,
	913, 3, 2, 2, 2, 916, 917, 7, 81, 2, 2, 917, 919, 5, 80, 41, 2, 918, 916,
	3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 921, 3, 2, 2, 2, 920, 906, 3, 2,
	2, 2, 920, 921, 3, 2, 2, 2, 921, 951, 3, 2, 2, 2, 922, 923, 7, 144, 2,
	2, 923, 924, 7, 5, 2, 2, 924, 929, 5, 80, 41, 2, 925, 926, 7, 7, 2, 2,
	926, 928, 5, 80, 41, 2, 927, 925, 3, 2, 2, 2, 928, 931, 3, 2, 2, 2, 929,
	927, 3, 2, 2, 2, 929, 930, 3, 2, 2, 2, 930, 932, 3, 2, 2, 2, 931, 929,
	3, 2, 2, 2, 932, 947, 7, 6, 2, 2, 933, 934, 7, 7, 2, 2, 934, 935, 7, 5,
	2, 2, 935, 940, 5, 80, 41, 2, 936, 937, 7, 7, 2, 2, 937, 939, 5, 80, 41,
	2, 938, 936, 3, 2, 2, 2, 939, 942, 3, 2, 2, 2, 940, 938, 3, 2, 2, 2, 940,
	941, 3, 2, 2, 2, 941, 943, 3, 2, 2, 2, 942, 940, 3, 2, 2, 2, 943, 944,
	7, 6, 2, 2, 944, 946, 3, 2, 2, 2, 945, 933, 3, 2, 2, 2, 946, 949, 3, 2,
	2, 2, 947, 945, 3, 2, 2, 2, 947, 948, 3, 2, 2, 2, 948, 951, 3, 2, 2, 2,
	949, 947, 3, 2, 2, 2, 950, 876, 3, 2, 2, 2, 950, 922, 3, 2, 2, 2, 951,
	65, 3, 2, 2, 2, 952, 954, 5, 90, 46, 2, 953, 952, 3, 2, 2, 2, 953, 954,
	3, 2, 2, 2, 954, 955, 3, 2, 2, 2, 955, 966, 7, 141, 2, 2, 956, 957, 7,
	110, 2, 2, 957, 967, 7, 127, 2, 2, 958, 959, 7, 110, 2, 2, 959, 967, 7,
	27, 2, 2, 960, 961, 7, 110, 2, 2, 961, 967, 7, 124, 2, 2, 962, 963, 7,
	110, 2, 2, 963, 967, 7, 74, 2, 2, 964, 965, 7, 110, 2, 2, 965, 967, 7,
	83, 2, 2, 966, 956, 3, 2, 2, 2, 966, 958, 3, 2, 2, 2, 966, 960, 3, 2, 2,
	2, 966, 962, 3, 2, 2, 2, 966, 964, 3, 2, 2, 2, 966, 967, 3, 2, 2, 2, 967,
	968, 3, 2, 2, 2, 968, 969, 5, 92, 47, 2, 969, 970, 7, 131, 2, 2, 970, 971,
	5, 142, 72, 2, 971, 972, 7, 8, 2, 2, 972, 980, 5, 80, 41, 2, 973, 974,
	7, 7, 2, 2, 974, 975, 5, 142, 72, 2, 975, 976, 7, 8, 2, 2, 976, 977, 5,
	80, 41, 2, 977, 979, 3, 2, 2, 2, 978, 973, 3, 2, 2, 2, 979, 982, 3, 2,
	2, 2, 980, 978, 3, 2, 2, 2, 980, 981, 3, 2, 2, 2, 981, 985, 3, 2, 2, 2,
	982, 980, 3, 2, 2, 2, 983, 984, 7, 148, 2, 2, 984, 986, 5, 80, 41, 2, 985,
	983, 3, 2, 2, 2, 985, 986, 3, 2, 2, 2, 986, 67, 3, 2, 2, 2, 987, 989, 5,
	90, 46, 2, 988, 987, 3, 2, 2, 2, 988, 989, 3, 2, 2, 2, 989, 990, 3, 2,
	2, 2, 990, 1001, 7, 141, 2, 2, 991, 992, 7, 110, 2, 2, 992, 1002, 7, 127,
	2, 2, 993, 994, 7, 110, 2, 2, 994, 1002, 7, 27, 2, 2, 995, 996, 7, 110,
	2, 2, 996, 1002, 7, 124, 2, 2, 997, 998, 7, 110, 2, 2, 998, 1002, 7, 74,
	2, 2, 999, 1000, 7, 110, 2, 2, 1000, 1002, 7, 83, 2, 2, 1001, 991, 3, 2,
	2, 2, 1001, 993, 3, 2, 2, 2, 1001, 995, 3, 2, 2, 2, 1001, 997, 3, 2, 2,
	2, 1001, 999, 3, 2, 2, 2, 1001, 1002, 3, 2, 2, 2, 1002, 1003, 3, 2, 2,
	2, 1003, 1004, 5, 92, 47, 2, 1004, 1005, 7, 131, 2, 2, 1005, 1006, 5, 142,
	72, 2, 1006, 1007, 7, 8, 2, 2, 1007, 1015, 5, 80, 41, 2, 1008, 1009, 7,
	7, 2, 2, 1009, 1010, 5, 142, 72, 2, 1010, 1011, 7, 8, 2, 2, 1011, 1012,
	5, 80, 41, 2, 1012, 1014, 3, 2, 2, 2, 1013, 1008, 3, 2, 2, 2, 1014, 1017,
	3, 2, 2, 2, 1015, 1013, 3, 2, 2, 2, 1015, 1016, 3, 2, 2, 2, 1016, 1020,
	3, 2, 2, 2, 1017, 1015, 3, 2, 2, 2, 1018, 1019, 7, 148, 2, 2, 1019, 1021,
	5, 80, 41, 2, 1020, 1018, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021, 1040,
	3, 2, 2, 2, 1022, 1023, 7, 111, 2, 2, 1023, 1024, 7, 42, 2, 2, 1024, 1029,
	5, 94, 48, 2, 1025, 1026, 7, 7, 2, 2, 1026, 1028, 5, 94, 48, 2, 1027, 1025,
	3, 2, 2, 2, 1028, 1031, 3, 2, 2, 2, 1029, 1027, 3, 2, 2, 2, 1029, 1030,
	3, 2, 2, 2, 1030, 1033, 3, 2, 2, 2, 1031, 1029, 3, 2, 2, 2, 1032, 1022,
	3, 2, 2, 2, 1032, 1033, 3, 2, 2, 2, 1033, 1034, 3, 2, 2, 2, 1034, 1035,
	7, 100, 2, 2, 1035, 1038, 5, 80, 41, 2, 1036, 1037, 9, 4, 2, 2, 1037, 1039,
	5, 80, 41, 2, 1038, 1036, 3, 2, 2, 2, 1038, 1039, 3, 2, 2, 2, 1039, 1041,
	3, 2, 2, 2, 1040, 1032, 3, 2, 2, 2, 1040, 1041, 3, 2, 2, 2, 1041, 69, 3,
	2, 2, 2, 1042, 1043, 7, 143, 2, 2, 1043, 71, 3, 2, 2, 2, 1044, 1046, 5,
	142, 72, 2, 1045, 1047, 5, 74, 38, 2, 1046, 1045, 3, 2, 2, 2, 1046, 1047,
	3, 2, 2, 2, 1047, 1051, 3, 2, 2, 2, 1048, 1050, 5, 76, 39, 2, 1049, 1048,
	3, 2, 2, 2, 1050, 1053, 3, 2, 2, 2, 1051, 1049, 3, 2, 2, 2, 1051, 1052,
	3, 2, 2, 2, 1052, 73, 3, 2, 2, 2, 1053, 1051, 3, 2, 2, 2, 1054, 1056, 5,
	130, 66, 2, 1055, 1054, 3, 2, 2, 2, 1056, 1057, 3, 2, 2, 2, 1057, 1055,
	3, 2, 2, 2, 1057, 1058, 3, 2, 2, 2, 1058, 1069, 3, 2, 2, 2, 1059, 1060,
	7, 5, 2, 2, 1060, 1061, 5, 116, 59, 2, 1061, 1062, 7, 6, 2, 2, 1062, 1070,
	3, 2, 2, 2, 1063, 1064, 7, 5, 2, 2, 1064, 1065, 5, 116, 59, 2, 1065, 1066,
	7, 7, 2, 2, 1066, 1067, 5, 116, 59, 2, 1067, 1068, 7, 6, 2, 2, 1068, 1070,
	3, 2, 2, 2, 1069, 1059, 3, 2, 2, 2, 1069, 1063, 3, 2, 2, 2, 1069, 1070,
	3, 2, 2, 2, 1070, 1078, 3, 2, 2, 2, 1071, 1078, 7, 151, 2, 2, 1072, 1078,
	7, 152, 2, 2, 1073, 1078, 7, 153, 2, 2, 1074, 1078, 7, 154, 2, 2, 1075,
	1078, 7, 155, 2, 2, 1076, 1078, 7, 156, 2, 2, 1077, 1055, 3, 2, 2, 2, 1077,
	1071, 3, 2, 2, 2, 1077, 1072, 3, 2, 2, 2, 1077, 1073, 3, 2, 2, 2, 1077,
	1074, 3, 2, 2, 2, 1077, 1075, 3, 2, 2, 2, 1077, 1076, 3, 2, 2, 2, 1078,
	75, 3, 2, 2, 2, 1079, 1080, 7, 51, 2, 2, 1080, 1082, 5, 130, 66, 2, 1081,
	1079, 3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082, 1116, 3, 2, 2, 2, 1083,
	1084, 7, 115, 2, 2, 1084, 1086, 7, 97, 2, 2, 1085, 1087, 9, 7, 2, 2, 1086,
	1085, 3, 2, 2, 2, 1086, 1087, 3, 2, 2, 2, 1087, 1088, 3, 2, 2, 2, 1088,
	1090, 5, 78, 40, 2, 1089, 1091, 7, 38, 2, 2, 1090, 1089, 3, 2, 2, 2, 1090,
	1091, 3, 2, 2, 2, 1091, 1117, 3, 2, 2, 2, 1092, 1094, 7, 104, 2, 2, 1093,
	1092, 3, 2, 2, 2, 1093, 1094, 3, 2, 2, 2, 1094, 1095, 3, 2, 2, 2, 1095,
	1096, 7, 106, 2, 2, 1096, 1117, 5, 78, 40, 2, 1097, 1098, 7, 140, 2, 2,
	1098, 1117, 5, 78, 40, 2, 1099, 1100, 7, 46, 2, 2, 1100, 1101, 7, 5, 2,
	2, 1101, 1102, 5, 80, 41, 2, 1102, 1103, 7, 6, 2, 2, 1103, 1117, 3, 2,
	2, 2, 1104, 1111, 7, 58, 2, 2, 1105, 1112, 5, 116, 59, 2, 1106, 1112, 5,
	118, 60, 2, 1107, 1108, 7, 5, 2, 2, 1108, 1109, 5, 80, 41, 2, 1109, 1110,
	7, 6, 2, 2, 1110, 1112, 3, 2, 2, 2, 1111, 1105, 3, 2, 2, 2, 1111, 1106,
	3, 2, 2, 2, 1111, 1107, 3, 2, 2, 2, 1112, 1117, 3, 2, 2, 2, 1113, 1114,
	7, 47, 2, 2, 1114, 1117, 5, 144, 73, 2, 1115, 1117, 5, 82, 42, 2, 1116,
	1083, 3, 2, 2, 2, 1116, 1093, 3, 2, 2, 2, 1116, 1097, 3, 2, 2, 2, 1116,
	1099, 3, 2, 2, 2, 1116, 1104, 3, 2, 2, 2, 1116, 1113, 3, 2, 2, 2, 1116,
	1115, 3, 2, 2, 2, 1117, 77, 3, 2, 2, 2, 1118, 1119, 7, 109, 2, 2, 1119,
	1120, 7, 50, 2, 2, 1120, 1122, 9, 8, 2, 2, 1121, 1118, 3, 2, 2, 2, 1121,
	1122, 3, 2, 2, 2, 1122, 79, 3, 2, 2, 2, 1123, 1124, 8, 41, 1, 2, 1124,
	1200, 5, 118, 60, 2, 1125, 1200, 7, 159, 2, 2, 1126, 1127, 5, 134, 68,
	2, 1127, 1128, 7, 4, 2, 2, 1128, 1130, 3, 2, 2, 2, 1129, 1126, 3, 2, 2,
	2, 1129, 1130, 3, 2, 2, 2, 1130, 1131, 3, 2, 2, 2, 1131, 1132, 5, 136,
	69, 2, 1132, 1133, 7, 4, 2, 2, 1133, 1135, 3, 2, 2, 2, 1134, 1129, 3, 2,
	2, 2, 1134, 1135, 3, 2, 2, 2, 1135, 1136, 3, 2, 2, 2, 1136, 1200, 5, 142,
	72, 2, 1137, 1138, 5, 120, 61, 2, 1138, 1139, 5, 80, 41, 23, 1139, 1200,
	3, 2, 2, 2, 1140, 1141, 5, 132, 67, 2, 1141, 1154, 7, 5, 2, 2, 1142, 1144,
	7, 64, 2, 2, 1143, 1142, 3, 2, 2, 2, 1143, 1144, 3, 2, 2, 2, 1144, 1145,
	3, 2, 2, 2, 1145, 1150, 5, 80, 41, 2, 1146, 1147, 7, 7, 2, 2, 1147, 1149,
	5, 80, 41, 2, 1148, 1146, 3, 2, 2, 2, 1149, 1152, 3, 2, 2, 2, 1150, 1148,
	3, 2, 2, 2, 1150, 1151, 3, 2, 2, 2, 1151, 1155, 3, 2, 2, 2, 1152, 1150,
	3, 2, 2, 2, 1153, 1155, 7, 9, 2, 2, 1154, 1143, 3, 2, 2, 2, 1154, 1153,
	3, 2, 2, 2, 1154, 1155, 3, 2, 2, 2, 1155, 1156, 3, 2, 2, 2, 1156, 1157,
	7, 6, 2, 2, 1157, 1200, 3, 2, 2, 2, 1158, 1159, 7, 5, 2, 2, 1159, 1160,
	5, 80, 41, 2, 1160, 1161, 7, 6, 2, 2, 1161, 1200, 3, 2, 2, 2, 1162, 1163,
	7, 45, 2, 2, 1163, 1164, 7, 5, 2, 2, 1164, 1165, 5, 80, 41, 2, 1165, 1166,
	7, 35, 2, 2, 1166, 1167, 5, 74, 38, 2, 1167, 1168, 7, 6, 2, 2, 1168, 1200,
	3, 2, 2, 2, 1169, 1171, 7, 104, 2, 2, 1170, 1169, 3, 2, 2, 2, 1170, 1171,
	3, 2, 2, 2, 1171, 1172, 3, 2, 2, 2, 1172, 1174, 7, 72, 2, 2, 1173, 1170,
	3, 2, 2, 2, 1173, 1174, 3, 2, 2, 2, 1174, 1175, 3, 2, 2, 2, 1175, 1176,
	7, 5, 2, 2, 1176, 1177, 5, 62, 32, 2, 1177, 1178, 7, 6, 2, 2, 1178, 1200,
	3, 2, 2, 2, 1179, 1181, 7, 44, 2, 2, 1180, 1182, 5, 80, 41, 2, 1181, 1180,
	3, 2, 2, 2, 1181, 1182, 3, 2, 2, 2, 1182, 1188, 3, 2, 2, 2, 1183, 1184,
	7, 147, 2, 2, 1184, 1185, 5, 80, 41, 2, 1185, 1186, 7, 135, 2, 2, 1186,
	1187, 5, 80, 41, 2, 1187, 1189, 3, 2, 2, 2, 1188, 1183, 3, 2, 2, 2, 1189,
	1190, 3, 2, 2, 2, 1190, 1188, 3, 2, 2, 2, 1190, 1191, 3, 2, 2, 2, 1191,
	1194, 3, 2, 2, 2, 1192, 1193, 7, 67, 2, 2, 1193, 1195, 5, 80, 41, 2, 1194,
	1192, 3, 2, 2, 2, 1194, 1195, 3, 2, 2, 2, 1195, 1196, 3, 2, 2, 2, 1196,
	1197, 7, 68, 2, 2, 1197, 1200, 3, 2, 2, 2, 1198, 1200, 5, 84, 43, 2, 1199,
	1123, 3, 2, 2, 2, 1199, 1125, 3, 2, 2, 2, 1199, 1134, 3, 2, 2, 2, 1199,
	1137, 3, 2, 2, 2, 1199, 1140, 3, 2, 2, 2, 1199, 1158, 3, 2, 2, 2, 1199,
	1162, 3, 2, 2, 2, 1199, 1173, 3, 2, 2, 2, 1199, 1179, 3, 2, 2, 2, 1199,
	1198, 3, 2, 2, 2, 1200, 1301, 3, 2, 2, 2, 1201, 1202, 12, 22, 2, 2, 1202,
	1203, 7, 13, 2, 2, 1203, 1300, 5, 80, 41, 23, 1204, 1205, 12, 21, 2, 2,
	1205, 1206, 9, 9, 2, 2, 1206, 1300, 5, 80, 41, 22, 1207, 1208, 12, 20,
	2, 2, 1208, 1209, 9, 10, 2, 2, 1209, 1300, 5, 80, 41, 21, 1210, 1211, 12,
	19, 2, 2, 1211, 1212, 9, 11, 2, 2, 1212, 1300, 5, 80, 41, 20, 1213, 1214,
	12, 18, 2, 2, 1214, 1215, 9, 12, 2, 2, 1215, 1300, 5, 80, 41, 19, 1216,
	1229, 12, 17, 2, 2, 1217, 1230, 7, 8, 2, 2, 1218, 1230, 7, 24, 2, 2, 1219,
	1230, 7, 25, 2, 2, 1220, 1230, 7, 26, 2, 2, 1221, 1230, 7, 94, 2, 2, 1222,
	1223, 7, 94, 2, 2, 1223, 1230, 7, 104, 2, 2, 1224, 1230, 7, 85, 2, 2, 1225,
	1230, 7, 99, 2, 2, 1226, 1230, 7, 79, 2, 2, 1227, 1230, 7, 101, 2, 2, 1228,
	1230, 7, 120, 2, 2, 1229, 1217, 3, 2, 2, 2, 1229, 1218, 3, 2, 2, 2, 1229,
	1219, 3, 2, 2, 2, 1229, 1220, 3, 2, 2, 2, 1229, 1221, 3, 2, 2, 2, 1229,
	1222, 3, 2, 2, 2, 1229, 1224, 3, 2, 2, 2, 1229, 1225, 3, 2, 2, 2, 1229,
	1226, 3, 2, 2, 2, 1229, 1227, 3, 2, 2, 2, 1229, 1228, 3, 2, 2, 2, 1230,
	1231, 3, 2, 2, 2, 1231, 1300, 5, 80, 41, 18, 1232, 1233, 12, 16, 2, 2,
	1233, 1234, 7, 34, 2, 2, 1234, 1300, 5, 80, 41, 17, 1235, 1236, 12, 15,
	2, 2, 1236, 1237, 7, 110, 2, 2, 1237, 1300, 5, 80, 41, 16, 1238, 1239,
	12, 8, 2, 2, 1239, 1241, 7, 94, 2, 2, 1240, 1242, 7, 104, 2, 2, 1241, 1240,
	3, 2, 2, 2, 1241, 1242, 3, 2, 2, 2, 1242, 1243, 3, 2, 2, 2, 1243, 1300,
	5, 80, 41, 9, 1244, 1246, 12, 7, 2, 2, 1245, 1247, 7, 104, 2, 2, 1246,
	1245, 3, 2, 2, 2, 1246, 1247, 3, 2, 2, 2, 1247, 1248, 3, 2, 2, 2, 1248,
	1249, 7, 41, 2, 2, 1249, 1250, 5, 80, 41, 2, 1250, 1251, 7, 34, 2, 2, 1251,
	1252, 5, 80, 41, 8, 1252, 1300, 3, 2, 2, 2, 1253, 1254, 12, 11, 2, 2, 1254,
	1255, 7, 47, 2, 2, 1255, 1300, 5, 144, 73, 2, 1256, 1258, 12, 10, 2, 2,
	1257, 1259, 7, 104, 2, 2, 1258, 1257, 3, 2, 2, 2, 1258, 1259, 3, 2, 2,
	2, 1259, 1260, 3, 2, 2, 2, 1260, 1261, 9, 13, 2, 2, 1261, 1264, 5, 80,
	41, 2, 1262, 1263, 7, 69, 2, 2, 1263, 1265, 5, 80, 41, 2, 1264, 1262, 3,
	2, 2, 2, 1264, 1265, 3, 2, 2, 2, 1265, 1300, 3, 2, 2, 2, 1266, 1271, 12,
	9, 2, 2, 1267, 1272, 7, 95, 2, 2, 1268, 1272, 7, 105, 2, 2, 1269, 1270,
	7, 104, 2, 2, 1270, 1272, 7, 106, 2, 2, 1271, 1267, 3, 2, 2, 2, 1271, 1268,
	3, 2, 2, 2, 1271, 1269, 3, 2, 2, 2, 1272, 1300, 3, 2, 2, 2, 1273, 1275,
	12, 6, 2, 2, 1274, 1276, 7, 104, 2, 2, 1275, 1274, 3, 2, 2, 2, 1275, 1276,
	3, 2, 2, 2, 1276, 1277, 3, 2, 2, 2, 1277, 1297, 7, 85, 2, 2, 1278, 1288,
	7, 5, 2, 2, 1279, 1289, 5, 62, 32, 2, 1280, 1285, 5, 80, 41, 2, 1281, 1282,
	7, 7, 2, 2, 1282, 1284, 5, 80, 41, 2, 1283, 1281, 3, 2, 2, 2, 1284, 1287,
	3, 2, 2, 2, 1285, 1283, 3, 2, 2, 2, 1285, 1286, 3, 2, 2, 2, 1286, 1289,
	3, 2, 2, 2, 1287, 1285, 3, 2, 2, 2, 1288, 1279, 3, 2, 2, 2, 1288, 1280,
	3, 2, 2, 2, 1288, 1289, 3, 2, 2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1298,
	7, 6, 2, 2, 1291, 1292, 5, 134, 68, 2, 1292, 1293, 7, 4, 2, 2, 1293, 1295,
	3, 2, 2, 2, 1294, 1291, 3, 2, 2, 2, 1294, 1295, 3, 2, 2, 2, 1295, 1296,
	3, 2, 2, 2, 1296, 1298, 5, 136, 69, 2, 1297, 1278, 3, 2, 2, 2, 1297, 1294,
	3, 2, 2, 2, 1298, 1300, 3, 2, 2, 2, 1299, 1201, 3, 2, 2, 2, 1299, 1204,
	3, 2, 2, 2, 1299, 1207, 3, 2, 2, 2, 1299, 1210, 3, 2, 2, 2, 1299, 1213,
	3, 2, 2, 2, 1299, 1216, 3, 2, 2, 2, 1299, 1232, 3, 2, 2, 2, 1299, 1235,
	3, 2, 2, 2, 1299, 1238, 3, 2, 2, 2, 1299, 1244, 3, 2, 2, 2, 1299, 1253,
	3, 2, 2, 2, 1299, 1256, 3, 2, 2, 2, 1299, 1266, 3, 2, 2, 2, 1299, 1273,
	3, 2, 2, 2, 1300, 1303, 3, 2, 2, 2, 1301, 1299, 3, 2, 2, 2, 1301, 1302,
	3, 2, 2, 2, 1302, 81, 3, 2, 2, 2, 1303, 1301, 3, 2, 2, 2, 1304, 1305, 7,
	119, 2, 2, 1305, 1317, 5, 146, 74, 2, 1306, 1307, 7, 5, 2, 2, 1307, 1312,
	5, 142, 72, 2, 1308, 1309, 7, 7, 2, 2, 1309, 1311, 5, 142, 72, 2, 1310,
	1308, 3, 2, 2, 2, 1311, 1314, 3, 2, 2, 2, 1312, 1310, 3, 2, 2, 2, 1312,
	1313, 3, 2, 2, 2, 1313, 1315, 3, 2, 2, 2, 1314, 1312, 3, 2, 2, 2, 1315,
	1316, 7, 6, 2, 2, 1316, 1318, 3, 2, 2, 2, 1317, 1306, 3, 2, 2, 2, 1317,
	1318, 3, 2, 2, 2, 1318, 1337, 3, 2, 2, 2, 1319, 1320, 7, 109, 2, 2, 1320,
	1329, 9, 14, 2, 2, 1321, 1322, 7, 131, 2, 2, 1322, 1330, 7, 106, 2, 2,
	1323, 1324, 7, 131, 2, 2, 1324, 1330, 7, 58, 2, 2, 1325, 1330, 7, 43, 2,
	2, 1326, 1330, 7, 125, 2, 2, 1327, 1328, 7, 103, 2, 2, 1328, 1330, 7, 28,
	2, 2, 1329, 1321, 3, 2, 2, 2, 1329, 1323, 3, 2, 2, 2, 1329, 1325, 3, 2,
	2, 2, 1329, 1326, 3, 2, 2, 2, 1329, 1327, 3, 2, 2, 2, 1330, 1334, 3, 2,
	2, 2, 1331, 1332, 7, 101, 2, 2, 1332, 1334, 5, 130, 66, 2, 1333, 1319,
	3, 2, 2, 2, 1333, 1331, 3, 2, 2, 2, 1334, 1336, 3, 2, 2, 2, 1335, 1333,
	3, 2, 2, 2, 1336, 1339, 3, 2, 2, 2, 1337, 1335, 3, 2, 2, 2, 1337, 1338,
	3, 2, 2, 2, 1338, 1350, 3, 2, 2, 2, 1339, 1337, 3, 2, 2, 2, 1340, 1342,
	7, 104, 2, 2, 1341, 1340, 3, 2, 2, 2, 1341, 1342, 3, 2, 2, 2, 1342, 1343,
	3, 2, 2, 2, 1343, 1348, 7, 59, 2, 2, 1344, 1345, 7, 88, 2, 2, 1345, 1349,
	7, 60, 2, 2, 1346, 1347, 7, 88, 2, 2, 1347, 1349, 7, 84, 2, 2, 1348, 1344,
	3, 2, 2, 2, 1348, 1346, 3, 2, 2, 2, 1348, 1349, 3, 2, 2, 2, 1349, 1351,
	3, 2, 2, 2, 1350, 1341, 3, 2, 2, 2, 1350, 1351, 3, 2, 2, 2, 1351, 83, 3,
	2, 2, 2, 1352, 1353, 7, 117, 2, 2, 1353, 1358, 7, 5, 2, 2, 1354, 1359,
	7, 83, 2, 2, 1355, 1356, 9, 15, 2, 2, 1356, 1357, 7, 7, 2, 2, 1357, 1359,
	5, 122, 62, 2, 1358, 1354, 3, 2, 2, 2, 1358, 1355, 3, 2, 2, 2, 1359, 1360,
	3, 2, 2, 2, 1360, 1361, 7, 6, 2, 2, 1361, 85, 3, 2, 2, 2, 1362, 1365, 5,
	142, 72, 2, 1363, 1364, 7, 47, 2, 2, 1364, 1366, 5, 144, 73, 2, 1365, 1363,
	3, 2, 2, 2, 1365, 1366, 3, 2, 2, 2, 1366, 1368, 3, 2, 2, 2, 1367, 1369,
	9, 7, 2, 2, 1368, 1367, 3, 2, 2, 2, 1368, 1369, 3, 2, 2, 2, 1369, 87, 3,
	2, 2, 2, 1370, 1371, 7, 51, 2, 2, 1371, 1373, 5, 130, 66, 2, 1372, 1370,
	3, 2, 2, 2, 1372, 1373, 3, 2, 2, 2, 1373, 1410, 3, 2, 2, 2, 1374, 1375,
	7, 115, 2, 2, 1375, 1378, 7, 97, 2, 2, 1376, 1378, 7, 140, 2, 2, 1377,
	1374, 3, 2, 2, 2, 1377, 1376, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379,
	1380, 7, 5, 2, 2, 1380, 1385, 5, 86, 44, 2, 1381, 1382, 7, 7, 2, 2, 1382,
	1384, 5, 86, 44, 2, 1383, 1381, 3, 2, 2, 2, 1384, 1387, 3, 2, 2, 2, 1385,
	1383, 3, 2, 2, 2, 1385, 1386, 3, 2, 2, 2, 1386, 1388, 3, 2, 2, 2, 1387,
	1385, 3, 2, 2, 2, 1388, 1389, 7, 6, 2, 2, 1389, 1390, 5, 78, 40, 2, 1390,
	1411, 3, 2, 2, 2, 1391, 1392, 7, 46, 2, 2, 1392, 1393, 7, 5, 2, 2, 1393,
	1394, 5, 80, 41, 2, 1394, 1395, 7, 6, 2, 2, 1395, 1411, 3, 2, 2, 2, 1396,
	1397, 7, 76, 2, 2, 1397, 1398, 7, 97, 2, 2, 1398, 1399, 7, 5, 2, 2, 1399,
	1404, 5, 142, 72, 2, 1400, 1401, 7, 7, 2, 2, 1401, 1403, 5, 142, 72, 2,
	1402, 1400, 3, 2, 2, 2, 1403, 1406, 3, 2, 2, 2, 1404, 1402, 3, 2, 2, 2,
	1404, 1405, 3, 2, 2, 2, 1405, 1407, 3, 2, 2, 2, 1406, 1404, 3, 2, 2, 2,
	1407, 1408, 7, 6, 2, 2, 1408, 1409, 5, 82, 42, 2, 1409, 1411, 3, 2, 2,
	2, 1410, 1377, 3, 2, 2, 2, 1410, 1391, 3, 2, 2, 2, 1410, 1396, 3, 2, 2,
	2, 1411, 89, 3, 2, 2, 2, 1412, 1414, 7, 149, 2, 2, 1413, 1415, 7, 118,
	2, 2, 1414, 1413, 3, 2, 2, 2, 1414, 1415, 3, 2, 2, 2, 1415, 1416, 3, 2,
	2, 2, 1416, 1417, 5, 114, 58, 2, 1417, 1418, 7, 35, 2, 2, 1418, 1419, 7,
	5, 2, 2, 1419, 1420, 5, 62, 32, 2, 1420, 1430, 7, 6, 2, 2, 1421, 1422,
	7, 7, 2, 2, 1422, 1423, 5, 114, 58, 2, 1423, 1424, 7, 35, 2, 2, 1424, 1425,
	7, 5, 2, 2, 1425, 1426, 5, 62, 32, 2, 1426, 1427, 7, 6, 2, 2, 1427, 1429,
	3, 2, 2, 2, 1428, 1421, 3, 2, 2, 2, 1429, 1432, 3, 2, 2, 2, 1430, 1428,
	3, 2, 2, 2, 1430, 1431, 3, 2, 2, 2, 1431, 91, 3, 2, 2, 2, 1432, 1430, 3,
	2, 2, 2, 1433, 1434, 5, 134, 68, 2, 1434, 1435, 7, 4, 2, 2, 1435, 1437,
	3, 2, 2, 2, 1436, 1433, 3, 2, 2, 2, 1436, 1437, 3, 2, 2, 2, 1437, 1438,
	3, 2, 2, 2, 1438, 1444, 5, 136, 69, 2, 1439, 1440, 7, 87, 2, 2, 1440, 1441,
	7, 42, 2, 2, 1441, 1445, 5, 148, 75, 2, 1442, 1443, 7, 104, 2, 2, 1443,
	1445, 7, 87, 2, 2, 1444, 1439, 3, 2, 2, 2, 1444, 1442, 3, 2, 2, 2, 1444,
	1445, 3, 2, 2, 2, 1445, 93, 3, 2, 2, 2, 1446, 1449, 5, 80, 41, 2, 1447,
	1448, 7, 47, 2, 2, 1448, 1450, 5, 144, 73, 2, 1449, 1447, 3, 2, 2, 2, 1449,
	1450, 3, 2, 2, 2, 1450, 1452, 3, 2, 2, 2, 1451, 1453, 9, 7, 2, 2, 1452,
	1451, 3, 2, 2, 2, 1452, 1453, 3, 2, 2, 2, 1453, 95, 3, 2, 2, 2, 1454, 1458,
	5, 116, 59, 2, 1455, 1458, 5, 130, 66, 2, 1456, 1458, 7, 160, 2, 2, 1457,
	1454, 3, 2, 2, 2, 1457, 1455, 3, 2, 2, 2, 1457, 1456, 3, 2, 2, 2, 1458,
	97, 3, 2, 2, 2, 1459, 1471, 5, 136, 69, 2, 1460, 1461, 7, 5, 2, 2, 1461,
	1466, 5, 142, 72, 2, 1462, 1463, 7, 7, 2, 2, 1463, 1465, 5, 142, 72, 2,
	1464, 1462, 3, 2, 2, 2, 1465, 1468, 3, 2, 2, 2, 1466, 1464, 3, 2, 2, 2,
	1466, 1467, 3, 2, 2, 2, 1467, 1469, 3, 2, 2, 2, 1468, 1466, 3, 2, 2, 2,
	1469, 1470, 7, 6, 2, 2, 1470, 1472, 3, 2, 2, 2, 1471, 1460, 3, 2, 2, 2,
	1471, 1472, 3, 2, 2, 2, 1472, 1473, 3, 2, 2, 2, 1473, 1474, 7, 35, 2, 2,
	1474, 1475, 7, 5, 2, 2, 1475, 1476, 5, 62, 32, 2, 1476, 1477, 7, 6, 2,
	2, 1477, 99, 3, 2, 2, 2, 1478, 1491, 7, 9, 2, 2, 1479, 1480, 5, 136, 69,
	2, 1480, 1481, 7, 4, 2, 2, 1481, 1482, 7, 9, 2, 2, 1482, 1491, 3, 2, 2,
	2, 1483, 1488, 5, 80, 41, 2, 1484, 1486, 7, 35, 2, 2, 1485, 1484, 3, 2,
	2, 2, 1485, 1486, 3, 2, 2, 2, 1486, 1487, 3, 2, 2, 2, 1487, 1489, 5, 126,
	64, 2, 1488, 1485, 3, 2, 2, 2, 1488, 1489, 3, 2, 2, 2, 1489, 1491, 3, 2,
	2, 2, 1490, 1478, 3, 2, 2, 2, 1490, 1479, 3, 2, 2, 2, 1490, 1483, 3, 2,
	2, 2, 1491, 101, 3, 2, 2, 2, 1492, 1493, 5, 134, 68, 2, 1493, 1494, 7,
	4, 2, 2, 1494, 1496, 3, 2, 2, 2, 1495, 1492, 3, 2, 2, 2, 1495, 1496, 3,
	2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 1502, 5, 136, 69, 2, 1498, 1500,
	7, 35, 2, 2, 1499, 1498, 3, 2, 2, 2, 1499, 1500, 3, 2, 2, 2, 1500, 1501,
	3, 2, 2, 2, 1501, 1503, 5, 160, 81, 2, 1502, 1499, 3, 2, 2, 2, 1502, 1503,
	3, 2, 2, 2, 1503, 1509, 3, 2, 2, 2, 1504, 1505, 7, 87, 2, 2, 1505, 1506,
	7, 42, 2, 2, 1506, 1510, 5, 148, 75, 2, 1507, 1508, 7, 104, 2, 2, 1508,
	1510, 7, 87, 2, 2, 1509, 1504, 3, 2, 2, 2, 1509, 1507, 3, 2, 2, 2, 1509,
	1510, 3, 2, 2, 2, 1510, 1540, 3, 2, 2, 2, 1511, 1521, 7, 5, 2, 2, 1512,
	1517, 5, 102, 52, 2, 1513, 1514, 7, 7, 2, 2, 1514, 1516, 5, 102, 52, 2,
	1515, 1513, 3, 2, 2, 2, 1516, 1519, 3, 2, 2, 2, 1517, 1515, 3, 2, 2, 2,
	1517, 1518, 3, 2, 2, 2, 1518, 1522, 3, 2, 2, 2, 1519, 1517, 3, 2, 2, 2,
	1520, 1522, 5, 104, 53, 2, 1521, 1512, 3, 2, 2, 2, 1521, 1520, 3, 2, 2,
	2, 1522, 1523, 3, 2, 2, 2, 1523, 1528, 7, 6, 2, 2, 1524, 1526, 7, 35, 2,
	2, 1525, 1524, 3, 2, 2, 2, 1525, 1526, 3, 2, 2, 2, 1526, 1527, 3, 2, 2,
	2, 1527, 1529, 5, 160, 81, 2, 1528, 1525, 3, 2, 2, 2, 1528, 1529, 3, 2,
	2, 2, 1529, 1540, 3, 2, 2, 2, 1530, 1531, 7, 5, 2, 2, 1531, 1532, 5, 62,
	32, 2, 1532, 1537, 7, 6, 2, 2, 1533, 1535, 7, 35, 2, 2, 1534, 1533, 3,
	2, 2, 2, 1534, 1535, 3, 2, 2, 2, 1535, 1536, 3, 2, 2, 2, 1536, 1538, 5,
	160, 81, 2, 1537, 1534, 3, 2, 2, 2, 1537, 1538, 3, 2, 2, 2, 1538, 1540,
	3, 2, 2, 2, 1539, 1495, 3, 2, 2, 2, 1539, 1511, 3, 2, 2, 2, 1539, 1530,
	3, 2, 2, 2, 1540, 103, 3, 2, 2, 2, 1541, 1548, 5, 102, 52, 2, 1542, 1543,
	5, 106, 54, 2, 1543, 1544, 5, 102, 52, 2, 1544, 1545, 5, 108, 55, 2, 1545,
	1547, 3, 2, 2, 2, 1546, 1542, 3, 2, 2, 2, 1547, 1550, 3, 2, 2, 2, 1548,
	1546, 3, 2, 2, 2, 1548, 1549, 3, 2, 2, 2, 1549, 105, 3, 2, 2, 2, 1550,
	1548, 3, 2, 2, 2, 1551, 1565, 7, 7, 2, 2, 1552, 1554, 7, 102, 2, 2, 1553,
	1552, 3, 2, 2, 2, 1553, 1554, 3, 2, 2, 2, 1554, 1561, 3, 2, 2, 2, 1555,
	1557, 7, 98, 2, 2, 1556, 1558, 7, 112, 2, 2, 1557, 1556, 3, 2, 2, 2, 1557,
	1558, 3, 2, 2, 2, 1558, 1562, 3, 2, 2, 2, 1559, 1562, 7, 89, 2, 2, 1560,
	1562, 7, 53, 2, 2, 1561, 1555, 3, 2, 2, 2, 1561, 1559, 3, 2, 2, 2, 1561,
	1560, 3, 2, 2, 2, 1561, 1562, 3, 2, 2, 2, 1562, 1563, 3, 2, 2, 2, 1563,
	1565, 7, 96, 2, 2, 1564, 1551, 3, 2, 2, 2, 1564, 1553, 3, 2, 2, 2, 1565,
	107, 3, 2, 2, 2, 1566, 1567, 7, 109, 2, 2, 1567, 1581, 5, 80, 41, 2, 1568,
	1569, 7, 142, 2, 2, 1569, 1570, 7, 5, 2, 2, 1570, 1575, 5, 142, 72, 2,
	1571, 1572, 7, 7, 2, 2, 1572, 1574, 5, 142, 72, 2, 1573, 1571, 3, 2, 2,
	2, 1574, 1577, 3, 2, 2, 2, 1575, 1573, 3, 2, 2, 2, 1575, 1576, 3, 2, 2,
	2, 1576, 1578, 3, 2, 2, 2, 1577, 1575, 3, 2, 2, 2, 1578, 1579, 7, 6, 2,
	2, 1579, 1581, 3, 2, 2, 2, 1580, 1566, 3, 2, 2, 2, 1580, 1568, 3, 2, 2,
	2, 1580, 1581, 3, 2, 2, 2, 1581, 109, 3, 2, 2, 2, 1582, 1584, 7, 130, 2,
	2, 1583, 1585, 9, 6, 2, 2, 1584, 1583, 3, 2, 2, 2, 1584, 1585, 3, 2, 2,
	2, 1585, 1586, 3, 2, 2, 2, 1586, 1591, 5, 100, 51, 2, 1587, 1588, 7, 7,
	2, 2, 1588, 1590, 5, 100, 51, 2, 1589, 1587, 3, 2, 2, 2, 1590, 1593, 3,
	2, 2, 2, 1591, 1589, 3, 2, 2, 2, 1591, 1592, 3, 2, 2, 2, 1592, 1606, 3,
	2, 2, 2, 1593, 1591, 3, 2, 2, 2, 1594, 1604, 7, 77, 2, 2, 1595, 1600, 5,
	102, 52, 2, 1596, 1597, 7, 7, 2, 2, 1597, 1599, 5, 102, 52, 2, 1598, 1596,
	3, 2, 2, 2, 1599, 1602, 3, 2, 2, 2, 1600, 1598, 3, 2, 2, 2, 1600, 1601,
	3, 2, 2, 2, 1601, 1605, 3, 2, 2, 2, 1602, 1600, 3, 2, 2, 2, 1603, 1605,
	5, 104, 53, 2, 1604, 1595, 3, 2, 2, 2, 1604, 1603, 3, 2, 2, 2, 1605, 1607,
	3, 2, 2, 2, 1606, 1594, 3, 2, 2, 2, 1606, 1607, 3, 2, 2, 2, 1607, 1610,
	3, 2, 2, 2, 1608, 1609, 7, 148, 2, 2, 1609, 1611, 5, 80, 41, 2, 1610, 1608,
	3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611, 1626, 3, 2, 2, 2, 1612, 1613,
	7, 80, 2, 2, 1613, 1614, 7, 42, 2, 2, 1614, 1619, 5, 80, 41, 2, 1615, 1616,
	7, 7, 2, 2, 1616, 1618, 5, 80, 41, 2, 1617, 1615, 3, 2, 2, 2, 1618, 1621,
	3, 2, 2, 2, 1619, 1617, 3, 2, 2, 2, 1619, 1620, 3, 2, 2, 2, 1620, 1624,
	3, 2, 2, 2, 1621, 1619, 3, 2, 2, 2, 1622, 1623, 7, 81, 2, 2, 1623, 1625,
	5, 80, 41, 2, 1624, 1622, 3, 2, 2, 2, 1624, 1625, 3, 2, 2, 2, 1625, 1627,
	3, 2, 2, 2, 1626, 1612, 3, 2, 2, 2, 1626, 1627, 3, 2, 2, 2, 1627, 1657,
	3, 2, 2, 2, 1628, 1629, 7, 144, 2, 2, 1629, 1630, 7, 5, 2, 2, 1630, 1635,
	5, 80, 41, 2, 1631, 1632, 7, 7, 2, 2, 1632, 1634, 5, 80, 41, 2, 1633, 1631,
	3, 2, 2, 2, 1634, 1637, 3, 2, 2, 2, 1635, 1633, 3, 2, 2, 2, 1635, 1636,
	3, 2, 2, 2, 1636, 1638, 3, 2, 2, 2, 1637, 1635, 3, 2, 2, 2, 1638, 1653,
	7, 6, 2, 2, 1639, 1640, 7, 7, 2, 2, 1640, 1641, 7, 5, 2, 2, 1641, 1646,
	5, 80, 41, 2, 1642, 1643, 7, 7, 2, 2, 1643, 1645, 5, 80, 41, 2, 1644, 1642,
	3, 2, 2, 2, 1645, 1648, 3, 2, 2, 2, 1646, 1644, 3, 2, 2, 2, 1646, 1647,
	3, 2, 2, 2, 1647, 1649, 3, 2, 2, 2, 1648, 1646, 3, 2, 2, 2, 1649, 1650,
	7, 6, 2, 2, 1650, 1652, 3, 2, 2, 2, 1651, 1639, 3, 2, 2, 2, 1652, 1655,
	3, 2, 2, 2, 1653, 1651, 3, 2, 2, 2, 1653, 1654, 3, 2, 2, 2, 1654, 1657,
	3, 2, 2, 2, 1655, 1653, 3, 2, 2, 2, 1656, 1582, 3, 2, 2, 2, 1656, 1628,
	3, 2, 2, 2, 1657, 111, 3, 2, 2, 2, 1658, 1664, 7, 139, 2, 2, 1659, 1660,
	7, 139, 2, 2, 1660, 1664, 7, 31, 2, 2, 1661, 1664, 7, 92, 2, 2, 1662, 1664,
	7, 70, 2, 2, 1663, 1658, 3, 2, 2, 2, 1663, 1659, 3, 2, 2, 2, 1663, 1661,
	3, 2, 2, 2, 1663, 1662, 3, 2, 2, 2, 1664, 113, 3, 2, 2, 2, 1665, 1677,
	5, 136, 69, 2, 1666, 1667, 7, 5, 2, 2, 1667, 1672, 5, 142, 72, 2, 1668,
	1669, 7, 7, 2, 2, 1669, 1671, 5, 142, 72, 2, 1670, 1668, 3, 2, 2, 2, 1671,
	1674, 3, 2, 2, 2, 1672, 1670, 3, 2, 2, 2, 1672, 1673, 3, 2, 2, 2, 1673,
	1675, 3, 2, 2, 2, 1674, 1672, 3, 2, 2, 2, 1675, 1676, 7, 6, 2, 2, 1676,
	1678, 3, 2, 2, 2, 1677, 1666, 3, 2, 2, 2, 1677, 1678, 3, 2, 2, 2, 1678,
	115, 3, 2, 2, 2, 1679, 1681, 9, 10, 2, 2, 1680, 1679, 3, 2, 2, 2, 1680,
	1681, 3, 2, 2, 2, 1681, 1682, 3, 2, 2, 2, 1682, 1683, 7, 158, 2, 2, 1683,
	117, 3, 2, 2, 2, 1684, 1685, 9, 16, 2, 2, 1685, 119, 3, 2, 2, 2, 1686,
	1687, 9, 17, 2, 2, 1687, 121, 3, 2, 2, 2, 1688, 1689, 7, 160, 2, 2, 1689,
	123, 3, 2, 2, 2, 1690, 1693, 5, 80, 41, 2, 1691, 1693, 5, 72, 37, 2, 1692,
	1690, 3, 2, 2, 2, 1692, 1691, 3, 2, 2, 2, 1693, 125, 3, 2, 2, 2, 1694,
	1695, 9, 18, 2, 2, 1695, 127, 3, 2, 2, 2, 1696, 1697, 9, 19, 2, 2, 1697,
	129, 3, 2, 2, 2, 1698, 1699, 5, 164, 83, 2, 1699, 131, 3, 2, 2, 2, 1700,
	1701, 5, 164, 83, 2, 1701, 133, 3, 2, 2, 2, 1702, 1703, 5, 164, 83, 2,
	1703, 135, 3, 2, 2, 2, 1704, 1705, 5, 164, 83, 2, 1705, 137, 3, 2, 2, 2,
	1706, 1707, 5, 164, 83, 2, 1707, 139, 3, 2, 2, 2, 1708, 1709, 5, 164, 83,
	2, 1709, 141, 3, 2, 2, 2, 1710, 1711, 5, 164, 83, 2, 1711, 143, 3, 2, 2,
	2, 1712, 1713, 5, 164, 83, 2, 1713, 145, 3, 2, 2, 2, 1714, 1715, 5, 164,
	83, 2, 1715, 147, 3, 2, 2, 2, 1716, 1717, 5, 164, 83, 2, 1717, 149, 3,
	2, 2, 2, 1718, 1719, 5, 164, 83, 2, 1719, 151, 3, 2, 2, 2, 1720, 1721,
	5, 164, 83, 2, 1721, 153, 3, 2, 2, 2, 1722, 1723, 5, 164, 83, 2, 1723,
	155, 3, 2, 2, 2, 1724, 1725, 5, 164, 83, 2, 1725, 157, 3, 2, 2, 2, 1726,
	1727, 5, 164, 83, 2, 1727, 159, 3, 2, 2, 2, 1728, 1729, 5, 164, 83, 2,
	1729, 161, 3, 2, 2, 2, 1730, 1731, 5, 164, 83, 2, 1731, 163, 3, 2, 2, 2,
	1732, 1740, 7, 157, 2, 2, 1733, 1740, 5, 128, 65, 2, 1734, 1740, 7, 160,
	2, 2, 1735, 1736, 7, 5, 2, 2, 1736, 1737, 5, 164, 83, 2, 1737, 1738, 7,
	6, 2, 2, 1738, 1740, 3, 2, 2, 2, 1739, 1732, 3, 2, 2, 2, 1739, 1733, 3,
	2, 2, 2, 1739, 1734, 3, 2, 2, 2, 1739, 1735, 3, 2, 2, 2, 1740, 165, 3,
	2, 2, 2, 247, 168, 170, 181, 188, 193, 199, 205, 207, 239, 246, 254, 257,
	266, 270, 278, 282, 284, 289, 291, 295, 302, 305, 310, 314, 319, 328, 331,
	337, 339, 343, 349, 354, 365, 371, 375, 381, 386, 395, 402, 408, 412, 416,
	422, 427, 434, 445, 448, 450, 456, 462, 466, 473, 479, 485, 491, 496, 508,
	513, 524, 529, 532, 539, 542, 549, 558, 561, 567, 569, 573, 581, 586, 594,
	599, 607, 612, 620, 625, 631, 638, 641, 649, 659, 662, 668, 670, 673, 692,
	698, 707, 712, 721, 732, 739, 745, 751, 760, 767, 771, 773, 777, 784, 786,
	790, 793, 800, 807, 810, 820, 823, 829, 831, 835, 842, 845, 853, 863, 866,
	872, 874, 878, 885, 894, 898, 900, 904, 913, 918, 920, 929, 940, 947, 950,
	953, 966, 980, 985, 988, 1001, 1015, 1020, 1029, 1032, 1038, 1040, 1046,
	1051, 1057, 1069, 1077, 1081, 1086, 1090, 1093, 1111, 1116, 1121, 1129,
	1134, 1143, 1150, 1154, 1170, 1173, 1181, 1190, 1194, 1199, 1229, 1241,
	1246, 1258, 1264, 1271, 1275, 1285, 1288, 1294, 1297, 1299, 1301, 1312,
	1317, 1329, 1333, 1337, 1341, 1348, 1350, 1358, 1365, 1368, 1372, 1377,
	1385, 1404, 1410, 1414, 1430, 1436, 1444, 1449, 1452, 1457, 1466, 1471,
	1485, 1488, 1490, 1495, 1499, 1502, 1509, 1517, 1521, 1525, 1528, 1534,
	1537, 1539, 1548, 1553, 1557, 1561, 1564, 1575, 1580, 1584, 1591, 1600,
	1604, 1606, 1610, 1619, 1624, 1626, 1635, 1646, 1653, 1656, 1663, 1672,
	1677, 1680, 1692, 1739,
}

var deserializer = antlr.NewATNDeserializer(nil)

var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'",
	"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'",
	"'>='", "'=='", "'!='", "'<>'",
}

var symbolicNames = []string{
	"", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR",
	"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE",
	"LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", "K_ACTION",
	"K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC",
	"K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", "K_BY",
	"K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT",
	"K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE",
	"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", "K_DEFAULT", "K_DEFERRABLE",
	"K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP",
	"K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS",
	"K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", "K_GLOB",
	"K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX",
	"K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", "K_INTERSECT",
	"K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT",
	"K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF",
	"K_OFFSET", "K_ON", "K_OR", "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA",
	"K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP",
	"K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT",
	"K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", "K_SET", "K_TABLE", "K_TEMP",
	"K_TEMPORARY", "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION",
	"K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL",
	"K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", "K_TEXT", "K_INT", "K_INTEGER",
	"K_CHAR", "K_REAL", "K_BLOB", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER",
	"STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT",
	"SPACES", "UNEXPECTED_CHAR",
}

var ruleNames = []string{
	"parse", "sql_error", "sql_stmt_list", "sql_stmt", "alter_table_stmt",
	"analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt",
	"create_index_stmt", "create_table_stmt", "create_trigger_stmt", "create_view_stmt",
	"create_virtual_table_stmt", "delete_stmt", "delete_stmt_limited", "detach_stmt",
	"drop_index_stmt", "drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt",
	"factored_select_stmt", "insert_stmt", "pragma_stmt", "reindex_stmt", "release_stmt",
	"rollback_stmt", "savepoint_stmt", "simple_select_stmt", "select_stmt",
	"select_or_values", "update_stmt", "update_stmt_limited", "vacuum_stmt",
	"column_def", "type_name", "column_constraint", "conflict_clause", "expr",
	"foreign_key_clause", "raise_function", "indexed_column", "table_constraint",
	"with_clause", "qualified_table_name", "ordering_term", "pragma_value",
	"common_table_expression", "result_column", "table_or_subquery", "join_clause",
	"join_operator", "join_constraint", "select_core", "compound_operator",
	"cte_table_name", "signed_number", "literal_value", "unary_operator", "error_message",
	"module_argument", "column_alias", "keyword", "name", "function_name",
	"database_name", "table_name", "table_or_index_name", "new_table_name",
	"column_name", "collation_name", "foreign_table", "index_name", "trigger_name",
	"view_name", "module_name", "pragma_name", "savepoint_name", "table_alias",
	"transaction_name", "any_name",
}

type SQLiteParser struct {
	*antlr.BaseParser
}

func NewSQLiteParser(input antlr.TokenStream) *SQLiteParser {
	var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	var sharedContextCache = antlr.NewPredictionContextCache()

	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}

	this := new(SQLiteParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, sharedContextCache)
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SQLite.g4"

	return this
}

// SQLiteParser tokens.
const (
	SQLiteParserEOF                 = antlr.TokenEOF
	SQLiteParserSCOL                = 1
	SQLiteParserDOT                 = 2
	SQLiteParserOPEN_PAR            = 3
	SQLiteParserCLOSE_PAR           = 4
	SQLiteParserCOMMA               = 5
	SQLiteParserASSIGN              = 6
	SQLiteParserSTAR                = 7
	SQLiteParserPLUS                = 8
	SQLiteParserMINUS               = 9
	SQLiteParserTILDE               = 10
	SQLiteParserPIPE2               = 11
	SQLiteParserDIV                 = 12
	SQLiteParserMOD                 = 13
	SQLiteParserLT2                 = 14
	SQLiteParserGT2                 = 15
	SQLiteParserAMP                 = 16
	SQLiteParserPIPE                = 17
	SQLiteParserLT                  = 18
	SQLiteParserLT_EQ               = 19
	SQLiteParserGT                  = 20
	SQLiteParserGT_EQ               = 21
	SQLiteParserEQ                  = 22
	SQLiteParserNOT_EQ1             = 23
	SQLiteParserNOT_EQ2             = 24
	SQLiteParserK_ABORT             = 25
	SQLiteParserK_ACTION            = 26
	SQLiteParserK_ADD               = 27
	SQLiteParserK_AFTER             = 28
	SQLiteParserK_ALL               = 29
	SQLiteParserK_ALTER             = 30
	SQLiteParserK_ANALYZE           = 31
	SQLiteParserK_AND               = 32
	SQLiteParserK_AS                = 33
	SQLiteParserK_ASC               = 34
	SQLiteParserK_ATTACH            = 35
	SQLiteParserK_AUTOINCREMENT     = 36
	SQLiteParserK_BEFORE            = 37
	SQLiteParserK_BEGIN             = 38
	SQLiteParserK_BETWEEN           = 39
	SQLiteParserK_BY                = 40
	SQLiteParserK_CASCADE           = 41
	SQLiteParserK_CASE              = 42
	SQLiteParserK_CAST              = 43
	SQLiteParserK_CHECK             = 44
	SQLiteParserK_COLLATE           = 45
	SQLiteParserK_COLUMN            = 46
	SQLiteParserK_COMMIT            = 47
	SQLiteParserK_CONFLICT          = 48
	SQLiteParserK_CONSTRAINT        = 49
	SQLiteParserK_CREATE            = 50
	SQLiteParserK_CROSS             = 51
	SQLiteParserK_CURRENT_DATE      = 52
	SQLiteParserK_CURRENT_TIME      = 53
	SQLiteParserK_CURRENT_TIMESTAMP = 54
	SQLiteParserK_DATABASE          = 55
	SQLiteParserK_DEFAULT           = 56
	SQLiteParserK_DEFERRABLE        = 57
	SQLiteParserK_DEFERRED          = 58
	SQLiteParserK_DELETE            = 59
	SQLiteParserK_DESC              = 60
	SQLiteParserK_DETACH            = 61
	SQLiteParserK_DISTINCT          = 62
	SQLiteParserK_DROP              = 63
	SQLiteParserK_EACH              = 64
	SQLiteParserK_ELSE              = 65
	SQLiteParserK_END               = 66
	SQLiteParserK_ESCAPE            = 67
	SQLiteParserK_EXCEPT            = 68
	SQLiteParserK_EXCLUSIVE         = 69
	SQLiteParserK_EXISTS            = 70
	SQLiteParserK_EXPLAIN           = 71
	SQLiteParserK_FAIL              = 72
	SQLiteParserK_FOR               = 73
	SQLiteParserK_FOREIGN           = 74
	SQLiteParserK_FROM              = 75
	SQLiteParserK_FULL              = 76
	SQLiteParserK_GLOB              = 77
	SQLiteParserK_GROUP             = 78
	SQLiteParserK_HAVING            = 79
	SQLiteParserK_IF                = 80
	SQLiteParserK_IGNORE            = 81
	SQLiteParserK_IMMEDIATE         = 82
	SQLiteParserK_IN                = 83
	SQLiteParserK_INDEX             = 84
	SQLiteParserK_INDEXED           = 85
	SQLiteParserK_INITIALLY         = 86
	SQLiteParserK_INNER             = 87
	SQLiteParserK_INSERT            = 88
	SQLiteParserK_INSTEAD           = 89
	SQLiteParserK_INTERSECT         = 90
	SQLiteParserK_INTO              = 91
	SQLiteParserK_IS                = 92
	SQLiteParserK_ISNULL            = 93
	SQLiteParserK_JOIN              = 94
	SQLiteParserK_KEY               = 95
	SQLiteParserK_LEFT              = 96
	SQLiteParserK_LIKE              = 97
	SQLiteParserK_LIMIT             = 98
	SQLiteParserK_MATCH             = 99
	SQLiteParserK_NATURAL           = 100
	SQLiteParserK_NO                = 101
	SQLiteParserK_NOT               = 102
	SQLiteParserK_NOTNULL           = 103
	SQLiteParserK_NULL              = 104
	SQLiteParserK_OF                = 105
	SQLiteParserK_OFFSET            = 106
	SQLiteParserK_ON                = 107
	SQLiteParserK_OR                = 108
	SQLiteParserK_ORDER             = 109
	SQLiteParserK_OUTER             = 110
	SQLiteParserK_PLAN              = 111
	SQLiteParserK_PRAGMA            = 112
	SQLiteParserK_PRIMARY           = 113
	SQLiteParserK_QUERY             = 114
	SQLiteParserK_RAISE             = 115
	SQLiteParserK_RECURSIVE         = 116
	SQLiteParserK_REFERENCES        = 117
	SQLiteParserK_REGEXP            = 118
	SQLiteParserK_REINDEX           = 119
	SQLiteParserK_RELEASE           = 120
	SQLiteParserK_RENAME            = 121
	SQLiteParserK_REPLACE           = 122
	SQLiteParserK_RESTRICT          = 123
	SQLiteParserK_RIGHT             = 124
	SQLiteParserK_ROLLBACK          = 125
	SQLiteParserK_ROW               = 126
	SQLiteParserK_SAVEPOINT         = 127
	SQLiteParserK_SELECT            = 128
	SQLiteParserK_SET               = 129
	SQLiteParserK_TABLE             = 130
	SQLiteParserK_TEMP              = 131
	SQLiteParserK_TEMPORARY         = 132
	SQLiteParserK_THEN              = 133
	SQLiteParserK_TO                = 134
	SQLiteParserK_TRANSACTION       = 135
	SQLiteParserK_TRIGGER           = 136
	SQLiteParserK_UNION             = 137
	SQLiteParserK_UNIQUE            = 138
	SQLiteParserK_UPDATE            = 139
	SQLiteParserK_USING             = 140
	SQLiteParserK_VACUUM            = 141
	SQLiteParserK_VALUES            = 142
	SQLiteParserK_VIEW              = 143
	SQLiteParserK_VIRTUAL           = 144
	SQLiteParserK_WHEN              = 145
	SQLiteParserK_WHERE             = 146
	SQLiteParserK_WITH              = 147
	SQLiteParserK_WITHOUT           = 148
	SQLiteParserK_TEXT              = 149
	SQLiteParserK_INT               = 150
	SQLiteParserK_INTEGER           = 151
	SQLiteParserK_CHAR              = 152
	SQLiteParserK_REAL              = 153
	SQLiteParserK_BLOB              = 154
	SQLiteParserIDENTIFIER          = 155
	SQLiteParserNUMERIC_LITERAL     = 156
	SQLiteParserBIND_PARAMETER      = 157
	SQLiteParserSTRING_LITERAL      = 158
	SQLiteParserBLOB_LITERAL        = 159
	SQLiteParserSINGLE_LINE_COMMENT = 160
	SQLiteParserMULTILINE_COMMENT   = 161
	SQLiteParserSPACES              = 162
	SQLiteParserUNEXPECTED_CHAR     = 163
)

// SQLiteParser rules.
const (
	SQLiteParserRULE_parse                     = 0
	SQLiteParserRULE_sql_error                 = 1
	SQLiteParserRULE_sql_stmt_list             = 2
	SQLiteParserRULE_sql_stmt                  = 3
	SQLiteParserRULE_alter_table_stmt          = 4
	SQLiteParserRULE_analyze_stmt              = 5
	SQLiteParserRULE_attach_stmt               = 6
	SQLiteParserRULE_begin_stmt                = 7
	SQLiteParserRULE_commit_stmt               = 8
	SQLiteParserRULE_compound_select_stmt      = 9
	SQLiteParserRULE_create_index_stmt         = 10
	SQLiteParserRULE_create_table_stmt         = 11
	SQLiteParserRULE_create_trigger_stmt       = 12
	SQLiteParserRULE_create_view_stmt          = 13
	SQLiteParserRULE_create_virtual_table_stmt = 14
	SQLiteParserRULE_delete_stmt               = 15
	SQLiteParserRULE_delete_stmt_limited       = 16
	SQLiteParserRULE_detach_stmt               = 17
	SQLiteParserRULE_drop_index_stmt           = 18
	SQLiteParserRULE_drop_table_stmt           = 19
	SQLiteParserRULE_drop_trigger_stmt         = 20
	SQLiteParserRULE_drop_view_stmt            = 21
	SQLiteParserRULE_factored_select_stmt      = 22
	SQLiteParserRULE_insert_stmt               = 23
	SQLiteParserRULE_pragma_stmt               = 24
	SQLiteParserRULE_reindex_stmt              = 25
	SQLiteParserRULE_release_stmt              = 26
	SQLiteParserRULE_rollback_stmt             = 27
	SQLiteParserRULE_savepoint_stmt            = 28
	SQLiteParserRULE_simple_select_stmt        = 29
	SQLiteParserRULE_select_stmt               = 30
	SQLiteParserRULE_select_or_values          = 31
	SQLiteParserRULE_update_stmt               = 32
	SQLiteParserRULE_update_stmt_limited       = 33
	SQLiteParserRULE_vacuum_stmt               = 34
	SQLiteParserRULE_column_def                = 35
	SQLiteParserRULE_type_name                 = 36
	SQLiteParserRULE_column_constraint         = 37
	SQLiteParserRULE_conflict_clause           = 38
	SQLiteParserRULE_expr                      = 39
	SQLiteParserRULE_foreign_key_clause        = 40
	SQLiteParserRULE_raise_function            = 41
	SQLiteParserRULE_indexed_column            = 42
	SQLiteParserRULE_table_constraint          = 43
	SQLiteParserRULE_with_clause               = 44
	SQLiteParserRULE_qualified_table_name      = 45
	SQLiteParserRULE_ordering_term             = 46
	SQLiteParserRULE_pragma_value              = 47
	SQLiteParserRULE_common_table_expression   = 48
	SQLiteParserRULE_result_column             = 49
	SQLiteParserRULE_table_or_subquery         = 50
	SQLiteParserRULE_join_clause               = 51
	SQLiteParserRULE_join_operator             = 52
	SQLiteParserRULE_join_constraint           = 53
	SQLiteParserRULE_select_core               = 54
	SQLiteParserRULE_compound_operator         = 55
	SQLiteParserRULE_cte_table_name            = 56
	SQLiteParserRULE_signed_number             = 57
	SQLiteParserRULE_literal_value             = 58
	SQLiteParserRULE_unary_operator            = 59
	SQLiteParserRULE_error_message             = 60
	SQLiteParserRULE_module_argument           = 61
	SQLiteParserRULE_column_alias              = 62
	SQLiteParserRULE_keyword                   = 63
	SQLiteParserRULE_name                      = 64
	SQLiteParserRULE_function_name             = 65
	SQLiteParserRULE_database_name             = 66
	SQLiteParserRULE_table_name                = 67
	SQLiteParserRULE_table_or_index_name       = 68
	SQLiteParserRULE_new_table_name            = 69
	SQLiteParserRULE_column_name               = 70
	SQLiteParserRULE_collation_name            = 71
	SQLiteParserRULE_foreign_table             = 72
	SQLiteParserRULE_index_name                = 73
	SQLiteParserRULE_trigger_name              = 74
	SQLiteParserRULE_view_name                 = 75
	SQLiteParserRULE_module_name               = 76
	SQLiteParserRULE_pragma_name               = 77
	SQLiteParserRULE_savepoint_name            = 78
	SQLiteParserRULE_table_alias               = 79
	SQLiteParserRULE_transaction_name          = 80
	SQLiteParserRULE_any_name                  = 81
)

// IParseContext is an interface to support dynamic dispatch.
type IParseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParseContext differentiates from other interfaces.
	IsParseContext()
}

type ParseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParseContext() *ParseContext {
	var p = new(ParseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_parse
	return p
}

func (*ParseContext) IsParseContext() {}

func NewParseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParseContext {
	var p = new(ParseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_parse

	return p
}

func (s *ParseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParseContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEOF, 0)
}

func (s *ParseContext) AllSql_stmt_list() []ISql_stmt_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_stmt_listContext)(nil)).Elem())
	var tst = make([]ISql_stmt_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_stmt_listContext)
		}
	}

	return tst
}

func (s *ParseContext) Sql_stmt_list(i int) ISql_stmt_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stmt_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_stmt_listContext)
}

func (s *ParseContext) AllSql_error() []ISql_errorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_errorContext)(nil)).Elem())
	var tst = make([]ISql_errorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_errorContext)
		}
	}

	return tst
}

func (s *ParseContext) Sql_error(i int) ISql_errorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_errorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_errorContext)
}

func (s *ParseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterParse(s)
	}
}

func (s *ParseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitParse(s)
	}
}

func (p *SQLiteParser) Parse() (localctx IParseContext) {
	localctx = NewParseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SQLiteParserRULE_parse)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserSCOL)|(1<<SQLiteParserK_ALTER)|(1<<SQLiteParserK_ANALYZE))) != 0) || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(SQLiteParserK_ATTACH-35))|(1<<(SQLiteParserK_BEGIN-35))|(1<<(SQLiteParserK_COMMIT-35))|(1<<(SQLiteParserK_CREATE-35))|(1<<(SQLiteParserK_DELETE-35))|(1<<(SQLiteParserK_DETACH-35))|(1<<(SQLiteParserK_DROP-35))|(1<<(SQLiteParserK_END-35)))) != 0) || _la == SQLiteParserK_EXPLAIN || _la == SQLiteParserK_INSERT || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(SQLiteParserK_PRAGMA-112))|(1<<(SQLiteParserK_REINDEX-112))|(1<<(SQLiteParserK_RELEASE-112))|(1<<(SQLiteParserK_REPLACE-112))|(1<<(SQLiteParserK_ROLLBACK-112))|(1<<(SQLiteParserK_SAVEPOINT-112))|(1<<(SQLiteParserK_SELECT-112))|(1<<(SQLiteParserK_UPDATE-112))|(1<<(SQLiteParserK_VACUUM-112))|(1<<(SQLiteParserK_VALUES-112)))) != 0) || _la == SQLiteParserK_WITH || _la == SQLiteParserUNEXPECTED_CHAR {
		p.SetState(166)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserSCOL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXPLAIN, SQLiteParserK_INSERT, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WITH:
			{
				p.SetState(164)
				p.Sql_stmt_list()
			}

		case SQLiteParserUNEXPECTED_CHAR:
			{
				p.SetState(165)
				p.Sql_error()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(170)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(171)
		p.Match(SQLiteParserEOF)
	}

	return localctx
}

// ISql_errorContext is an interface to support dynamic dispatch.
type ISql_errorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_UNEXPECTED_CHAR returns the _UNEXPECTED_CHAR token.
	Get_UNEXPECTED_CHAR() antlr.Token

	// Set_UNEXPECTED_CHAR sets the _UNEXPECTED_CHAR token.
	Set_UNEXPECTED_CHAR(antlr.Token)

	// IsSql_errorContext differentiates from other interfaces.
	IsSql_errorContext()
}

type Sql_errorContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_UNEXPECTED_CHAR antlr.Token
}

func NewEmptySql_errorContext() *Sql_errorContext {
	var p = new(Sql_errorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_error
	return p
}

func (*Sql_errorContext) IsSql_errorContext() {}

func NewSql_errorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_errorContext {
	var p = new(Sql_errorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_error

	return p
}

func (s *Sql_errorContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_errorContext) Get_UNEXPECTED_CHAR() antlr.Token { return s._UNEXPECTED_CHAR }

func (s *Sql_errorContext) Set_UNEXPECTED_CHAR(v antlr.Token) { s._UNEXPECTED_CHAR = v }

func (s *Sql_errorContext) UNEXPECTED_CHAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNEXPECTED_CHAR, 0)
}

func (s *Sql_errorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_errorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_errorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSql_error(s)
	}
}

func (s *Sql_errorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSql_error(s)
	}
}

func (p *SQLiteParser) Sql_error() (localctx ISql_errorContext) {
	localctx = NewSql_errorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SQLiteParserRULE_sql_error)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(173)

		var _m = p.Match(SQLiteParserUNEXPECTED_CHAR)

		localctx.(*Sql_errorContext)._UNEXPECTED_CHAR = _m
	}

	fmt.Errorf("UNEXPECTED_CHAR=%s", (func() string {
		if localctx.(*Sql_errorContext).Get_UNEXPECTED_CHAR() == nil {
			return ""
		} else {
			return localctx.(*Sql_errorContext).Get_UNEXPECTED_CHAR().GetText()
		}
	}()))

	return localctx
}

// ISql_stmt_listContext is an interface to support dynamic dispatch.
type ISql_stmt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stmt_listContext differentiates from other interfaces.
	IsSql_stmt_listContext()
}

type Sql_stmt_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmt_listContext() *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list
	return p
}

func (*Sql_stmt_listContext) IsSql_stmt_listContext() {}

func NewSql_stmt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list

	return p
}

func (s *Sql_stmt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmt_listContext) AllSql_stmt() []ISql_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_stmtContext)(nil)).Elem())
	var tst = make([]ISql_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_stmtContext)
		}
	}

	return tst
}

func (s *Sql_stmt_listContext) Sql_stmt(i int) ISql_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_stmtContext)
}

func (s *Sql_stmt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSql_stmt_list(s)
	}
}

func (p *SQLiteParser) Sql_stmt_list() (localctx ISql_stmt_listContext) {
	localctx = NewSql_stmt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SQLiteParserRULE_sql_stmt_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(179)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserSCOL {
		{
			p.SetState(176)
			p.Match(SQLiteParserSCOL)
		}

		p.SetState(181)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(182)
		p.Sql_stmt()
	}
	p.SetState(191)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(184)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == SQLiteParserSCOL {
				{
					p.SetState(183)
					p.Match(SQLiteParserSCOL)
				}

				p.SetState(186)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(188)
				p.Sql_stmt()
			}

		}
		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}
	p.SetState(197)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(194)
				p.Match(SQLiteParserSCOL)
			}

		}
		p.SetState(199)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_stmtContext is an interface to support dynamic dispatch.
type ISql_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stmtContext differentiates from other interfaces.
	IsSql_stmtContext()
}

type Sql_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmtContext() *Sql_stmtContext {
	var p = new(Sql_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt
	return p
}

func (*Sql_stmtContext) IsSql_stmtContext() {}

func NewSql_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmtContext {
	var p = new(Sql_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt

	return p
}

func (s *Sql_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmtContext) Alter_table_stmt() IAlter_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_table_stmtContext)
}

func (s *Sql_stmtContext) Analyze_stmt() IAnalyze_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyze_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyze_stmtContext)
}

func (s *Sql_stmtContext) Attach_stmt() IAttach_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttach_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttach_stmtContext)
}

func (s *Sql_stmtContext) Begin_stmt() IBegin_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBegin_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBegin_stmtContext)
}

func (s *Sql_stmtContext) Commit_stmt() ICommit_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommit_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommit_stmtContext)
}

func (s *Sql_stmtContext) Compound_select_stmt() ICompound_select_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_select_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompound_select_stmtContext)
}

func (s *Sql_stmtContext) Create_index_stmt() ICreate_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_index_stmtContext)
}

func (s *Sql_stmtContext) Create_table_stmt() ICreate_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_stmtContext)
}

func (s *Sql_stmtContext) Create_trigger_stmt() ICreate_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_stmtContext)
}

func (s *Sql_stmtContext) Create_view_stmt() ICreate_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_view_stmtContext)
}

func (s *Sql_stmtContext) Create_virtual_table_stmt() ICreate_virtual_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_virtual_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_virtual_table_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt_limited() IDelete_stmt_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmt_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmt_limitedContext)
}

func (s *Sql_stmtContext) Detach_stmt() IDetach_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDetach_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDetach_stmtContext)
}

func (s *Sql_stmtContext) Drop_index_stmt() IDrop_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_index_stmtContext)
}

func (s *Sql_stmtContext) Drop_table_stmt() IDrop_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_table_stmtContext)
}

func (s *Sql_stmtContext) Drop_trigger_stmt() IDrop_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_trigger_stmtContext)
}

func (s *Sql_stmtContext) Drop_view_stmt() IDrop_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_view_stmtContext)
}

func (s *Sql_stmtContext) Factored_select_stmt() IFactored_select_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFactored_select_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFactored_select_stmtContext)
}

func (s *Sql_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Sql_stmtContext) Pragma_stmt() IPragma_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragma_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragma_stmtContext)
}

func (s *Sql_stmtContext) Reindex_stmt() IReindex_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReindex_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReindex_stmtContext)
}

func (s *Sql_stmtContext) Release_stmt() IRelease_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelease_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelease_stmtContext)
}

func (s *Sql_stmtContext) Rollback_stmt() IRollback_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_stmtContext)
}

func (s *Sql_stmtContext) Savepoint_stmt() ISavepoint_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_stmtContext)
}

func (s *Sql_stmtContext) Simple_select_stmt() ISimple_select_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_select_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_select_stmtContext)
}

func (s *Sql_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt_limited() IUpdate_stmt_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmt_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmt_limitedContext)
}

func (s *Sql_stmtContext) Vacuum_stmt() IVacuum_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVacuum_stmtContext)
}

func (s *Sql_stmtContext) K_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXPLAIN, 0)
}

func (s *Sql_stmtContext) K_QUERY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_QUERY, 0)
}

func (s *Sql_stmtContext) K_PLAN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PLAN, 0)
}

func (s *Sql_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSql_stmt(s)
	}
}

func (s *Sql_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSql_stmt(s)
	}
}

func (p *SQLiteParser) Sql_stmt() (localctx ISql_stmtContext) {
	localctx = NewSql_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SQLiteParserRULE_sql_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_EXPLAIN {
		{
			p.SetState(200)
			p.Match(SQLiteParserK_EXPLAIN)
		}
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_QUERY {
			{
				p.SetState(201)
				p.Match(SQLiteParserK_QUERY)
			}
			{
				p.SetState(202)
				p.Match(SQLiteParserK_PLAN)
			}

		}

	}
	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(207)
			p.Alter_table_stmt()
		}

	case 2:
		{
			p.SetState(208)
			p.Analyze_stmt()
		}

	case 3:
		{
			p.SetState(209)
			p.Attach_stmt()
		}

	case 4:
		{
			p.SetState(210)
			p.Begin_stmt()
		}

	case 5:
		{
			p.SetState(211)
			p.Commit_stmt()
		}

	case 6:
		{
			p.SetState(212)
			p.Compound_select_stmt()
		}

	case 7:
		{
			p.SetState(213)
			p.Create_index_stmt()
		}

	case 8:
		{
			p.SetState(214)
			p.Create_table_stmt()
		}

	case 9:
		{
			p.SetState(215)
			p.Create_trigger_stmt()
		}

	case 10:
		{
			p.SetState(216)
			p.Create_view_stmt()
		}

	case 11:
		{
			p.SetState(217)
			p.Create_virtual_table_stmt()
		}

	case 12:
		{
			p.SetState(218)
			p.Delete_stmt()
		}

	case 13:
		{
			p.SetState(219)
			p.Delete_stmt_limited()
		}

	case 14:
		{
			p.SetState(220)
			p.Detach_stmt()
		}

	case 15:
		{
			p.SetState(221)
			p.Drop_index_stmt()
		}

	case 16:
		{
			p.SetState(222)
			p.Drop_table_stmt()
		}

	case 17:
		{
			p.SetState(223)
			p.Drop_trigger_stmt()
		}

	case 18:
		{
			p.SetState(224)
			p.Drop_view_stmt()
		}

	case 19:
		{
			p.SetState(225)
			p.Factored_select_stmt()
		}

	case 20:
		{
			p.SetState(226)
			p.Insert_stmt()
		}

	case 21:
		{
			p.SetState(227)
			p.Pragma_stmt()
		}

	case 22:
		{
			p.SetState(228)
			p.Reindex_stmt()
		}

	case 23:
		{
			p.SetState(229)
			p.Release_stmt()
		}

	case 24:
		{
			p.SetState(230)
			p.Rollback_stmt()
		}

	case 25:
		{
			p.SetState(231)
			p.Savepoint_stmt()
		}

	case 26:
		{
			p.SetState(232)
			p.Simple_select_stmt()
		}

	case 27:
		{
			p.SetState(233)
			p.Select_stmt()
		}

	case 28:
		{
			p.SetState(234)
			p.Update_stmt()
		}

	case 29:
		{
			p.SetState(235)
			p.Update_stmt_limited()
		}

	case 30:
		{
			p.SetState(236)
			p.Vacuum_stmt()
		}

	}

	return localctx
}

// IAlter_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_stmtContext differentiates from other interfaces.
	IsAlter_table_stmtContext()
}

type Alter_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_stmtContext() *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt
	return p
}

func (*Alter_table_stmtContext) IsAlter_table_stmtContext() {}

func NewAlter_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt

	return p
}

func (s *Alter_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_stmtContext) K_ALTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALTER, 0)
}

func (s *Alter_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Alter_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_table_stmtContext) K_RENAME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RENAME, 0)
}

func (s *Alter_table_stmtContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TO, 0)
}

func (s *Alter_table_stmtContext) New_table_name() INew_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INew_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INew_table_nameContext)
}

func (s *Alter_table_stmtContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ADD, 0)
}

func (s *Alter_table_stmtContext) Column_def() IColumn_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Alter_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Alter_table_stmtContext) K_COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLUMN, 0)
}

func (s *Alter_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAlter_table_stmt(s)
	}
}

func (p *SQLiteParser) Alter_table_stmt() (localctx IAlter_table_stmtContext) {
	localctx = NewAlter_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SQLiteParserRULE_alter_table_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(239)
		p.Match(SQLiteParserK_ALTER)
	}
	{
		p.SetState(240)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(244)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(241)
			p.Database_name()
		}
		{
			p.SetState(242)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(246)
		p.Table_name()
	}
	p.SetState(255)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_RENAME:
		{
			p.SetState(247)
			p.Match(SQLiteParserK_RENAME)
		}
		{
			p.SetState(248)
			p.Match(SQLiteParserK_TO)
		}
		{
			p.SetState(249)
			p.New_table_name()
		}

	case SQLiteParserK_ADD:
		{
			p.SetState(250)
			p.Match(SQLiteParserK_ADD)
		}
		p.SetState(252)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(251)
				p.Match(SQLiteParserK_COLUMN)
			}

		}
		{
			p.SetState(254)
			p.Column_def()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnalyze_stmtContext is an interface to support dynamic dispatch.
type IAnalyze_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyze_stmtContext differentiates from other interfaces.
	IsAnalyze_stmtContext()
}

type Analyze_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_stmtContext() *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_analyze_stmt
	return p
}

func (*Analyze_stmtContext) IsAnalyze_stmtContext() {}

func NewAnalyze_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_analyze_stmt

	return p
}

func (s *Analyze_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_stmtContext) K_ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ANALYZE, 0)
}

func (s *Analyze_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Analyze_stmtContext) Table_or_index_name() ITable_or_index_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_index_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_or_index_nameContext)
}

func (s *Analyze_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAnalyze_stmt(s)
	}
}

func (p *SQLiteParser) Analyze_stmt() (localctx IAnalyze_stmtContext) {
	localctx = NewAnalyze_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SQLiteParserRULE_analyze_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(257)
		p.Match(SQLiteParserK_ANALYZE)
	}
	p.SetState(264)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(258)
			p.Database_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(259)
			p.Table_or_index_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(260)
			p.Database_name()
		}
		{
			p.SetState(261)
			p.Match(SQLiteParserDOT)
		}
		{
			p.SetState(262)
			p.Table_or_index_name()
		}

	}

	return localctx
}

// IAttach_stmtContext is an interface to support dynamic dispatch.
type IAttach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttach_stmtContext differentiates from other interfaces.
	IsAttach_stmtContext()
}

type Attach_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttach_stmtContext() *Attach_stmtContext {
	var p = new(Attach_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_attach_stmt
	return p
}

func (*Attach_stmtContext) IsAttach_stmtContext() {}

func NewAttach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attach_stmtContext {
	var p = new(Attach_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_attach_stmt

	return p
}

func (s *Attach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Attach_stmtContext) K_ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ATTACH, 0)
}

func (s *Attach_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Attach_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Attach_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Attach_stmtContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DATABASE, 0)
}

func (s *Attach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAttach_stmt(s)
	}
}

func (p *SQLiteParser) Attach_stmt() (localctx IAttach_stmtContext) {
	localctx = NewAttach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SQLiteParserRULE_attach_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(266)
		p.Match(SQLiteParserK_ATTACH)
	}
	p.SetState(268)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(267)
			p.Match(SQLiteParserK_DATABASE)
		}

	}
	{
		p.SetState(270)
		p.expr(0)
	}
	{
		p.SetState(271)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(272)
		p.Database_name()
	}

	return localctx
}

// IBegin_stmtContext is an interface to support dynamic dispatch.
type IBegin_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBegin_stmtContext differentiates from other interfaces.
	IsBegin_stmtContext()
}

type Begin_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_stmtContext() *Begin_stmtContext {
	var p = new(Begin_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_begin_stmt
	return p
}

func (*Begin_stmtContext) IsBegin_stmtContext() {}

func NewBegin_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_stmtContext {
	var p = new(Begin_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_begin_stmt

	return p
}

func (s *Begin_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_stmtContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEGIN, 0)
}

func (s *Begin_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *Begin_stmtContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRED, 0)
}

func (s *Begin_stmtContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IMMEDIATE, 0)
}

func (s *Begin_stmtContext) K_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCLUSIVE, 0)
}

func (s *Begin_stmtContext) Transaction_name() ITransaction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Begin_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitBegin_stmt(s)
	}
}

func (p *SQLiteParser) Begin_stmt() (localctx IBegin_stmtContext) {
	localctx = NewBegin_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SQLiteParserRULE_begin_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(274)
		p.Match(SQLiteParserK_BEGIN)
	}
	p.SetState(276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(SQLiteParserK_DEFERRED-58))|(1<<(SQLiteParserK_EXCLUSIVE-58))|(1<<(SQLiteParserK_IMMEDIATE-58)))) != 0 {
		p.SetState(275)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(SQLiteParserK_DEFERRED-58))|(1<<(SQLiteParserK_EXCLUSIVE-58))|(1<<(SQLiteParserK_IMMEDIATE-58)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TRANSACTION {
		{
			p.SetState(278)
			p.Match(SQLiteParserK_TRANSACTION)
		}
		p.SetState(280)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(279)
				p.Transaction_name()
			}

		}

	}

	return localctx
}

// ICommit_stmtContext is an interface to support dynamic dispatch.
type ICommit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommit_stmtContext differentiates from other interfaces.
	IsCommit_stmtContext()
}

type Commit_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_stmtContext() *Commit_stmtContext {
	var p = new(Commit_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_commit_stmt
	return p
}

func (*Commit_stmtContext) IsCommit_stmtContext() {}

func NewCommit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_stmtContext {
	var p = new(Commit_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_commit_stmt

	return p
}

func (s *Commit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_stmtContext) K_COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COMMIT, 0)
}

func (s *Commit_stmtContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *Commit_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *Commit_stmtContext) Transaction_name() ITransaction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Commit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCommit_stmt(s)
	}
}

func (p *SQLiteParser) Commit_stmt() (localctx ICommit_stmtContext) {
	localctx = NewCommit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SQLiteParserRULE_commit_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(284)
	_la = p.GetTokenStream().LA(1)

	if !(_la == SQLiteParserK_COMMIT || _la == SQLiteParserK_END) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(289)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TRANSACTION {
		{
			p.SetState(285)
			p.Match(SQLiteParserK_TRANSACTION)
		}
		p.SetState(287)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(286)
				p.Transaction_name()
			}

		}

	}

	return localctx
}

// ICompound_select_stmtContext is an interface to support dynamic dispatch.
type ICompound_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_select_stmtContext differentiates from other interfaces.
	IsCompound_select_stmtContext()
}

type Compound_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_select_stmtContext() *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt
	return p
}

func (*Compound_select_stmtContext) IsCompound_select_stmtContext() {}

func NewCompound_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt

	return p
}

func (s *Compound_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem())
	var tst = make([]ISelect_coreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_coreContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Compound_select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *Compound_select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Compound_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Compound_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Compound_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Compound_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Compound_select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Compound_select_stmtContext) AllK_UNION() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_UNION)
}

func (s *Compound_select_stmtContext) K_UNION(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNION, i)
}

func (s *Compound_select_stmtContext) AllK_INTERSECT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_INTERSECT)
}

func (s *Compound_select_stmtContext) K_INTERSECT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTERSECT, i)
}

func (s *Compound_select_stmtContext) AllK_EXCEPT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_EXCEPT)
}

func (s *Compound_select_stmtContext) K_EXCEPT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCEPT, i)
}

func (s *Compound_select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *Compound_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Compound_select_stmtContext) AllK_ALL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_ALL)
}

func (s *Compound_select_stmtContext) K_ALL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, i)
}

func (s *Compound_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCompound_select_stmt(s)
	}
}

func (s *Compound_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCompound_select_stmt(s)
	}
}

func (p *SQLiteParser) Compound_select_stmt() (localctx ICompound_select_stmtContext) {
	localctx = NewCompound_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SQLiteParserRULE_compound_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(303)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(291)
			p.Match(SQLiteParserK_WITH)
		}
		p.SetState(293)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(292)
				p.Match(SQLiteParserK_RECURSIVE)
			}

		}
		{
			p.SetState(295)
			p.Common_table_expression()
		}
		p.SetState(300)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(296)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(297)
				p.Common_table_expression()
			}

			p.SetState(302)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(305)
		p.Select_core()
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserK_EXCEPT || _la == SQLiteParserK_INTERSECT || _la == SQLiteParserK_UNION {
		p.SetState(312)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_UNION:
			{
				p.SetState(306)
				p.Match(SQLiteParserK_UNION)
			}
			p.SetState(308)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_ALL {
				{
					p.SetState(307)
					p.Match(SQLiteParserK_ALL)
				}

			}

		case SQLiteParserK_INTERSECT:
			{
				p.SetState(310)
				p.Match(SQLiteParserK_INTERSECT)
			}

		case SQLiteParserK_EXCEPT:
			{
				p.SetState(311)
				p.Match(SQLiteParserK_EXCEPT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(314)
			p.Select_core()
		}

		p.SetState(317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(319)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(320)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(321)
			p.Ordering_term()
		}
		p.SetState(326)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(322)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(323)
				p.Ordering_term()
			}

			p.SetState(328)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(331)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(332)
			p.expr(0)
		}
		p.SetState(335)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			p.SetState(333)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(334)
				p.expr(0)
			}

		}

	}

	return localctx
}

// ICreate_index_stmtContext is an interface to support dynamic dispatch.
type ICreate_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_index_stmtContext differentiates from other interfaces.
	IsCreate_index_stmtContext()
}

type Create_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_index_stmtContext() *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_index_stmt
	return p
}

func (*Create_index_stmtContext) IsCreate_index_stmtContext() {}

func NewCreate_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_index_stmt

	return p
}

func (s *Create_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_index_stmtContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEX, 0)
}

func (s *Create_index_stmtContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Create_index_stmtContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Create_index_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_index_stmtContext) AllIndexed_column() []IIndexed_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem())
	var tst = make([]IIndexed_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexed_columnContext)
		}
	}

	return tst
}

func (s *Create_index_stmtContext) Indexed_column(i int) IIndexed_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Create_index_stmtContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *Create_index_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_index_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_index_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_index_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_index_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Create_index_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_index_stmt(s)
	}
}

func (p *SQLiteParser) Create_index_stmt() (localctx ICreate_index_stmtContext) {
	localctx = NewCreate_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SQLiteParserRULE_create_index_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(339)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_UNIQUE {
		{
			p.SetState(340)
			p.Match(SQLiteParserK_UNIQUE)
		}

	}
	{
		p.SetState(343)
		p.Match(SQLiteParserK_INDEX)
	}
	p.SetState(347)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(344)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(345)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(346)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(352)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(349)
			p.Database_name()
		}
		{
			p.SetState(350)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(354)
		p.Index_name()
	}
	{
		p.SetState(355)
		p.Match(SQLiteParserK_ON)
	}
	{
		p.SetState(356)
		p.Table_name()
	}
	{
		p.SetState(357)
		p.Match(SQLiteParserOPEN_PAR)
	}
	{
		p.SetState(358)
		p.Indexed_column()
	}
	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(359)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(360)
			p.Indexed_column()
		}

		p.SetState(365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(366)
		p.Match(SQLiteParserCLOSE_PAR)
	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(367)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(368)
			p.expr(0)
		}

	}

	return localctx
}

// ICreate_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_table_stmtContext differentiates from other interfaces.
	IsCreate_table_stmtContext()
}

type Create_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_stmtContext() *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_table_stmt
	return p
}

func (*Create_table_stmtContext) IsCreate_table_stmtContext() {}

func NewCreate_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_table_stmt

	return p
}

func (s *Create_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Create_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_table_stmtContext) AllColumn_def() []IColumn_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_defContext)(nil)).Elem())
	var tst = make([]IColumn_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_defContext)
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Column_def(i int) IColumn_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Create_table_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Create_table_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_table_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_table_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *Create_table_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *Create_table_stmtContext) AllTable_constraint() []ITable_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem())
	var tst = make([]ITable_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_constraintContext)
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Table_constraint(i int) ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Create_table_stmtContext) K_WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITHOUT, 0)
}

func (s *Create_table_stmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Create_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_table_stmt(s)
	}
}

func (p *SQLiteParser) Create_table_stmt() (localctx ICreate_table_stmtContext) {
	localctx = NewCreate_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SQLiteParserRULE_create_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(371)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(373)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY {
		p.SetState(372)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(375)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(379)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(376)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(377)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(378)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(384)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(381)
			p.Database_name()
		}
		{
			p.SetState(382)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(386)
		p.Table_name()
	}
	p.SetState(410)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR:
		{
			p.SetState(387)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(388)
			p.Column_def()
		}
		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(389)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(390)
					p.Column_def()
				}

			}
			p.SetState(395)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
		}
		p.SetState(400)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(396)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(397)
				p.Table_constraint()
			}

			p.SetState(402)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(403)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_WITHOUT {
			{
				p.SetState(404)
				p.Match(SQLiteParserK_WITHOUT)
			}
			{
				p.SetState(405)
				p.Match(SQLiteParserIDENTIFIER)
			}

		}

	case SQLiteParserK_AS:
		{
			p.SetState(408)
			p.Match(SQLiteParserK_AS)
		}
		{
			p.SetState(409)
			p.Select_stmt()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_trigger_stmtContext differentiates from other interfaces.
	IsCreate_trigger_stmtContext()
}

type Create_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_trigger_stmtContext() *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt
	return p
}

func (*Create_trigger_stmtContext) IsCreate_trigger_stmtContext() {}

func NewCreate_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt

	return p
}

func (s *Create_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_trigger_stmtContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRIGGER, 0)
}

func (s *Create_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrigger_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Create_trigger_stmtContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Create_trigger_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_trigger_stmtContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEGIN, 0)
}

func (s *Create_trigger_stmtContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *Create_trigger_stmtContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *Create_trigger_stmtContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSERT, 0)
}

func (s *Create_trigger_stmtContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *Create_trigger_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_trigger_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_trigger_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_trigger_stmtContext) AllDatabase_name() []IDatabase_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem())
	var tst = make([]IDatabase_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_nameContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Database_name(i int) IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_trigger_stmtContext) K_BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEFORE, 0)
}

func (s *Create_trigger_stmtContext) K_AFTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AFTER, 0)
}

func (s *Create_trigger_stmtContext) K_INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSTEAD, 0)
}

func (s *Create_trigger_stmtContext) AllK_OF() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_OF)
}

func (s *Create_trigger_stmtContext) K_OF(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OF, i)
}

func (s *Create_trigger_stmtContext) K_FOR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOR, 0)
}

func (s *Create_trigger_stmtContext) K_EACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EACH, 0)
}

func (s *Create_trigger_stmtContext) K_ROW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROW, 0)
}

func (s *Create_trigger_stmtContext) K_WHEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHEN, 0)
}

func (s *Create_trigger_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_trigger_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *Create_trigger_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *Create_trigger_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_trigger_stmtContext) AllUpdate_stmt() []IUpdate_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem())
	var tst = make([]IUpdate_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Update_stmt(i int) IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Create_trigger_stmtContext) AllInsert_stmt() []IInsert_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem())
	var tst = make([]IInsert_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInsert_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Insert_stmt(i int) IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Create_trigger_stmtContext) AllDelete_stmt() []IDelete_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem())
	var tst = make([]IDelete_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDelete_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Delete_stmt(i int) IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Create_trigger_stmtContext) AllSelect_stmt() []ISelect_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem())
	var tst = make([]ISelect_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_stmtContext)
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Select_stmt(i int) ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_trigger_stmt(s)
	}
}

func (p *SQLiteParser) Create_trigger_stmt() (localctx ICreate_trigger_stmtContext) {
	localctx = NewCreate_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SQLiteParserRULE_create_trigger_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(412)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY {
		p.SetState(413)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(416)
		p.Match(SQLiteParserK_TRIGGER)
	}
	p.SetState(420)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(417)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(418)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(419)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(422)
			p.Database_name()
		}
		{
			p.SetState(423)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(427)
		p.Trigger_name()
	}
	p.SetState(432)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_BEFORE:
		{
			p.SetState(428)
			p.Match(SQLiteParserK_BEFORE)
		}

	case SQLiteParserK_AFTER:
		{
			p.SetState(429)
			p.Match(SQLiteParserK_AFTER)
		}

	case SQLiteParserK_INSTEAD:
		{
			p.SetState(430)
			p.Match(SQLiteParserK_INSTEAD)
		}
		{
			p.SetState(431)
			p.Match(SQLiteParserK_OF)
		}

	case SQLiteParserK_DELETE, SQLiteParserK_INSERT, SQLiteParserK_UPDATE:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(448)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_DELETE:
		{
			p.SetState(434)
			p.Match(SQLiteParserK_DELETE)
		}

	case SQLiteParserK_INSERT:
		{
			p.SetState(435)
			p.Match(SQLiteParserK_INSERT)
		}

	case SQLiteParserK_UPDATE:
		{
			p.SetState(436)
			p.Match(SQLiteParserK_UPDATE)
		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_OF {
			{
				p.SetState(437)
				p.Match(SQLiteParserK_OF)
			}
			{
				p.SetState(438)
				p.Column_name()
			}
			p.SetState(443)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(439)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(440)
					p.Column_name()
				}

				p.SetState(445)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(450)
		p.Match(SQLiteParserK_ON)
	}
	p.SetState(454)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(451)
			p.Database_name()
		}
		{
			p.SetState(452)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(456)
		p.Table_name()
	}
	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_FOR {
		{
			p.SetState(457)
			p.Match(SQLiteParserK_FOR)
		}
		{
			p.SetState(458)
			p.Match(SQLiteParserK_EACH)
		}
		{
			p.SetState(459)
			p.Match(SQLiteParserK_ROW)
		}

	}
	p.SetState(464)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHEN {
		{
			p.SetState(462)
			p.Match(SQLiteParserK_WHEN)
		}
		{
			p.SetState(463)
			p.expr(0)
		}

	}
	{
		p.SetState(466)
		p.Match(SQLiteParserK_BEGIN)
	}
	p.SetState(475)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserK_DELETE || _la == SQLiteParserK_INSERT || (((_la-122)&-(0x1f+1)) == 0 && ((1<<uint((_la-122)))&((1<<(SQLiteParserK_REPLACE-122))|(1<<(SQLiteParserK_SELECT-122))|(1<<(SQLiteParserK_UPDATE-122))|(1<<(SQLiteParserK_VALUES-122))|(1<<(SQLiteParserK_WITH-122)))) != 0) {
		p.SetState(471)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(467)
				p.Update_stmt()
			}

		case 2:
			{
				p.SetState(468)
				p.Insert_stmt()
			}

		case 3:
			{
				p.SetState(469)
				p.Delete_stmt()
			}

		case 4:
			{
				p.SetState(470)
				p.Select_stmt()
			}

		}
		{
			p.SetState(473)
			p.Match(SQLiteParserSCOL)
		}

		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(479)
		p.Match(SQLiteParserK_END)
	}

	return localctx
}

// ICreate_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_view_stmtContext differentiates from other interfaces.
	IsCreate_view_stmtContext()
}

type Create_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_view_stmtContext() *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_view_stmt
	return p
}

func (*Create_view_stmtContext) IsCreate_view_stmtContext() {}

func NewCreate_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_view_stmt

	return p
}

func (s *Create_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_view_stmtContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIEW, 0)
}

func (s *Create_view_stmtContext) View_name() IView_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Create_view_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Create_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_view_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_view_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_view_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_view_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *Create_view_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *Create_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_view_stmt(s)
	}
}

func (p *SQLiteParser) Create_view_stmt() (localctx ICreate_view_stmtContext) {
	localctx = NewCreate_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SQLiteParserRULE_create_view_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)
		p.Match(SQLiteParserK_CREATE)
	}
	p.SetState(483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY {
		p.SetState(482)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_TEMP || _la == SQLiteParserK_TEMPORARY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(485)
		p.Match(SQLiteParserK_VIEW)
	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(486)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(487)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(488)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(491)
			p.Database_name()
		}
		{
			p.SetState(492)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(496)
		p.View_name()
	}
	{
		p.SetState(497)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(498)
		p.Select_stmt()
	}

	return localctx
}

// ICreate_virtual_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_virtual_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_virtual_table_stmtContext differentiates from other interfaces.
	IsCreate_virtual_table_stmtContext()
}

type Create_virtual_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_virtual_table_stmtContext() *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt
	return p
}

func (*Create_virtual_table_stmtContext) IsCreate_virtual_table_stmtContext() {}

func NewCreate_virtual_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt

	return p
}

func (s *Create_virtual_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_virtual_table_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *Create_virtual_table_stmtContext) K_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIRTUAL, 0)
}

func (s *Create_virtual_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Create_virtual_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_virtual_table_stmtContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_USING, 0)
}

func (s *Create_virtual_table_stmtContext) Module_name() IModule_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModule_nameContext)
}

func (s *Create_virtual_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Create_virtual_table_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Create_virtual_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Create_virtual_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_virtual_table_stmtContext) AllModule_argument() []IModule_argumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModule_argumentContext)(nil)).Elem())
	var tst = make([]IModule_argumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModule_argumentContext)
		}
	}

	return tst
}

func (s *Create_virtual_table_stmtContext) Module_argument(i int) IModule_argumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModule_argumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModule_argumentContext)
}

func (s *Create_virtual_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_virtual_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_virtual_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCreate_virtual_table_stmt(s)
	}
}

func (p *SQLiteParser) Create_virtual_table_stmt() (localctx ICreate_virtual_table_stmtContext) {
	localctx = NewCreate_virtual_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SQLiteParserRULE_create_virtual_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(500)
		p.Match(SQLiteParserK_CREATE)
	}
	{
		p.SetState(501)
		p.Match(SQLiteParserK_VIRTUAL)
	}
	{
		p.SetState(502)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(506)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(503)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(504)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(505)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(511)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(508)
			p.Database_name()
		}
		{
			p.SetState(509)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(513)
		p.Table_name()
	}
	{
		p.SetState(514)
		p.Match(SQLiteParserK_USING)
	}
	{
		p.SetState(515)
		p.Module_name()
	}
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(516)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(517)
			p.Module_argument()
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(518)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(519)
				p.Module_argument()
			}

			p.SetState(524)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(525)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}

	return localctx
}

// IDelete_stmtContext is an interface to support dynamic dispatch.
type IDelete_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_stmtContext differentiates from other interfaces.
	IsDelete_stmtContext()
}

type Delete_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmtContext() *Delete_stmtContext {
	var p = new(Delete_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt
	return p
}

func (*Delete_stmtContext) IsDelete_stmtContext() {}

func NewDelete_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmtContext {
	var p = new(Delete_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt

	return p
}

func (s *Delete_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmtContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *Delete_stmtContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Delete_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Delete_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDelete_stmt(s)
	}
}

func (p *SQLiteParser) Delete_stmt() (localctx IDelete_stmtContext) {
	localctx = NewDelete_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SQLiteParserRULE_delete_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(529)
			p.With_clause()
		}

	}
	{
		p.SetState(532)
		p.Match(SQLiteParserK_DELETE)
	}
	{
		p.SetState(533)
		p.Match(SQLiteParserK_FROM)
	}
	{
		p.SetState(534)
		p.Qualified_table_name()
	}
	p.SetState(537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(535)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(536)
			p.expr(0)
		}

	}

	return localctx
}

// IDelete_stmt_limitedContext is an interface to support dynamic dispatch.
type IDelete_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_stmt_limitedContext differentiates from other interfaces.
	IsDelete_stmt_limitedContext()
}

type Delete_stmt_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmt_limitedContext() *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited
	return p
}

func (*Delete_stmt_limitedContext) IsDelete_stmt_limitedContext() {}

func NewDelete_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited

	return p
}

func (s *Delete_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmt_limitedContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *Delete_stmt_limitedContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Delete_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmt_limitedContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Delete_stmt_limitedContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Delete_stmt_limitedContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmt_limitedContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Delete_stmt_limitedContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Delete_stmt_limitedContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Delete_stmt_limitedContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Delete_stmt_limitedContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Delete_stmt_limitedContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Delete_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDelete_stmt_limited(s)
	}
}

func (s *Delete_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDelete_stmt_limited(s)
	}
}

func (p *SQLiteParser) Delete_stmt_limited() (localctx IDelete_stmt_limitedContext) {
	localctx = NewDelete_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SQLiteParserRULE_delete_stmt_limited)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(540)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(539)
			p.With_clause()
		}

	}
	{
		p.SetState(542)
		p.Match(SQLiteParserK_DELETE)
	}
	{
		p.SetState(543)
		p.Match(SQLiteParserK_FROM)
	}
	{
		p.SetState(544)
		p.Qualified_table_name()
	}
	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(545)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(546)
			p.expr(0)
		}

	}
	p.SetState(567)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT || _la == SQLiteParserK_ORDER {
		p.SetState(559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ORDER {
			{
				p.SetState(549)
				p.Match(SQLiteParserK_ORDER)
			}
			{
				p.SetState(550)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(551)
				p.Ordering_term()
			}
			p.SetState(556)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(552)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(553)
					p.Ordering_term()
				}

				p.SetState(558)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(561)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(562)
			p.expr(0)
		}
		p.SetState(565)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			p.SetState(563)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(564)
				p.expr(0)
			}

		}

	}

	return localctx
}

// IDetach_stmtContext is an interface to support dynamic dispatch.
type IDetach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDetach_stmtContext differentiates from other interfaces.
	IsDetach_stmtContext()
}

type Detach_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDetach_stmtContext() *Detach_stmtContext {
	var p = new(Detach_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_detach_stmt
	return p
}

func (*Detach_stmtContext) IsDetach_stmtContext() {}

func NewDetach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Detach_stmtContext {
	var p = new(Detach_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_detach_stmt

	return p
}

func (s *Detach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Detach_stmtContext) K_DETACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DETACH, 0)
}

func (s *Detach_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Detach_stmtContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DATABASE, 0)
}

func (s *Detach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Detach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Detach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDetach_stmt(s)
	}
}

func (p *SQLiteParser) Detach_stmt() (localctx IDetach_stmtContext) {
	localctx = NewDetach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SQLiteParserRULE_detach_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(569)
		p.Match(SQLiteParserK_DETACH)
	}
	p.SetState(571)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(570)
			p.Match(SQLiteParserK_DATABASE)
		}

	}
	{
		p.SetState(573)
		p.Database_name()
	}

	return localctx
}

// IDrop_index_stmtContext is an interface to support dynamic dispatch.
type IDrop_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_index_stmtContext differentiates from other interfaces.
	IsDrop_index_stmtContext()
}

type Drop_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_index_stmtContext() *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt
	return p
}

func (*Drop_index_stmtContext) IsDrop_index_stmtContext() {}

func NewDrop_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt

	return p
}

func (s *Drop_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_index_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_index_stmtContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEX, 0)
}

func (s *Drop_index_stmtContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Drop_index_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_index_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_index_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_index_stmt(s)
	}
}

func (p *SQLiteParser) Drop_index_stmt() (localctx IDrop_index_stmtContext) {
	localctx = NewDrop_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SQLiteParserRULE_drop_index_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(575)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(576)
		p.Match(SQLiteParserK_INDEX)
	}
	p.SetState(579)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(577)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(578)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(584)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(581)
			p.Database_name()
		}
		{
			p.SetState(582)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(586)
		p.Index_name()
	}

	return localctx
}

// IDrop_table_stmtContext is an interface to support dynamic dispatch.
type IDrop_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_table_stmtContext differentiates from other interfaces.
	IsDrop_table_stmtContext()
}

type Drop_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_table_stmtContext() *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt
	return p
}

func (*Drop_table_stmtContext) IsDrop_table_stmtContext() {}

func NewDrop_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt

	return p
}

func (s *Drop_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *Drop_table_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_table_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_table_stmt(s)
	}
}

func (p *SQLiteParser) Drop_table_stmt() (localctx IDrop_table_stmtContext) {
	localctx = NewDrop_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SQLiteParserRULE_drop_table_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(589)
		p.Match(SQLiteParserK_TABLE)
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(590)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(591)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(597)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(594)
			p.Database_name()
		}
		{
			p.SetState(595)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(599)
		p.Table_name()
	}

	return localctx
}

// IDrop_trigger_stmtContext is an interface to support dynamic dispatch.
type IDrop_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_trigger_stmtContext differentiates from other interfaces.
	IsDrop_trigger_stmtContext()
}

type Drop_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_trigger_stmtContext() *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt
	return p
}

func (*Drop_trigger_stmtContext) IsDrop_trigger_stmtContext() {}

func NewDrop_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt

	return p
}

func (s *Drop_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_trigger_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_trigger_stmtContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRIGGER, 0)
}

func (s *Drop_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrigger_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Drop_trigger_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_trigger_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_trigger_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_trigger_stmt(s)
	}
}

func (p *SQLiteParser) Drop_trigger_stmt() (localctx IDrop_trigger_stmtContext) {
	localctx = NewDrop_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SQLiteParserRULE_drop_trigger_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(601)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(602)
		p.Match(SQLiteParserK_TRIGGER)
	}
	p.SetState(605)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(603)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(604)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(610)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(607)
			p.Database_name()
		}
		{
			p.SetState(608)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(612)
		p.Trigger_name()
	}

	return localctx
}

// IDrop_view_stmtContext is an interface to support dynamic dispatch.
type IDrop_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_view_stmtContext differentiates from other interfaces.
	IsDrop_view_stmtContext()
}

type Drop_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_view_stmtContext() *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt
	return p
}

func (*Drop_view_stmtContext) IsDrop_view_stmtContext() {}

func NewDrop_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt

	return p
}

func (s *Drop_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_view_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *Drop_view_stmtContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIEW, 0)
}

func (s *Drop_view_stmtContext) View_name() IView_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Drop_view_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *Drop_view_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *Drop_view_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDrop_view_stmt(s)
	}
}

func (p *SQLiteParser) Drop_view_stmt() (localctx IDrop_view_stmtContext) {
	localctx = NewDrop_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SQLiteParserRULE_drop_view_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(614)
		p.Match(SQLiteParserK_DROP)
	}
	{
		p.SetState(615)
		p.Match(SQLiteParserK_VIEW)
	}
	p.SetState(618)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(616)
			p.Match(SQLiteParserK_IF)
		}
		{
			p.SetState(617)
			p.Match(SQLiteParserK_EXISTS)
		}

	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(620)
			p.Database_name()
		}
		{
			p.SetState(621)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(625)
		p.View_name()
	}

	return localctx
}

// IFactored_select_stmtContext is an interface to support dynamic dispatch.
type IFactored_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFactored_select_stmtContext differentiates from other interfaces.
	IsFactored_select_stmtContext()
}

type Factored_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFactored_select_stmtContext() *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt
	return p
}

func (*Factored_select_stmtContext) IsFactored_select_stmtContext() {}

func NewFactored_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt

	return p
}

func (s *Factored_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Factored_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem())
	var tst = make([]ISelect_coreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_coreContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Factored_select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *Factored_select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Factored_select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem())
	var tst = make([]ICompound_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICompound_operatorContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Factored_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Factored_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Factored_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Factored_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Factored_select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Factored_select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *Factored_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Factored_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Factored_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Factored_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterFactored_select_stmt(s)
	}
}

func (s *Factored_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitFactored_select_stmt(s)
	}
}

func (p *SQLiteParser) Factored_select_stmt() (localctx IFactored_select_stmtContext) {
	localctx = NewFactored_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SQLiteParserRULE_factored_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(639)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(627)
			p.Match(SQLiteParserK_WITH)
		}
		p.SetState(629)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(628)
				p.Match(SQLiteParserK_RECURSIVE)
			}

		}
		{
			p.SetState(631)
			p.Common_table_expression()
		}
		p.SetState(636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(632)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(633)
				p.Common_table_expression()
			}

			p.SetState(638)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(641)
		p.Select_core()
	}
	p.SetState(647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserK_EXCEPT || _la == SQLiteParserK_INTERSECT || _la == SQLiteParserK_UNION {
		{
			p.SetState(642)
			p.Compound_operator()
		}
		{
			p.SetState(643)
			p.Select_core()
		}

		p.SetState(649)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(660)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(650)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(651)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(652)
			p.Ordering_term()
		}
		p.SetState(657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(653)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(654)
				p.Ordering_term()
			}

			p.SetState(659)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(668)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(662)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(663)
			p.expr(0)
		}
		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			p.SetState(664)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(665)
				p.expr(0)
			}

		}

	}

	return localctx
}

// IInsert_stmtContext is an interface to support dynamic dispatch.
type IInsert_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_stmtContext differentiates from other interfaces.
	IsInsert_stmtContext()
}

type Insert_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_stmtContext() *Insert_stmtContext {
	var p = new(Insert_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_insert_stmt
	return p
}

func (*Insert_stmtContext) IsInsert_stmtContext() {}

func NewInsert_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmtContext {
	var p = new(Insert_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_insert_stmt

	return p
}

func (s *Insert_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmtContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTO, 0)
}

func (s *Insert_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Insert_stmtContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSERT, 0)
}

func (s *Insert_stmtContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Insert_stmtContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *Insert_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Insert_stmtContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Insert_stmtContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Insert_stmtContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Insert_stmtContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *Insert_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Insert_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Insert_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmtContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, 0)
}

func (s *Insert_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Insert_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Insert_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Insert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitInsert_stmt(s)
	}
}

func (p *SQLiteParser) Insert_stmt() (localctx IInsert_stmtContext) {
	localctx = NewInsert_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SQLiteParserRULE_insert_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(671)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(670)
			p.With_clause()
		}

	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(673)
			p.Match(SQLiteParserK_INSERT)
		}

	case 2:
		{
			p.SetState(674)
			p.Match(SQLiteParserK_REPLACE)
		}

	case 3:
		{
			p.SetState(675)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(676)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(677)
			p.Match(SQLiteParserK_REPLACE)
		}

	case 4:
		{
			p.SetState(678)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(679)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(680)
			p.Match(SQLiteParserK_ROLLBACK)
		}

	case 5:
		{
			p.SetState(681)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(682)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(683)
			p.Match(SQLiteParserK_ABORT)
		}

	case 6:
		{
			p.SetState(684)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(685)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(686)
			p.Match(SQLiteParserK_FAIL)
		}

	case 7:
		{
			p.SetState(687)
			p.Match(SQLiteParserK_INSERT)
		}
		{
			p.SetState(688)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(689)
			p.Match(SQLiteParserK_IGNORE)
		}

	}
	{
		p.SetState(692)
		p.Match(SQLiteParserK_INTO)
	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(693)
			p.Database_name()
		}
		{
			p.SetState(694)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(698)
		p.Table_name()
	}
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(699)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(700)
			p.Column_name()
		}
		p.SetState(705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(701)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(702)
				p.Column_name()
			}

			p.SetState(707)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(708)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}
	p.SetState(743)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(712)
			p.Match(SQLiteParserK_VALUES)
		}
		{
			p.SetState(713)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(714)
			p.expr(0)
		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(715)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(716)
				p.expr(0)
			}

			p.SetState(721)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(722)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(723)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(724)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(725)
				p.expr(0)
			}
			p.SetState(730)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(726)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(727)
					p.expr(0)
				}

				p.SetState(732)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(733)
				p.Match(SQLiteParserCLOSE_PAR)
			}

			p.SetState(739)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(740)
			p.Select_stmt()
		}

	case 3:
		{
			p.SetState(741)
			p.Match(SQLiteParserK_DEFAULT)
		}
		{
			p.SetState(742)
			p.Match(SQLiteParserK_VALUES)
		}

	}

	return localctx
}

// IPragma_stmtContext is an interface to support dynamic dispatch.
type IPragma_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_stmtContext differentiates from other interfaces.
	IsPragma_stmtContext()
}

type Pragma_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_stmtContext() *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_stmt
	return p
}

func (*Pragma_stmtContext) IsPragma_stmtContext() {}

func NewPragma_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_stmt

	return p
}

func (s *Pragma_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_stmtContext) K_PRAGMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRAGMA, 0)
}

func (s *Pragma_stmtContext) Pragma_name() IPragma_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragma_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragma_nameContext)
}

func (s *Pragma_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Pragma_stmtContext) Pragma_value() IPragma_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragma_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragma_valueContext)
}

func (s *Pragma_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitPragma_stmt(s)
	}
}

func (p *SQLiteParser) Pragma_stmt() (localctx IPragma_stmtContext) {
	localctx = NewPragma_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SQLiteParserRULE_pragma_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(745)
		p.Match(SQLiteParserK_PRAGMA)
	}
	p.SetState(749)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(746)
			p.Database_name()
		}
		{
			p.SetState(747)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(751)
		p.Pragma_name()
	}
	p.SetState(758)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserASSIGN:
		{
			p.SetState(752)
			p.Match(SQLiteParserASSIGN)
		}
		{
			p.SetState(753)
			p.Pragma_value()
		}

	case SQLiteParserOPEN_PAR:
		{
			p.SetState(754)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(755)
			p.Pragma_value()
		}
		{
			p.SetState(756)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXPLAIN, SQLiteParserK_INSERT, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WITH, SQLiteParserUNEXPECTED_CHAR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IReindex_stmtContext is an interface to support dynamic dispatch.
type IReindex_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReindex_stmtContext differentiates from other interfaces.
	IsReindex_stmtContext()
}

type Reindex_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReindex_stmtContext() *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_reindex_stmt
	return p
}

func (*Reindex_stmtContext) IsReindex_stmtContext() {}

func NewReindex_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_reindex_stmt

	return p
}

func (s *Reindex_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reindex_stmtContext) K_REINDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REINDEX, 0)
}

func (s *Reindex_stmtContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Reindex_stmtContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Reindex_stmtContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Reindex_stmtContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Reindex_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reindex_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reindex_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitReindex_stmt(s)
	}
}

func (p *SQLiteParser) Reindex_stmt() (localctx IReindex_stmtContext) {
	localctx = NewReindex_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SQLiteParserRULE_reindex_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)
		p.Match(SQLiteParserK_REINDEX)
	}
	p.SetState(771)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(761)
			p.Collation_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 2 {
		p.SetState(765)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(762)
				p.Database_name()
			}
			{
				p.SetState(763)
				p.Match(SQLiteParserDOT)
			}

		}
		p.SetState(769)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(767)
				p.Table_name()
			}

		case 2:
			{
				p.SetState(768)
				p.Index_name()
			}

		}

	}

	return localctx
}

// IRelease_stmtContext is an interface to support dynamic dispatch.
type IRelease_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelease_stmtContext differentiates from other interfaces.
	IsRelease_stmtContext()
}

type Release_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_stmtContext() *Release_stmtContext {
	var p = new(Release_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_release_stmt
	return p
}

func (*Release_stmtContext) IsRelease_stmtContext() {}

func NewRelease_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_stmtContext {
	var p = new(Release_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_release_stmt

	return p
}

func (s *Release_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_stmtContext) K_RELEASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RELEASE, 0)
}

func (s *Release_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Release_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *Release_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterRelease_stmt(s)
	}
}

func (s *Release_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitRelease_stmt(s)
	}
}

func (p *SQLiteParser) Release_stmt() (localctx IRelease_stmtContext) {
	localctx = NewRelease_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SQLiteParserRULE_release_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.Match(SQLiteParserK_RELEASE)
	}
	p.SetState(775)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(774)
			p.Match(SQLiteParserK_SAVEPOINT)
		}

	}
	{
		p.SetState(777)
		p.Savepoint_name()
	}

	return localctx
}

// IRollback_stmtContext is an interface to support dynamic dispatch.
type IRollback_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollback_stmtContext differentiates from other interfaces.
	IsRollback_stmtContext()
}

type Rollback_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_stmtContext() *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_rollback_stmt
	return p
}

func (*Rollback_stmtContext) IsRollback_stmtContext() {}

func NewRollback_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rollback_stmt

	return p
}

func (s *Rollback_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Rollback_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *Rollback_stmtContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TO, 0)
}

func (s *Rollback_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Rollback_stmtContext) Transaction_name() ITransaction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Rollback_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *Rollback_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitRollback_stmt(s)
	}
}

func (p *SQLiteParser) Rollback_stmt() (localctx IRollback_stmtContext) {
	localctx = NewRollback_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SQLiteParserRULE_rollback_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.Match(SQLiteParserK_ROLLBACK)
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TRANSACTION {
		{
			p.SetState(780)
			p.Match(SQLiteParserK_TRANSACTION)
		}
		p.SetState(782)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(781)
				p.Transaction_name()
			}

		}

	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_TO {
		{
			p.SetState(786)
			p.Match(SQLiteParserK_TO)
		}
		p.SetState(788)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(787)
				p.Match(SQLiteParserK_SAVEPOINT)
			}

		}
		{
			p.SetState(790)
			p.Savepoint_name()
		}

	}

	return localctx
}

// ISavepoint_stmtContext is an interface to support dynamic dispatch.
type ISavepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_stmtContext differentiates from other interfaces.
	IsSavepoint_stmtContext()
}

type Savepoint_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_stmtContext() *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt
	return p
}

func (*Savepoint_stmtContext) IsSavepoint_stmtContext() {}

func NewSavepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt

	return p
}

func (s *Savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *Savepoint_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSavepoint_stmt(s)
	}
}

func (p *SQLiteParser) Savepoint_stmt() (localctx ISavepoint_stmtContext) {
	localctx = NewSavepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SQLiteParserRULE_savepoint_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(793)
		p.Match(SQLiteParserK_SAVEPOINT)
	}
	{
		p.SetState(794)
		p.Savepoint_name()
	}

	return localctx
}

// ISimple_select_stmtContext is an interface to support dynamic dispatch.
type ISimple_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_select_stmtContext differentiates from other interfaces.
	IsSimple_select_stmtContext()
}

type Simple_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_select_stmtContext() *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt
	return p
}

func (*Simple_select_stmtContext) IsSimple_select_stmtContext() {}

func NewSimple_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt

	return p
}

func (s *Simple_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_select_stmtContext) Select_core() ISelect_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_coreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Simple_select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *Simple_select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Simple_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Simple_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Simple_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Simple_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Simple_select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Simple_select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *Simple_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Simple_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSimple_select_stmt(s)
	}
}

func (s *Simple_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSimple_select_stmt(s)
	}
}

func (p *SQLiteParser) Simple_select_stmt() (localctx ISimple_select_stmtContext) {
	localctx = NewSimple_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SQLiteParserRULE_simple_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(808)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(796)
			p.Match(SQLiteParserK_WITH)
		}
		p.SetState(798)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(797)
				p.Match(SQLiteParserK_RECURSIVE)
			}

		}
		{
			p.SetState(800)
			p.Common_table_expression()
		}
		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(801)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(802)
				p.Common_table_expression()
			}

			p.SetState(807)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(810)
		p.Select_core()
	}
	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(811)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(812)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(813)
			p.Ordering_term()
		}
		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(814)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(815)
				p.Ordering_term()
			}

			p.SetState(820)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(823)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(824)
			p.expr(0)
		}
		p.SetState(827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			p.SetState(825)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(826)
				p.expr(0)
			}

		}

	}

	return localctx
}

// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_stmt
	return p
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) AllSelect_or_values() []ISelect_or_valuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_or_valuesContext)(nil)).Elem())
	var tst = make([]ISelect_or_valuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_or_valuesContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Select_or_values(i int) ISelect_or_valuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_or_valuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_or_valuesContext)
}

func (s *Select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *Select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem())
	var tst = make([]ICompound_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICompound_operatorContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Select_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *Select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}

func (p *SQLiteParser) Select_stmt() (localctx ISelect_stmtContext) {
	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SQLiteParserRULE_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(831)
			p.Match(SQLiteParserK_WITH)
		}
		p.SetState(833)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(832)
				p.Match(SQLiteParserK_RECURSIVE)
			}

		}
		{
			p.SetState(835)
			p.Common_table_expression()
		}
		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(836)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(837)
				p.Common_table_expression()
			}

			p.SetState(842)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(845)
		p.Select_or_values()
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserK_EXCEPT || _la == SQLiteParserK_INTERSECT || _la == SQLiteParserK_UNION {
		{
			p.SetState(846)
			p.Compound_operator()
		}
		{
			p.SetState(847)
			p.Select_or_values()
		}

		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(864)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ORDER {
		{
			p.SetState(854)
			p.Match(SQLiteParserK_ORDER)
		}
		{
			p.SetState(855)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(856)
			p.Ordering_term()
		}
		p.SetState(861)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(857)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(858)
				p.Ordering_term()
			}

			p.SetState(863)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT {
		{
			p.SetState(866)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(867)
			p.expr(0)
		}
		p.SetState(870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			p.SetState(868)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(869)
				p.expr(0)
			}

		}

	}

	return localctx
}

// ISelect_or_valuesContext is an interface to support dynamic dispatch.
type ISelect_or_valuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_or_valuesContext differentiates from other interfaces.
	IsSelect_or_valuesContext()
}

type Select_or_valuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_or_valuesContext() *Select_or_valuesContext {
	var p = new(Select_or_valuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_or_values
	return p
}

func (*Select_or_valuesContext) IsSelect_or_valuesContext() {}

func NewSelect_or_valuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_or_valuesContext {
	var p = new(Select_or_valuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_or_values

	return p
}

func (s *Select_or_valuesContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_or_valuesContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SELECT, 0)
}

func (s *Select_or_valuesContext) AllResult_column() []IResult_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IResult_columnContext)(nil)).Elem())
	var tst = make([]IResult_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IResult_columnContext)
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Result_column(i int) IResult_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResult_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_or_valuesContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Select_or_valuesContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Select_or_valuesContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_or_valuesContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GROUP, 0)
}

func (s *Select_or_valuesContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Select_or_valuesContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *Select_or_valuesContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *Select_or_valuesContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Select_or_valuesContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_or_valuesContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_HAVING, 0)
}

func (s *Select_or_valuesContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *Select_or_valuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_or_valuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_or_valuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSelect_or_values(s)
	}
}

func (s *Select_or_valuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSelect_or_values(s)
	}
}

func (p *SQLiteParser) Select_or_values() (localctx ISelect_or_valuesContext) {
	localctx = NewSelect_or_valuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SQLiteParserRULE_select_or_values)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(948)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(874)
			p.Match(SQLiteParserK_SELECT)
		}
		p.SetState(876)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
			p.SetState(875)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ALL || _la == SQLiteParserK_DISTINCT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(878)
			p.Result_column()
		}
		p.SetState(883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(879)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(880)
				p.Result_column()
			}

			p.SetState(885)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_FROM {
			{
				p.SetState(886)
				p.Match(SQLiteParserK_FROM)
			}
			p.SetState(896)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(887)
					p.Table_or_subquery()
				}
				p.SetState(892)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == SQLiteParserCOMMA {
					{
						p.SetState(888)
						p.Match(SQLiteParserCOMMA)
					}
					{
						p.SetState(889)
						p.Table_or_subquery()
					}

					p.SetState(894)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			case 2:
				{
					p.SetState(895)
					p.Join_clause()
				}

			}

		}
		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_WHERE {
			{
				p.SetState(900)
				p.Match(SQLiteParserK_WHERE)
			}
			{
				p.SetState(901)
				p.expr(0)
			}

		}
		p.SetState(918)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_GROUP {
			{
				p.SetState(904)
				p.Match(SQLiteParserK_GROUP)
			}
			{
				p.SetState(905)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(906)
				p.expr(0)
			}
			p.SetState(911)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(907)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(908)
					p.expr(0)
				}

				p.SetState(913)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(916)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_HAVING {
				{
					p.SetState(914)
					p.Match(SQLiteParserK_HAVING)
				}
				{
					p.SetState(915)
					p.expr(0)
				}

			}

		}

	case SQLiteParserK_VALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(920)
			p.Match(SQLiteParserK_VALUES)
		}
		{
			p.SetState(921)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(922)
			p.expr(0)
		}
		p.SetState(927)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(923)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(924)
				p.expr(0)
			}

			p.SetState(929)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(930)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(931)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(932)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(933)
				p.expr(0)
			}
			p.SetState(938)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(934)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(935)
					p.expr(0)
				}

				p.SetState(940)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(941)
				p.Match(SQLiteParserCLOSE_PAR)
			}

			p.SetState(947)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdate_stmtContext is an interface to support dynamic dispatch.
type IUpdate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_stmtContext differentiates from other interfaces.
	IsUpdate_stmtContext()
}

type Update_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmtContext() *Update_stmtContext {
	var p = new(Update_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt
	return p
}

func (*Update_stmtContext) IsUpdate_stmtContext() {}

func NewUpdate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmtContext {
	var p = new(Update_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt

	return p
}

func (s *Update_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmtContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *Update_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmtContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, 0)
}

func (s *Update_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Update_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Update_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmtContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *Update_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Update_stmtContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Update_stmtContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Update_stmtContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Update_stmtContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Update_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Update_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitUpdate_stmt(s)
	}
}

func (p *SQLiteParser) Update_stmt() (localctx IUpdate_stmtContext) {
	localctx = NewUpdate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SQLiteParserRULE_update_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(950)
			p.With_clause()
		}

	}
	{
		p.SetState(953)
		p.Match(SQLiteParserK_UPDATE)
	}
	p.SetState(964)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(954)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(955)
			p.Match(SQLiteParserK_ROLLBACK)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(956)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(957)
			p.Match(SQLiteParserK_ABORT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(958)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(959)
			p.Match(SQLiteParserK_REPLACE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(960)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(961)
			p.Match(SQLiteParserK_FAIL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(962)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(963)
			p.Match(SQLiteParserK_IGNORE)
		}

	}
	{
		p.SetState(966)
		p.Qualified_table_name()
	}
	{
		p.SetState(967)
		p.Match(SQLiteParserK_SET)
	}
	{
		p.SetState(968)
		p.Column_name()
	}
	{
		p.SetState(969)
		p.Match(SQLiteParserASSIGN)
	}
	{
		p.SetState(970)
		p.expr(0)
	}
	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(971)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(972)
			p.Column_name()
		}
		{
			p.SetState(973)
			p.Match(SQLiteParserASSIGN)
		}
		{
			p.SetState(974)
			p.expr(0)
		}

		p.SetState(980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(981)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(982)
			p.expr(0)
		}

	}

	return localctx
}

// IUpdate_stmt_limitedContext is an interface to support dynamic dispatch.
type IUpdate_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_stmt_limitedContext differentiates from other interfaces.
	IsUpdate_stmt_limitedContext()
}

type Update_stmt_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmt_limitedContext() *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited
	return p
}

func (*Update_stmt_limitedContext) IsUpdate_stmt_limitedContext() {}

func NewUpdate_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited

	return p
}

func (s *Update_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmt_limitedContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *Update_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualified_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmt_limitedContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, 0)
}

func (s *Update_stmt_limitedContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmt_limitedContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmt_limitedContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *Update_stmt_limitedContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Update_stmt_limitedContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Update_stmt_limitedContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Update_stmt_limitedContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Update_stmt_limitedContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Update_stmt_limitedContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Update_stmt_limitedContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *Update_stmt_limitedContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *Update_stmt_limitedContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Update_stmt_limitedContext) AllOrdering_term() []IOrdering_termContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem())
	var tst = make([]IOrdering_termContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrdering_termContext)
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Ordering_term(i int) IOrdering_termContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrdering_termContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Update_stmt_limitedContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *Update_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterUpdate_stmt_limited(s)
	}
}

func (s *Update_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitUpdate_stmt_limited(s)
	}
}

func (p *SQLiteParser) Update_stmt_limited() (localctx IUpdate_stmt_limitedContext) {
	localctx = NewUpdate_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SQLiteParserRULE_update_stmt_limited)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WITH {
		{
			p.SetState(985)
			p.With_clause()
		}

	}
	{
		p.SetState(988)
		p.Match(SQLiteParserK_UPDATE)
	}
	p.SetState(999)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(989)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(990)
			p.Match(SQLiteParserK_ROLLBACK)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(991)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(992)
			p.Match(SQLiteParserK_ABORT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(993)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(994)
			p.Match(SQLiteParserK_REPLACE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(995)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(996)
			p.Match(SQLiteParserK_FAIL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(997)
			p.Match(SQLiteParserK_OR)
		}
		{
			p.SetState(998)
			p.Match(SQLiteParserK_IGNORE)
		}

	}
	{
		p.SetState(1001)
		p.Qualified_table_name()
	}
	{
		p.SetState(1002)
		p.Match(SQLiteParserK_SET)
	}
	{
		p.SetState(1003)
		p.Column_name()
	}
	{
		p.SetState(1004)
		p.Match(SQLiteParserASSIGN)
	}
	{
		p.SetState(1005)
		p.expr(0)
	}
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1006)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(1007)
			p.Column_name()
		}
		{
			p.SetState(1008)
			p.Match(SQLiteParserASSIGN)
		}
		{
			p.SetState(1009)
			p.expr(0)
		}

		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_WHERE {
		{
			p.SetState(1016)
			p.Match(SQLiteParserK_WHERE)
		}
		{
			p.SetState(1017)
			p.expr(0)
		}

	}
	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_LIMIT || _la == SQLiteParserK_ORDER {
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ORDER {
			{
				p.SetState(1020)
				p.Match(SQLiteParserK_ORDER)
			}
			{
				p.SetState(1021)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(1022)
				p.Ordering_term()
			}
			p.SetState(1027)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1023)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1024)
					p.Ordering_term()
				}

				p.SetState(1029)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1032)
			p.Match(SQLiteParserK_LIMIT)
		}
		{
			p.SetState(1033)
			p.expr(0)
		}
		p.SetState(1036)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET {
			p.SetState(1034)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserK_OFFSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(1035)
				p.expr(0)
			}

		}

	}

	return localctx
}

// IVacuum_stmtContext is an interface to support dynamic dispatch.
type IVacuum_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_stmtContext differentiates from other interfaces.
	IsVacuum_stmtContext()
}

type Vacuum_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_stmtContext() *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt
	return p
}

func (*Vacuum_stmtContext) IsVacuum_stmtContext() {}

func NewVacuum_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt

	return p
}

func (s *Vacuum_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_stmtContext) K_VACUUM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VACUUM, 0)
}

func (s *Vacuum_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitVacuum_stmt(s)
	}
}

func (p *SQLiteParser) Vacuum_stmt() (localctx IVacuum_stmtContext) {
	localctx = NewVacuum_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SQLiteParserRULE_vacuum_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1040)
		p.Match(SQLiteParserK_VACUUM)
	}

	return localctx
}

// IColumn_defContext is an interface to support dynamic dispatch.
type IColumn_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_defContext differentiates from other interfaces.
	IsColumn_defContext()
}

type Column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_defContext() *Column_defContext {
	var p = new(Column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_def
	return p
}

func (*Column_defContext) IsColumn_defContext() {}

func NewColumn_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defContext {
	var p = new(Column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_def

	return p
}

func (s *Column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_defContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Column_defContext) AllColumn_constraint() []IColumn_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_constraintContext)
		}
	}

	return tst
}

func (s *Column_defContext) Column_constraint(i int) IColumn_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_def(s)
	}
}

func (s *Column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_def(s)
	}
}

func (p *SQLiteParser) Column_def() (localctx IColumn_defContext) {
	localctx = NewColumn_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SQLiteParserRULE_column_def)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Column_name()
	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1043)
			p.Type_name()
		}

	}
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SQLiteParserK_CHECK-44))|(1<<(SQLiteParserK_COLLATE-44))|(1<<(SQLiteParserK_CONSTRAINT-44))|(1<<(SQLiteParserK_DEFAULT-44)))) != 0) || (((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(SQLiteParserK_NOT-102))|(1<<(SQLiteParserK_NULL-102))|(1<<(SQLiteParserK_PRIMARY-102))|(1<<(SQLiteParserK_REFERENCES-102)))) != 0) || _la == SQLiteParserK_UNIQUE {
		{
			p.SetState(1046)
			p.Column_constraint()
		}

		p.SetState(1051)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_type_name
	return p
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Type_nameContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_nameContext) AllSigned_number() []ISigned_numberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem())
	var tst = make([]ISigned_numberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISigned_numberContext)
		}
	}

	return tst
}

func (s *Type_nameContext) Signed_number(i int) ISigned_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Type_nameContext) K_TEXT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEXT, 0)
}

func (s *Type_nameContext) K_INT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INT, 0)
}

func (s *Type_nameContext) K_INTEGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTEGER, 0)
}

func (s *Type_nameContext) K_CHAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHAR, 0)
}

func (s *Type_nameContext) K_REAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REAL, 0)
}

func (s *Type_nameContext) K_BLOB() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BLOB, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (p *SQLiteParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SQLiteParserRULE_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1075)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserK_ABORT, SQLiteParserK_ACTION, SQLiteParserK_ADD, SQLiteParserK_AFTER, SQLiteParserK_ALL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_AND, SQLiteParserK_AS, SQLiteParserK_ASC, SQLiteParserK_ATTACH, SQLiteParserK_AUTOINCREMENT, SQLiteParserK_BEFORE, SQLiteParserK_BEGIN, SQLiteParserK_BETWEEN, SQLiteParserK_BY, SQLiteParserK_CASCADE, SQLiteParserK_CASE, SQLiteParserK_CAST, SQLiteParserK_CHECK, SQLiteParserK_COLLATE, SQLiteParserK_COLUMN, SQLiteParserK_COMMIT, SQLiteParserK_CONFLICT, SQLiteParserK_CONSTRAINT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_CURRENT_DATE, SQLiteParserK_CURRENT_TIME, SQLiteParserK_CURRENT_TIMESTAMP, SQLiteParserK_DATABASE, SQLiteParserK_DEFAULT, SQLiteParserK_DEFERRABLE, SQLiteParserK_DEFERRED, SQLiteParserK_DELETE, SQLiteParserK_DESC, SQLiteParserK_DETACH, SQLiteParserK_DISTINCT, SQLiteParserK_DROP, SQLiteParserK_EACH, SQLiteParserK_ELSE, SQLiteParserK_END, SQLiteParserK_ESCAPE, SQLiteParserK_EXCEPT, SQLiteParserK_EXCLUSIVE, SQLiteParserK_EXISTS, SQLiteParserK_EXPLAIN, SQLiteParserK_FAIL, SQLiteParserK_FOR, SQLiteParserK_FOREIGN, SQLiteParserK_FROM, SQLiteParserK_FULL, SQLiteParserK_GLOB, SQLiteParserK_GROUP, SQLiteParserK_HAVING, SQLiteParserK_IF, SQLiteParserK_IGNORE, SQLiteParserK_IMMEDIATE, SQLiteParserK_IN, SQLiteParserK_INDEX, SQLiteParserK_INDEXED, SQLiteParserK_INITIALLY, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INSTEAD, SQLiteParserK_INTERSECT, SQLiteParserK_INTO, SQLiteParserK_IS, SQLiteParserK_ISNULL, SQLiteParserK_JOIN, SQLiteParserK_KEY, SQLiteParserK_LEFT, SQLiteParserK_LIKE, SQLiteParserK_LIMIT, SQLiteParserK_MATCH, SQLiteParserK_NATURAL, SQLiteParserK_NO, SQLiteParserK_NOT, SQLiteParserK_NOTNULL, SQLiteParserK_NULL, SQLiteParserK_OF, SQLiteParserK_OFFSET, SQLiteParserK_ON, SQLiteParserK_OR, SQLiteParserK_ORDER, SQLiteParserK_OUTER, SQLiteParserK_PLAN, SQLiteParserK_PRAGMA, SQLiteParserK_PRIMARY, SQLiteParserK_QUERY, SQLiteParserK_RAISE, SQLiteParserK_RECURSIVE, SQLiteParserK_REFERENCES, SQLiteParserK_REGEXP, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_RENAME, SQLiteParserK_REPLACE, SQLiteParserK_RESTRICT, SQLiteParserK_RIGHT, SQLiteParserK_ROLLBACK, SQLiteParserK_ROW, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_TABLE, SQLiteParserK_TEMP, SQLiteParserK_TEMPORARY, SQLiteParserK_THEN, SQLiteParserK_TO, SQLiteParserK_TRANSACTION, SQLiteParserK_TRIGGER, SQLiteParserK_UNION, SQLiteParserK_UNIQUE, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_VIEW, SQLiteParserK_VIRTUAL, SQLiteParserK_WHEN, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserK_WITHOUT, SQLiteParserIDENTIFIER, SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1053)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1052)
					p.Name()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1055)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())
		}
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1057)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(1058)
				p.Signed_number()
			}
			{
				p.SetState(1059)
				p.Match(SQLiteParserCLOSE_PAR)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1061)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(1062)
				p.Signed_number()
			}
			{
				p.SetState(1063)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1064)
				p.Signed_number()
			}
			{
				p.SetState(1065)
				p.Match(SQLiteParserCLOSE_PAR)
			}

		}

	case SQLiteParserK_TEXT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1069)
			p.Match(SQLiteParserK_TEXT)
		}

	case SQLiteParserK_INT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1070)
			p.Match(SQLiteParserK_INT)
		}

	case SQLiteParserK_INTEGER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1071)
			p.Match(SQLiteParserK_INTEGER)
		}

	case SQLiteParserK_CHAR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1072)
			p.Match(SQLiteParserK_CHAR)
		}

	case SQLiteParserK_REAL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1073)
			p.Match(SQLiteParserK_REAL)
		}

	case SQLiteParserK_BLOB:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1074)
			p.Match(SQLiteParserK_BLOB)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRIMARY, 0)
}

func (s *Column_constraintContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_KEY, 0)
}

func (s *Column_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConflict_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraintContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *Column_constraintContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *Column_constraintContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHECK, 0)
}

func (s *Column_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_constraintContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, 0)
}

func (s *Column_constraintContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *Column_constraintContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Column_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_key_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Column_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONSTRAINT, 0)
}

func (s *Column_constraintContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Column_constraintContext) Signed_number() ISigned_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Column_constraintContext) Literal_value() ILiteral_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteral_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Column_constraintContext) K_AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AUTOINCREMENT, 0)
}

func (s *Column_constraintContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Column_constraintContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *Column_constraintContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (p *SQLiteParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SQLiteParserRULE_column_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1079)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_CONSTRAINT {
		{
			p.SetState(1077)
			p.Match(SQLiteParserK_CONSTRAINT)
		}
		{
			p.SetState(1078)
			p.Name()
		}

	}
	p.SetState(1114)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_PRIMARY:
		{
			p.SetState(1081)
			p.Match(SQLiteParserK_PRIMARY)
		}
		{
			p.SetState(1082)
			p.Match(SQLiteParserK_KEY)
		}
		p.SetState(1084)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC {
			p.SetState(1083)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(1086)
			p.Conflict_clause()
		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_AUTOINCREMENT {
			{
				p.SetState(1087)
				p.Match(SQLiteParserK_AUTOINCREMENT)
			}

		}

	case SQLiteParserK_NOT, SQLiteParserK_NULL:
		p.SetState(1091)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_NOT {
			{
				p.SetState(1090)
				p.Match(SQLiteParserK_NOT)
			}

		}
		{
			p.SetState(1093)
			p.Match(SQLiteParserK_NULL)
		}
		{
			p.SetState(1094)
			p.Conflict_clause()
		}

	case SQLiteParserK_UNIQUE:
		{
			p.SetState(1095)
			p.Match(SQLiteParserK_UNIQUE)
		}
		{
			p.SetState(1096)
			p.Conflict_clause()
		}

	case SQLiteParserK_CHECK:
		{
			p.SetState(1097)
			p.Match(SQLiteParserK_CHECK)
		}
		{
			p.SetState(1098)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1099)
			p.expr(0)
		}
		{
			p.SetState(1100)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserK_DEFAULT:
		{
			p.SetState(1102)
			p.Match(SQLiteParserK_DEFAULT)
		}
		p.SetState(1109)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1103)
				p.Signed_number()
			}

		case 2:
			{
				p.SetState(1104)
				p.Literal_value()
			}

		case 3:
			{
				p.SetState(1105)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(1106)
				p.expr(0)
			}
			{
				p.SetState(1107)
				p.Match(SQLiteParserCLOSE_PAR)
			}

		}

	case SQLiteParserK_COLLATE:
		{
			p.SetState(1111)
			p.Match(SQLiteParserK_COLLATE)
		}
		{
			p.SetState(1112)
			p.Collation_name()
		}

	case SQLiteParserK_REFERENCES:
		{
			p.SetState(1113)
			p.Foreign_key_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConflict_clauseContext is an interface to support dynamic dispatch.
type IConflict_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConflict_clauseContext differentiates from other interfaces.
	IsConflict_clauseContext()
}

type Conflict_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_clauseContext() *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_conflict_clause
	return p
}

func (*Conflict_clauseContext) IsConflict_clauseContext() {}

func NewConflict_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_conflict_clause

	return p
}

func (s *Conflict_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_clauseContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Conflict_clauseContext) K_CONFLICT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONFLICT, 0)
}

func (s *Conflict_clauseContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Conflict_clauseContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Conflict_clauseContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Conflict_clauseContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Conflict_clauseContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *Conflict_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conflict_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitConflict_clause(s)
	}
}

func (p *SQLiteParser) Conflict_clause() (localctx IConflict_clauseContext) {
	localctx = NewConflict_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SQLiteParserRULE_conflict_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1119)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ON {
		{
			p.SetState(1116)
			p.Match(SQLiteParserK_ON)
		}
		{
			p.SetState(1117)
			p.Match(SQLiteParserK_CONFLICT)
		}
		p.SetState(1118)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_ABORT || _la == SQLiteParserK_FAIL || _la == SQLiteParserK_IGNORE || _la == SQLiteParserK_REPLACE || _la == SQLiteParserK_ROLLBACK) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Literal_value() ILiteral_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteral_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *ExprContext) BIND_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBIND_PARAMETER, 0)
}

func (s *ExprContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *ExprContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ExprContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *ExprContext) Unary_operator() IUnary_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) Function_name() IFunction_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_nameContext)
}

func (s *ExprContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *ExprContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CAST, 0)
}

func (s *ExprContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *ExprContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *ExprContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *ExprContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *ExprContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *ExprContext) K_CASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASE, 0)
}

func (s *ExprContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *ExprContext) AllK_WHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_WHEN)
}

func (s *ExprContext) K_WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHEN, i)
}

func (s *ExprContext) AllK_THEN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_THEN)
}

func (s *ExprContext) K_THEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_THEN, i)
}

func (s *ExprContext) K_ELSE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ELSE, 0)
}

func (s *ExprContext) Raise_function() IRaise_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRaise_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRaise_functionContext)
}

func (s *ExprContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IS, 0)
}

func (s *ExprContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IN, 0)
}

func (s *ExprContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIKE, 0)
}

func (s *ExprContext) K_GLOB() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GLOB, 0)
}

func (s *ExprContext) K_MATCH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_MATCH, 0)
}

func (s *ExprContext) K_REGEXP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REGEXP, 0)
}

func (s *ExprContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AND, 0)
}

func (s *ExprContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *ExprContext) K_BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BETWEEN, 0)
}

func (s *ExprContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *ExprContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *ExprContext) K_ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ESCAPE, 0)
}

func (s *ExprContext) K_ISNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ISNULL, 0)
}

func (s *ExprContext) K_NOTNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOTNULL, 0)
}

func (s *ExprContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (p *SQLiteParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *SQLiteParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 78
	p.EnterRecursionRule(localctx, 78, SQLiteParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1122)
			p.Literal_value()
		}

	case 2:
		{
			p.SetState(1123)
			p.Match(SQLiteParserBIND_PARAMETER)
		}

	case 3:
		p.SetState(1132)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			p.SetState(1127)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1124)
					p.Database_name()
				}
				{
					p.SetState(1125)
					p.Match(SQLiteParserDOT)
				}

			}
			{
				p.SetState(1129)
				p.Table_name()
			}
			{
				p.SetState(1130)
				p.Match(SQLiteParserDOT)
			}

		}
		{
			p.SetState(1134)
			p.Column_name()
		}

	case 4:
		{
			p.SetState(1135)
			p.Unary_operator()
		}
		{
			p.SetState(1136)
			p.expr(21)
		}

	case 5:
		{
			p.SetState(1138)
			p.Function_name()
		}
		{
			p.SetState(1139)
			p.Match(SQLiteParserOPEN_PAR)
		}
		p.SetState(1152)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserK_ABORT, SQLiteParserK_ACTION, SQLiteParserK_ADD, SQLiteParserK_AFTER, SQLiteParserK_ALL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_AND, SQLiteParserK_AS, SQLiteParserK_ASC, SQLiteParserK_ATTACH, SQLiteParserK_AUTOINCREMENT, SQLiteParserK_BEFORE, SQLiteParserK_BEGIN, SQLiteParserK_BETWEEN, SQLiteParserK_BY, SQLiteParserK_CASCADE, SQLiteParserK_CASE, SQLiteParserK_CAST, SQLiteParserK_CHECK, SQLiteParserK_COLLATE, SQLiteParserK_COLUMN, SQLiteParserK_COMMIT, SQLiteParserK_CONFLICT, SQLiteParserK_CONSTRAINT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_CURRENT_DATE, SQLiteParserK_CURRENT_TIME, SQLiteParserK_CURRENT_TIMESTAMP, SQLiteParserK_DATABASE, SQLiteParserK_DEFAULT, SQLiteParserK_DEFERRABLE, SQLiteParserK_DEFERRED, SQLiteParserK_DELETE, SQLiteParserK_DESC, SQLiteParserK_DETACH, SQLiteParserK_DISTINCT, SQLiteParserK_DROP, SQLiteParserK_EACH, SQLiteParserK_ELSE, SQLiteParserK_END, SQLiteParserK_ESCAPE, SQLiteParserK_EXCEPT, SQLiteParserK_EXCLUSIVE, SQLiteParserK_EXISTS, SQLiteParserK_EXPLAIN, SQLiteParserK_FAIL, SQLiteParserK_FOR, SQLiteParserK_FOREIGN, SQLiteParserK_FROM, SQLiteParserK_FULL, SQLiteParserK_GLOB, SQLiteParserK_GROUP, SQLiteParserK_HAVING, SQLiteParserK_IF, SQLiteParserK_IGNORE, SQLiteParserK_IMMEDIATE, SQLiteParserK_IN, SQLiteParserK_INDEX, SQLiteParserK_INDEXED, SQLiteParserK_INITIALLY, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INSTEAD, SQLiteParserK_INTERSECT, SQLiteParserK_INTO, SQLiteParserK_IS, SQLiteParserK_ISNULL, SQLiteParserK_JOIN, SQLiteParserK_KEY, SQLiteParserK_LEFT, SQLiteParserK_LIKE, SQLiteParserK_LIMIT, SQLiteParserK_MATCH, SQLiteParserK_NATURAL, SQLiteParserK_NO, SQLiteParserK_NOT, SQLiteParserK_NOTNULL, SQLiteParserK_NULL, SQLiteParserK_OF, SQLiteParserK_OFFSET, SQLiteParserK_ON, SQLiteParserK_OR, SQLiteParserK_ORDER, SQLiteParserK_OUTER, SQLiteParserK_PLAN, SQLiteParserK_PRAGMA, SQLiteParserK_PRIMARY, SQLiteParserK_QUERY, SQLiteParserK_RAISE, SQLiteParserK_RECURSIVE, SQLiteParserK_REFERENCES, SQLiteParserK_REGEXP, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_RENAME, SQLiteParserK_REPLACE, SQLiteParserK_RESTRICT, SQLiteParserK_RIGHT, SQLiteParserK_ROLLBACK, SQLiteParserK_ROW, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_TABLE, SQLiteParserK_TEMP, SQLiteParserK_TEMPORARY, SQLiteParserK_THEN, SQLiteParserK_TO, SQLiteParserK_TRANSACTION, SQLiteParserK_TRIGGER, SQLiteParserK_UNION, SQLiteParserK_UNIQUE, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_VIEW, SQLiteParserK_VIRTUAL, SQLiteParserK_WHEN, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserK_WITHOUT, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserBIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
			p.SetState(1141)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1140)
					p.Match(SQLiteParserK_DISTINCT)
				}

			}
			{
				p.SetState(1143)
				p.expr(0)
			}
			p.SetState(1148)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1144)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1145)
					p.expr(0)
				}

				p.SetState(1150)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case SQLiteParserSTAR:
			{
				p.SetState(1151)
				p.Match(SQLiteParserSTAR)
			}

		case SQLiteParserCLOSE_PAR:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1154)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 6:
		{
			p.SetState(1156)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1157)
			p.expr(0)
		}
		{
			p.SetState(1158)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 7:
		{
			p.SetState(1160)
			p.Match(SQLiteParserK_CAST)
		}
		{
			p.SetState(1161)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1162)
			p.expr(0)
		}
		{
			p.SetState(1163)
			p.Match(SQLiteParserK_AS)
		}
		{
			p.SetState(1164)
			p.Type_name()
		}
		{
			p.SetState(1165)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 8:
		p.SetState(1171)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_EXISTS || _la == SQLiteParserK_NOT {
			p.SetState(1168)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_NOT {
				{
					p.SetState(1167)
					p.Match(SQLiteParserK_NOT)
				}

			}
			{
				p.SetState(1170)
				p.Match(SQLiteParserK_EXISTS)
			}

		}
		{
			p.SetState(1173)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1174)
			p.Select_stmt()
		}
		{
			p.SetState(1175)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case 9:
		{
			p.SetState(1177)
			p.Match(SQLiteParserK_CASE)
		}
		p.SetState(1179)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1178)
				p.expr(0)
			}

		}
		p.SetState(1186)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLiteParserK_WHEN {
			{
				p.SetState(1181)
				p.Match(SQLiteParserK_WHEN)
			}
			{
				p.SetState(1182)
				p.expr(0)
			}
			{
				p.SetState(1183)
				p.Match(SQLiteParserK_THEN)
			}
			{
				p.SetState(1184)
				p.expr(0)
			}

			p.SetState(1188)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1192)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_ELSE {
			{
				p.SetState(1190)
				p.Match(SQLiteParserK_ELSE)
			}
			{
				p.SetState(1191)
				p.expr(0)
			}

		}
		{
			p.SetState(1194)
			p.Match(SQLiteParserK_END)
		}

	case 10:
		{
			p.SetState(1196)
			p.Raise_function()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1299)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1297)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1199)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1200)
					p.Match(SQLiteParserPIPE2)
				}
				{
					p.SetState(1201)
					p.expr(21)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1202)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				p.SetState(1203)
				_la = p.GetTokenStream().LA(1)

				if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserSTAR)|(1<<SQLiteParserDIV)|(1<<SQLiteParserMOD))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1204)
					p.expr(20)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1205)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				p.SetState(1206)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserPLUS || _la == SQLiteParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1207)
					p.expr(19)
				}

			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1208)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				p.SetState(1209)
				_la = p.GetTokenStream().LA(1)

				if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserLT2)|(1<<SQLiteParserGT2)|(1<<SQLiteParserAMP)|(1<<SQLiteParserPIPE))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1210)
					p.expr(18)
				}

			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1211)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				p.SetState(1212)
				_la = p.GetTokenStream().LA(1)

				if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserLT)|(1<<SQLiteParserLT_EQ)|(1<<SQLiteParserGT)|(1<<SQLiteParserGT_EQ))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1213)
					p.expr(17)
				}

			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1214)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				p.SetState(1227)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1215)
						p.Match(SQLiteParserASSIGN)
					}

				case 2:
					{
						p.SetState(1216)
						p.Match(SQLiteParserEQ)
					}

				case 3:
					{
						p.SetState(1217)
						p.Match(SQLiteParserNOT_EQ1)
					}

				case 4:
					{
						p.SetState(1218)
						p.Match(SQLiteParserNOT_EQ2)
					}

				case 5:
					{
						p.SetState(1219)
						p.Match(SQLiteParserK_IS)
					}

				case 6:
					{
						p.SetState(1220)
						p.Match(SQLiteParserK_IS)
					}
					{
						p.SetState(1221)
						p.Match(SQLiteParserK_NOT)
					}

				case 7:
					{
						p.SetState(1222)
						p.Match(SQLiteParserK_IN)
					}

				case 8:
					{
						p.SetState(1223)
						p.Match(SQLiteParserK_LIKE)
					}

				case 9:
					{
						p.SetState(1224)
						p.Match(SQLiteParserK_GLOB)
					}

				case 10:
					{
						p.SetState(1225)
						p.Match(SQLiteParserK_MATCH)
					}

				case 11:
					{
						p.SetState(1226)
						p.Match(SQLiteParserK_REGEXP)
					}

				}
				{
					p.SetState(1229)
					p.expr(16)
				}

			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1230)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1231)
					p.Match(SQLiteParserK_AND)
				}
				{
					p.SetState(1232)
					p.expr(15)
				}

			case 8:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1233)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1234)
					p.Match(SQLiteParserK_OR)
				}
				{
					p.SetState(1235)
					p.expr(14)
				}

			case 9:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1236)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1237)
					p.Match(SQLiteParserK_IS)
				}
				p.SetState(1239)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1238)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1241)
					p.expr(7)
				}

			case 10:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1242)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(1244)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserK_NOT {
					{
						p.SetState(1243)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1246)
					p.Match(SQLiteParserK_BETWEEN)
				}
				{
					p.SetState(1247)
					p.expr(0)
				}
				{
					p.SetState(1248)
					p.Match(SQLiteParserK_AND)
				}
				{
					p.SetState(1249)
					p.expr(6)
				}

			case 11:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1251)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1252)
					p.Match(SQLiteParserK_COLLATE)
				}
				{
					p.SetState(1253)
					p.Collation_name()
				}

			case 12:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1254)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				p.SetState(1256)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserK_NOT {
					{
						p.SetState(1255)
						p.Match(SQLiteParserK_NOT)
					}

				}
				p.SetState(1258)
				_la = p.GetTokenStream().LA(1)

				if !((((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(SQLiteParserK_GLOB-77))|(1<<(SQLiteParserK_LIKE-77))|(1<<(SQLiteParserK_MATCH-77)))) != 0) || _la == SQLiteParserK_REGEXP) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(1259)
					p.expr(0)
				}
				p.SetState(1262)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1260)
						p.Match(SQLiteParserK_ESCAPE)
					}
					{
						p.SetState(1261)
						p.expr(0)
					}

				}

			case 13:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1264)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				p.SetState(1269)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLiteParserK_ISNULL:
					{
						p.SetState(1265)
						p.Match(SQLiteParserK_ISNULL)
					}

				case SQLiteParserK_NOTNULL:
					{
						p.SetState(1266)
						p.Match(SQLiteParserK_NOTNULL)
					}

				case SQLiteParserK_NOT:
					{
						p.SetState(1267)
						p.Match(SQLiteParserK_NOT)
					}
					{
						p.SetState(1268)
						p.Match(SQLiteParserK_NULL)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			case 14:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1271)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(1273)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserK_NOT {
					{
						p.SetState(1272)
						p.Match(SQLiteParserK_NOT)
					}

				}
				{
					p.SetState(1275)
					p.Match(SQLiteParserK_IN)
				}
				p.SetState(1295)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1276)
						p.Match(SQLiteParserOPEN_PAR)
					}
					p.SetState(1286)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1277)
							p.Select_stmt()
						}

					} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 2 {
						{
							p.SetState(1278)
							p.expr(0)
						}
						p.SetState(1283)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						for _la == SQLiteParserCOMMA {
							{
								p.SetState(1279)
								p.Match(SQLiteParserCOMMA)
							}
							{
								p.SetState(1280)
								p.expr(0)
							}

							p.SetState(1285)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)
						}

					}
					{
						p.SetState(1288)
						p.Match(SQLiteParserCLOSE_PAR)
					}

				case 2:
					p.SetState(1292)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1289)
							p.Database_name()
						}
						{
							p.SetState(1290)
							p.Match(SQLiteParserDOT)
						}

					}
					{
						p.SetState(1294)
						p.Table_name()
					}

				}

			}

		}
		p.SetState(1301)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext())
	}

	return localctx
}

// IForeign_key_clauseContext is an interface to support dynamic dispatch.
type IForeign_key_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_key_clauseContext differentiates from other interfaces.
	IsForeign_key_clauseContext()
}

type Foreign_key_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_clauseContext() *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause
	return p
}

func (*Foreign_key_clauseContext) IsForeign_key_clauseContext() {}

func NewForeign_key_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause

	return p
}

func (s *Foreign_key_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_clauseContext) K_REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REFERENCES, 0)
}

func (s *Foreign_key_clauseContext) Foreign_table() IForeign_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_tableContext)
}

func (s *Foreign_key_clauseContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Foreign_key_clauseContext) K_DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRABLE, 0)
}

func (s *Foreign_key_clauseContext) AllK_ON() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_ON)
}

func (s *Foreign_key_clauseContext) K_ON(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, i)
}

func (s *Foreign_key_clauseContext) AllK_MATCH() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_MATCH)
}

func (s *Foreign_key_clauseContext) K_MATCH(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_MATCH, i)
}

func (s *Foreign_key_clauseContext) AllName() []INameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameContext)(nil)).Elem())
	var tst = make([]INameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameContext)
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Name(i int) INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Foreign_key_clauseContext) AllK_DELETE() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_DELETE)
}

func (s *Foreign_key_clauseContext) K_DELETE(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, i)
}

func (s *Foreign_key_clauseContext) AllK_UPDATE() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_UPDATE)
}

func (s *Foreign_key_clauseContext) K_UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, i)
}

func (s *Foreign_key_clauseContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Foreign_key_clauseContext) K_INITIALLY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INITIALLY, 0)
}

func (s *Foreign_key_clauseContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRED, 0)
}

func (s *Foreign_key_clauseContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IMMEDIATE, 0)
}

func (s *Foreign_key_clauseContext) AllK_SET() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_SET)
}

func (s *Foreign_key_clauseContext) K_SET(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, i)
}

func (s *Foreign_key_clauseContext) AllK_NULL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_NULL)
}

func (s *Foreign_key_clauseContext) K_NULL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, i)
}

func (s *Foreign_key_clauseContext) AllK_DEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_DEFAULT)
}

func (s *Foreign_key_clauseContext) K_DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, i)
}

func (s *Foreign_key_clauseContext) AllK_CASCADE() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_CASCADE)
}

func (s *Foreign_key_clauseContext) K_CASCADE(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASCADE, i)
}

func (s *Foreign_key_clauseContext) AllK_RESTRICT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_RESTRICT)
}

func (s *Foreign_key_clauseContext) K_RESTRICT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RESTRICT, i)
}

func (s *Foreign_key_clauseContext) AllK_NO() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_NO)
}

func (s *Foreign_key_clauseContext) K_NO(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NO, i)
}

func (s *Foreign_key_clauseContext) AllK_ACTION() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_ACTION)
}

func (s *Foreign_key_clauseContext) K_ACTION(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ACTION, i)
}

func (s *Foreign_key_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitForeign_key_clause(s)
	}
}

func (p *SQLiteParser) Foreign_key_clause() (localctx IForeign_key_clauseContext) {
	localctx = NewForeign_key_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SQLiteParserRULE_foreign_key_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1302)
		p.Match(SQLiteParserK_REFERENCES)
	}
	{
		p.SetState(1303)
		p.Foreign_table()
	}
	p.SetState(1315)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1304)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1305)
			p.Column_name()
		}
		p.SetState(1310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1306)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1307)
				p.Column_name()
			}

			p.SetState(1312)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1313)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}
	p.SetState(1335)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserK_MATCH || _la == SQLiteParserK_ON {
		p.SetState(1331)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_ON:
			{
				p.SetState(1317)
				p.Match(SQLiteParserK_ON)
			}
			p.SetState(1318)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_DELETE || _la == SQLiteParserK_UPDATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(1327)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1319)
					p.Match(SQLiteParserK_SET)
				}
				{
					p.SetState(1320)
					p.Match(SQLiteParserK_NULL)
				}

			case 2:
				{
					p.SetState(1321)
					p.Match(SQLiteParserK_SET)
				}
				{
					p.SetState(1322)
					p.Match(SQLiteParserK_DEFAULT)
				}

			case 3:
				{
					p.SetState(1323)
					p.Match(SQLiteParserK_CASCADE)
				}

			case 4:
				{
					p.SetState(1324)
					p.Match(SQLiteParserK_RESTRICT)
				}

			case 5:
				{
					p.SetState(1325)
					p.Match(SQLiteParserK_NO)
				}
				{
					p.SetState(1326)
					p.Match(SQLiteParserK_ACTION)
				}

			}

		case SQLiteParserK_MATCH:
			{
				p.SetState(1329)
				p.Match(SQLiteParserK_MATCH)
			}
			{
				p.SetState(1330)
				p.Name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1337)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1348)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
		p.SetState(1339)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_NOT {
			{
				p.SetState(1338)
				p.Match(SQLiteParserK_NOT)
			}

		}
		{
			p.SetState(1341)
			p.Match(SQLiteParserK_DEFERRABLE)
		}
		p.SetState(1346)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1342)
				p.Match(SQLiteParserK_INITIALLY)
			}
			{
				p.SetState(1343)
				p.Match(SQLiteParserK_DEFERRED)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1344)
				p.Match(SQLiteParserK_INITIALLY)
			}
			{
				p.SetState(1345)
				p.Match(SQLiteParserK_IMMEDIATE)
			}

		}

	}

	return localctx
}

// IRaise_functionContext is an interface to support dynamic dispatch.
type IRaise_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRaise_functionContext differentiates from other interfaces.
	IsRaise_functionContext()
}

type Raise_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_functionContext() *Raise_functionContext {
	var p = new(Raise_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_raise_function
	return p
}

func (*Raise_functionContext) IsRaise_functionContext() {}

func NewRaise_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_functionContext {
	var p = new(Raise_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_raise_function

	return p
}

func (s *Raise_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_functionContext) K_RAISE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RAISE, 0)
}

func (s *Raise_functionContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *Raise_functionContext) Error_message() IError_messageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IError_messageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IError_messageContext)
}

func (s *Raise_functionContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *Raise_functionContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *Raise_functionContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *Raise_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raise_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterRaise_function(s)
	}
}

func (s *Raise_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitRaise_function(s)
	}
}

func (p *SQLiteParser) Raise_function() (localctx IRaise_functionContext) {
	localctx = NewRaise_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SQLiteParserRULE_raise_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1350)
		p.Match(SQLiteParserK_RAISE)
	}
	{
		p.SetState(1351)
		p.Match(SQLiteParserOPEN_PAR)
	}
	p.SetState(1356)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_IGNORE:
		{
			p.SetState(1352)
			p.Match(SQLiteParserK_IGNORE)
		}

	case SQLiteParserK_ABORT, SQLiteParserK_FAIL, SQLiteParserK_ROLLBACK:
		p.SetState(1353)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_ABORT || _la == SQLiteParserK_FAIL || _la == SQLiteParserK_ROLLBACK) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(1354)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(1355)
			p.Error_message()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1358)
		p.Match(SQLiteParserCLOSE_PAR)
	}

	return localctx
}

// IIndexed_columnContext is an interface to support dynamic dispatch.
type IIndexed_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexed_columnContext differentiates from other interfaces.
	IsIndexed_columnContext()
}

type Indexed_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexed_columnContext() *Indexed_columnContext {
	var p = new(Indexed_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_indexed_column
	return p
}

func (*Indexed_columnContext) IsIndexed_columnContext() {}

func NewIndexed_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indexed_columnContext {
	var p = new(Indexed_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_indexed_column

	return p
}

func (s *Indexed_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Indexed_columnContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Indexed_columnContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *Indexed_columnContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Indexed_columnContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *Indexed_columnContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *Indexed_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indexed_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Indexed_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterIndexed_column(s)
	}
}

func (s *Indexed_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitIndexed_column(s)
	}
}

func (p *SQLiteParser) Indexed_column() (localctx IIndexed_columnContext) {
	localctx = NewIndexed_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SQLiteParserRULE_indexed_column)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1360)
		p.Column_name()
	}
	p.SetState(1363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_COLLATE {
		{
			p.SetState(1361)
			p.Match(SQLiteParserK_COLLATE)
		}
		{
			p.SetState(1362)
			p.Collation_name()
		}

	}
	p.SetState(1366)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC {
		p.SetState(1365)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) AllIndexed_column() []IIndexed_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem())
	var tst = make([]IIndexed_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexed_columnContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Indexed_column(i int) IIndexed_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexed_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Table_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConflict_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Table_constraintContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHECK, 0)
}

func (s *Table_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_constraintContext) K_FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOREIGN, 0)
}

func (s *Table_constraintContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_KEY, 0)
}

func (s *Table_constraintContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Table_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_key_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Table_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONSTRAINT, 0)
}

func (s *Table_constraintContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraintContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRIMARY, 0)
}

func (s *Table_constraintContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (p *SQLiteParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SQLiteParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1370)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_CONSTRAINT {
		{
			p.SetState(1368)
			p.Match(SQLiteParserK_CONSTRAINT)
		}
		{
			p.SetState(1369)
			p.Name()
		}

	}
	p.SetState(1408)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_PRIMARY, SQLiteParserK_UNIQUE:
		p.SetState(1375)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_PRIMARY:
			{
				p.SetState(1372)
				p.Match(SQLiteParserK_PRIMARY)
			}
			{
				p.SetState(1373)
				p.Match(SQLiteParserK_KEY)
			}

		case SQLiteParserK_UNIQUE:
			{
				p.SetState(1374)
				p.Match(SQLiteParserK_UNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1377)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1378)
			p.Indexed_column()
		}
		p.SetState(1383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1379)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1380)
				p.Indexed_column()
			}

			p.SetState(1385)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1386)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		{
			p.SetState(1387)
			p.Conflict_clause()
		}

	case SQLiteParserK_CHECK:
		{
			p.SetState(1389)
			p.Match(SQLiteParserK_CHECK)
		}
		{
			p.SetState(1390)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1391)
			p.expr(0)
		}
		{
			p.SetState(1392)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserK_FOREIGN:
		{
			p.SetState(1394)
			p.Match(SQLiteParserK_FOREIGN)
		}
		{
			p.SetState(1395)
			p.Match(SQLiteParserK_KEY)
		}
		{
			p.SetState(1396)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1397)
			p.Column_name()
		}
		p.SetState(1402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1398)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1399)
				p.Column_name()
			}

			p.SetState(1404)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1405)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		{
			p.SetState(1406)
			p.Foreign_key_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_clause
	return p
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *With_clauseContext) AllCte_table_name() []ICte_table_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICte_table_nameContext)(nil)).Elem())
	var tst = make([]ICte_table_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICte_table_nameContext)
		}
	}

	return tst
}

func (s *With_clauseContext) Cte_table_name(i int) ICte_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICte_table_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICte_table_nameContext)
}

func (s *With_clauseContext) AllK_AS() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserK_AS)
}

func (s *With_clauseContext) K_AS(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, i)
}

func (s *With_clauseContext) AllSelect_stmt() []ISelect_stmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem())
	var tst = make([]ISelect_stmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_stmtContext)
		}
	}

	return tst
}

func (s *With_clauseContext) Select_stmt(i int) ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *With_clauseContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (p *SQLiteParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SQLiteParserRULE_with_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1410)
		p.Match(SQLiteParserK_WITH)
	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1411)
			p.Match(SQLiteParserK_RECURSIVE)
		}

	}
	{
		p.SetState(1414)
		p.Cte_table_name()
	}
	{
		p.SetState(1415)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(1416)
		p.Match(SQLiteParserOPEN_PAR)
	}
	{
		p.SetState(1417)
		p.Select_stmt()
	}
	{
		p.SetState(1418)
		p.Match(SQLiteParserCLOSE_PAR)
	}
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1419)
			p.Match(SQLiteParserCOMMA)
		}
		{
			p.SetState(1420)
			p.Cte_table_name()
		}
		{
			p.SetState(1421)
			p.Match(SQLiteParserK_AS)
		}
		{
			p.SetState(1422)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1423)
			p.Select_stmt()
		}
		{
			p.SetState(1424)
			p.Match(SQLiteParserCLOSE_PAR)
		}

		p.SetState(1430)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IQualified_table_nameContext is an interface to support dynamic dispatch.
type IQualified_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualified_table_nameContext differentiates from other interfaces.
	IsQualified_table_nameContext()
}

type Qualified_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualified_table_nameContext() *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_qualified_table_name
	return p
}

func (*Qualified_table_nameContext) IsQualified_table_nameContext() {}

func NewQualified_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_qualified_table_name

	return p
}

func (s *Qualified_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualified_table_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Qualified_table_nameContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Qualified_table_nameContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEXED, 0)
}

func (s *Qualified_table_nameContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Qualified_table_nameContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Qualified_table_nameContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Qualified_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualified_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qualified_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitQualified_table_name(s)
	}
}

func (p *SQLiteParser) Qualified_table_name() (localctx IQualified_table_nameContext) {
	localctx = NewQualified_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SQLiteParserRULE_qualified_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1434)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1431)
			p.Database_name()
		}
		{
			p.SetState(1432)
			p.Match(SQLiteParserDOT)
		}

	}
	{
		p.SetState(1436)
		p.Table_name()
	}
	p.SetState(1442)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_INDEXED:
		{
			p.SetState(1437)
			p.Match(SQLiteParserK_INDEXED)
		}
		{
			p.SetState(1438)
			p.Match(SQLiteParserK_BY)
		}
		{
			p.SetState(1439)
			p.Index_name()
		}

	case SQLiteParserK_NOT:
		{
			p.SetState(1440)
			p.Match(SQLiteParserK_NOT)
		}
		{
			p.SetState(1441)
			p.Match(SQLiteParserK_INDEXED)
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXPLAIN, SQLiteParserK_INSERT, SQLiteParserK_LIMIT, SQLiteParserK_ORDER, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserUNEXPECTED_CHAR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_ordering_term
	return p
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ordering_termContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *Ordering_termContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Ordering_termContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *Ordering_termContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterOrdering_term(s)
	}
}

func (s *Ordering_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitOrdering_term(s)
	}
}

func (p *SQLiteParser) Ordering_term() (localctx IOrdering_termContext) {
	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SQLiteParserRULE_ordering_term)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1444)
		p.expr(0)
	}
	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_COLLATE {
		{
			p.SetState(1445)
			p.Match(SQLiteParserK_COLLATE)
		}
		{
			p.SetState(1446)
			p.Collation_name()
		}

	}
	p.SetState(1450)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC {
		p.SetState(1449)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserK_ASC || _la == SQLiteParserK_DESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IPragma_valueContext is an interface to support dynamic dispatch.
type IPragma_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_valueContext differentiates from other interfaces.
	IsPragma_valueContext()
}

type Pragma_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_valueContext() *Pragma_valueContext {
	var p = new(Pragma_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_value
	return p
}

func (*Pragma_valueContext) IsPragma_valueContext() {}

func NewPragma_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_valueContext {
	var p = new(Pragma_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_value

	return p
}

func (s *Pragma_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_valueContext) Signed_number() ISigned_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Pragma_valueContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Pragma_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Pragma_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterPragma_value(s)
	}
}

func (s *Pragma_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitPragma_value(s)
	}
}

func (p *SQLiteParser) Pragma_value() (localctx IPragma_valueContext) {
	localctx = NewPragma_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SQLiteParserRULE_pragma_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1455)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1452)
			p.Signed_number()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1453)
			p.Name()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1454)
			p.Match(SQLiteParserSTRING_LITERAL)
		}

	}

	return localctx
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Common_table_expressionContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Common_table_expressionContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Common_table_expressionContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (p *SQLiteParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SQLiteParserRULE_common_table_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1457)
		p.Table_name()
	}
	p.SetState(1469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1458)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1459)
			p.Column_name()
		}
		p.SetState(1464)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1460)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1461)
				p.Column_name()
			}

			p.SetState(1466)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1467)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}
	{
		p.SetState(1471)
		p.Match(SQLiteParserK_AS)
	}
	{
		p.SetState(1472)
		p.Match(SQLiteParserOPEN_PAR)
	}
	{
		p.SetState(1473)
		p.Select_stmt()
	}
	{
		p.SetState(1474)
		p.Match(SQLiteParserCLOSE_PAR)
	}

	return localctx
}

// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_result_column
	return p
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Result_columnContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Result_columnContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Result_columnContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Result_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterResult_column(s)
	}
}

func (s *Result_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitResult_column(s)
	}
}

func (p *SQLiteParser) Result_column() (localctx IResult_columnContext) {
	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SQLiteParserRULE_result_column)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1488)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1476)
			p.Match(SQLiteParserSTAR)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1477)
			p.Table_name()
		}
		{
			p.SetState(1478)
			p.Match(SQLiteParserDOT)
		}
		{
			p.SetState(1479)
			p.Match(SQLiteParserSTAR)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1481)
			p.expr(0)
		}
		p.SetState(1486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_AS || _la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL {
			p.SetState(1483)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_AS {
				{
					p.SetState(1482)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1485)
				p.Column_alias()
			}

		}

	}

	return localctx
}

// ITable_or_subqueryContext is an interface to support dynamic dispatch.
type ITable_or_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_subqueryContext differentiates from other interfaces.
	IsTable_or_subqueryContext()
}

type Table_or_subqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_subqueryContext() *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_subquery
	return p
}

func (*Table_or_subqueryContext) IsTable_or_subqueryContext() {}

func NewTable_or_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_subquery

	return p
}

func (s *Table_or_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_subqueryContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_or_subqueryContext) Database_name() IDatabase_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Table_or_subqueryContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_or_subqueryContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEXED, 0)
}

func (s *Table_or_subqueryContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Table_or_subqueryContext) Index_name() IIndex_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Table_or_subqueryContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Table_or_subqueryContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *Table_or_subqueryContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Table_or_subqueryContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Table_or_subqueryContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Table_or_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_or_subquery(s)
	}
}

func (p *SQLiteParser) Table_or_subquery() (localctx ITable_or_subqueryContext) {
	localctx = NewTable_or_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SQLiteParserRULE_table_or_subquery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1537)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1493)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1490)
				p.Database_name()
			}
			{
				p.SetState(1491)
				p.Match(SQLiteParserDOT)
			}

		}
		{
			p.SetState(1495)
			p.Table_name()
		}
		p.SetState(1500)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext()) == 1 {
			p.SetState(1497)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1496)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1499)
				p.Table_alias()
			}

		}
		p.SetState(1507)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_INDEXED:
			{
				p.SetState(1502)
				p.Match(SQLiteParserK_INDEXED)
			}
			{
				p.SetState(1503)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(1504)
				p.Index_name()
			}

		case SQLiteParserK_NOT:
			{
				p.SetState(1505)
				p.Match(SQLiteParserK_NOT)
			}
			{
				p.SetState(1506)
				p.Match(SQLiteParserK_INDEXED)
			}

		case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXCEPT, SQLiteParserK_EXPLAIN, SQLiteParserK_GROUP, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INTERSECT, SQLiteParserK_JOIN, SQLiteParserK_LEFT, SQLiteParserK_LIMIT, SQLiteParserK_NATURAL, SQLiteParserK_ON, SQLiteParserK_ORDER, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UNION, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserUNEXPECTED_CHAR:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1509)
			p.Match(SQLiteParserOPEN_PAR)
		}
		p.SetState(1519)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1510)
				p.Table_or_subquery()
			}
			p.SetState(1515)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1511)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1512)
					p.Table_or_subquery()
				}

				p.SetState(1517)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(1518)
				p.Join_clause()
			}

		}
		{
			p.SetState(1521)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(1526)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
			p.SetState(1523)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1522)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1525)
				p.Table_alias()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1528)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1529)
			p.Select_stmt()
		}
		{
			p.SetState(1530)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(1535)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
			p.SetState(1532)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1531)
					p.Match(SQLiteParserK_AS)
				}

			}
			{
				p.SetState(1534)
				p.Table_alias()
			}

		}

	}

	return localctx
}

// IJoin_clauseContext is an interface to support dynamic dispatch.
type IJoin_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_clauseContext differentiates from other interfaces.
	IsJoin_clauseContext()
}

type Join_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_clauseContext() *Join_clauseContext {
	var p = new(Join_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_clause
	return p
}

func (*Join_clauseContext) IsJoin_clauseContext() {}

func NewJoin_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_clauseContext {
	var p = new(Join_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_clause

	return p
}

func (s *Join_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_clauseContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Join_clauseContext) AllJoin_operator() []IJoin_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_operatorContext)(nil)).Elem())
	var tst = make([]IJoin_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_operatorContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_operator(i int) IJoin_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_operatorContext)
}

func (s *Join_clauseContext) AllJoin_constraint() []IJoin_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_constraintContext)(nil)).Elem())
	var tst = make([]IJoin_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_constraintContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_constraint(i int) IJoin_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_constraintContext)
}

func (s *Join_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterJoin_clause(s)
	}
}

func (s *Join_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitJoin_clause(s)
	}
}

func (p *SQLiteParser) Join_clause() (localctx IJoin_clauseContext) {
	localctx = NewJoin_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SQLiteParserRULE_join_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1539)
		p.Table_or_subquery()
	}
	p.SetState(1546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA || _la == SQLiteParserK_CROSS || (((_la-87)&-(0x1f+1)) == 0 && ((1<<uint((_la-87)))&((1<<(SQLiteParserK_INNER-87))|(1<<(SQLiteParserK_JOIN-87))|(1<<(SQLiteParserK_LEFT-87))|(1<<(SQLiteParserK_NATURAL-87)))) != 0) {
		{
			p.SetState(1540)
			p.Join_operator()
		}
		{
			p.SetState(1541)
			p.Table_or_subquery()
		}
		{
			p.SetState(1542)
			p.Join_constraint()
		}

		p.SetState(1548)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IJoin_operatorContext is an interface to support dynamic dispatch.
type IJoin_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_operatorContext differentiates from other interfaces.
	IsJoin_operatorContext()
}

type Join_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_operatorContext() *Join_operatorContext {
	var p = new(Join_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_operator
	return p
}

func (*Join_operatorContext) IsJoin_operatorContext() {}

func NewJoin_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_operatorContext {
	var p = new(Join_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_operator

	return p
}

func (s *Join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_operatorContext) K_JOIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_JOIN, 0)
}

func (s *Join_operatorContext) K_NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NATURAL, 0)
}

func (s *Join_operatorContext) K_LEFT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LEFT, 0)
}

func (s *Join_operatorContext) K_INNER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INNER, 0)
}

func (s *Join_operatorContext) K_CROSS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CROSS, 0)
}

func (s *Join_operatorContext) K_OUTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OUTER, 0)
}

func (s *Join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterJoin_operator(s)
	}
}

func (s *Join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitJoin_operator(s)
	}
}

func (p *SQLiteParser) Join_operator() (localctx IJoin_operatorContext) {
	localctx = NewJoin_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SQLiteParserRULE_join_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1562)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1549)
			p.Match(SQLiteParserCOMMA)
		}

	case SQLiteParserK_CROSS, SQLiteParserK_INNER, SQLiteParserK_JOIN, SQLiteParserK_LEFT, SQLiteParserK_NATURAL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1551)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_NATURAL {
			{
				p.SetState(1550)
				p.Match(SQLiteParserK_NATURAL)
			}

		}
		p.SetState(1559)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserK_LEFT:
			{
				p.SetState(1553)
				p.Match(SQLiteParserK_LEFT)
			}
			p.SetState(1555)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_OUTER {
				{
					p.SetState(1554)
					p.Match(SQLiteParserK_OUTER)
				}

			}

		case SQLiteParserK_INNER:
			{
				p.SetState(1557)
				p.Match(SQLiteParserK_INNER)
			}

		case SQLiteParserK_CROSS:
			{
				p.SetState(1558)
				p.Match(SQLiteParserK_CROSS)
			}

		case SQLiteParserK_JOIN:

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1561)
			p.Match(SQLiteParserK_JOIN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJoin_constraintContext is an interface to support dynamic dispatch.
type IJoin_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_constraintContext differentiates from other interfaces.
	IsJoin_constraintContext()
}

type Join_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_constraintContext() *Join_constraintContext {
	var p = new(Join_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_constraint
	return p
}

func (*Join_constraintContext) IsJoin_constraintContext() {}

func NewJoin_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_constraintContext {
	var p = new(Join_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_constraint

	return p
}

func (s *Join_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_constraintContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *Join_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Join_constraintContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_USING, 0)
}

func (s *Join_constraintContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Join_constraintContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Join_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterJoin_constraint(s)
	}
}

func (s *Join_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitJoin_constraint(s)
	}
}

func (p *SQLiteParser) Join_constraint() (localctx IJoin_constraintContext) {
	localctx = NewJoin_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SQLiteParserRULE_join_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1578)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_ON:
		{
			p.SetState(1564)
			p.Match(SQLiteParserK_ON)
		}
		{
			p.SetState(1565)
			p.expr(0)
		}

	case SQLiteParserK_USING:
		{
			p.SetState(1566)
			p.Match(SQLiteParserK_USING)
		}
		{
			p.SetState(1567)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1568)
			p.Column_name()
		}
		p.SetState(1573)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1569)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1570)
				p.Column_name()
			}

			p.SetState(1575)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1576)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_ATTACH, SQLiteParserK_BEGIN, SQLiteParserK_COMMIT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_DELETE, SQLiteParserK_DETACH, SQLiteParserK_DROP, SQLiteParserK_END, SQLiteParserK_EXCEPT, SQLiteParserK_EXPLAIN, SQLiteParserK_GROUP, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INTERSECT, SQLiteParserK_JOIN, SQLiteParserK_LEFT, SQLiteParserK_LIMIT, SQLiteParserK_NATURAL, SQLiteParserK_ORDER, SQLiteParserK_PRAGMA, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_REPLACE, SQLiteParserK_ROLLBACK, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_UNION, SQLiteParserK_UPDATE, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserUNEXPECTED_CHAR:

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_core
	return p
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SELECT, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IResult_columnContext)(nil)).Elem())
	var tst = make([]IResult_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IResult_columnContext)
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResult_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *Select_coreContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *Select_coreContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Select_coreContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_coreContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GROUP, 0)
}

func (s *Select_coreContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *Select_coreContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *Select_coreContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *Select_coreContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem())
	var tst = make([]ITable_or_subqueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_or_subqueryContext)
		}
	}

	return tst
}

func (s *Select_coreContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_or_subqueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Select_coreContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_coreContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_HAVING, 0)
}

func (s *Select_coreContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_coreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSelect_core(s)
	}
}

func (s *Select_coreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSelect_core(s)
	}
}

func (p *SQLiteParser) Select_core() (localctx ISelect_coreContext) {
	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SQLiteParserRULE_select_core)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1654)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserK_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1580)
			p.Match(SQLiteParserK_SELECT)
		}
		p.SetState(1582)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) == 1 {
			p.SetState(1581)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserK_ALL || _la == SQLiteParserK_DISTINCT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(1584)
			p.Result_column()
		}
		p.SetState(1589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1585)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1586)
				p.Result_column()
			}

			p.SetState(1591)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1604)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_FROM {
			{
				p.SetState(1592)
				p.Match(SQLiteParserK_FROM)
			}
			p.SetState(1602)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1593)
					p.Table_or_subquery()
				}
				p.SetState(1598)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == SQLiteParserCOMMA {
					{
						p.SetState(1594)
						p.Match(SQLiteParserCOMMA)
					}
					{
						p.SetState(1595)
						p.Table_or_subquery()
					}

					p.SetState(1600)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			case 2:
				{
					p.SetState(1601)
					p.Join_clause()
				}

			}

		}
		p.SetState(1608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_WHERE {
			{
				p.SetState(1606)
				p.Match(SQLiteParserK_WHERE)
			}
			{
				p.SetState(1607)
				p.expr(0)
			}

		}
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserK_GROUP {
			{
				p.SetState(1610)
				p.Match(SQLiteParserK_GROUP)
			}
			{
				p.SetState(1611)
				p.Match(SQLiteParserK_BY)
			}
			{
				p.SetState(1612)
				p.expr(0)
			}
			p.SetState(1617)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1613)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1614)
					p.expr(0)
				}

				p.SetState(1619)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(1622)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserK_HAVING {
				{
					p.SetState(1620)
					p.Match(SQLiteParserK_HAVING)
				}
				{
					p.SetState(1621)
					p.expr(0)
				}

			}

		}

	case SQLiteParserK_VALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1626)
			p.Match(SQLiteParserK_VALUES)
		}
		{
			p.SetState(1627)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1628)
			p.expr(0)
		}
		p.SetState(1633)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1629)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1630)
				p.expr(0)
			}

			p.SetState(1635)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1636)
			p.Match(SQLiteParserCLOSE_PAR)
		}
		p.SetState(1651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1637)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1638)
				p.Match(SQLiteParserOPEN_PAR)
			}
			{
				p.SetState(1639)
				p.expr(0)
			}
			p.SetState(1644)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1640)
					p.Match(SQLiteParserCOMMA)
				}
				{
					p.SetState(1641)
					p.expr(0)
				}

				p.SetState(1646)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1647)
				p.Match(SQLiteParserCLOSE_PAR)
			}

			p.SetState(1653)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_operator
	return p
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) K_UNION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNION, 0)
}

func (s *Compound_operatorContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *Compound_operatorContext) K_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTERSECT, 0)
}

func (s *Compound_operatorContext) K_EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCEPT, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCompound_operator(s)
	}
}

func (s *Compound_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCompound_operator(s)
	}
}

func (p *SQLiteParser) Compound_operator() (localctx ICompound_operatorContext) {
	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SQLiteParserRULE_compound_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1661)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1656)
			p.Match(SQLiteParserK_UNION)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1657)
			p.Match(SQLiteParserK_UNION)
		}
		{
			p.SetState(1658)
			p.Match(SQLiteParserK_ALL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1659)
			p.Match(SQLiteParserK_INTERSECT)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1660)
			p.Match(SQLiteParserK_EXCEPT)
		}

	}

	return localctx
}

// ICte_table_nameContext is an interface to support dynamic dispatch.
type ICte_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCte_table_nameContext differentiates from other interfaces.
	IsCte_table_nameContext()
}

type Cte_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCte_table_nameContext() *Cte_table_nameContext {
	var p = new(Cte_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_cte_table_name
	return p
}

func (*Cte_table_nameContext) IsCte_table_nameContext() {}

func NewCte_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cte_table_nameContext {
	var p = new(Cte_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_cte_table_name

	return p
}

func (s *Cte_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cte_table_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Cte_table_nameContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Cte_table_nameContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Cte_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cte_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cte_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCte_table_name(s)
	}
}

func (s *Cte_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCte_table_name(s)
	}
}

func (p *SQLiteParser) Cte_table_name() (localctx ICte_table_nameContext) {
	localctx = NewCte_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SQLiteParserRULE_cte_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1663)
		p.Table_name()
	}
	p.SetState(1675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1664)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1665)
			p.Column_name()
		}
		p.SetState(1670)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1666)
				p.Match(SQLiteParserCOMMA)
			}
			{
				p.SetState(1667)
				p.Column_name()
			}

			p.SetState(1672)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1673)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	}

	return localctx
}

// ISigned_numberContext is an interface to support dynamic dispatch.
type ISigned_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSigned_numberContext differentiates from other interfaces.
	IsSigned_numberContext()
}

type Signed_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numberContext() *Signed_numberContext {
	var p = new(Signed_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_signed_number
	return p
}

func (*Signed_numberContext) IsSigned_numberContext() {}

func NewSigned_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numberContext {
	var p = new(Signed_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_signed_number

	return p
}

func (s *Signed_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numberContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Signed_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSigned_number(s)
	}
}

func (s *Signed_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSigned_number(s)
	}
}

func (p *SQLiteParser) Signed_number() (localctx ISigned_numberContext) {
	localctx = NewSigned_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SQLiteParserRULE_signed_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1678)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserPLUS || _la == SQLiteParserMINUS {
		p.SetState(1677)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserPLUS || _la == SQLiteParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(1680)
		p.Match(SQLiteParserNUMERIC_LITERAL)
	}

	return localctx
}

// ILiteral_valueContext is an interface to support dynamic dispatch.
type ILiteral_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteral_valueContext differentiates from other interfaces.
	IsLiteral_valueContext()
}

type Literal_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteral_valueContext() *Literal_valueContext {
	var p = new(Literal_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_literal_value
	return p
}

func (*Literal_valueContext) IsLiteral_valueContext() {}

func NewLiteral_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Literal_valueContext {
	var p = new(Literal_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_literal_value

	return p
}

func (s *Literal_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Literal_valueContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Literal_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Literal_valueContext) BLOB_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBLOB_LITERAL, 0)
}

func (s *Literal_valueContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *Literal_valueContext) K_CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIME, 0)
}

func (s *Literal_valueContext) K_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_DATE, 0)
}

func (s *Literal_valueContext) K_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIMESTAMP, 0)
}

func (s *Literal_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Literal_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterLiteral_value(s)
	}
}

func (s *Literal_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitLiteral_value(s)
	}
}

func (p *SQLiteParser) Literal_value() (localctx ILiteral_valueContext) {
	localctx = NewLiteral_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SQLiteParserRULE_literal_value)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1682)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(SQLiteParserK_CURRENT_DATE-52))|(1<<(SQLiteParserK_CURRENT_TIME-52))|(1<<(SQLiteParserK_CURRENT_TIMESTAMP-52)))) != 0) || _la == SQLiteParserK_NULL || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(SQLiteParserNUMERIC_LITERAL-156))|(1<<(SQLiteParserSTRING_LITERAL-156))|(1<<(SQLiteParserBLOB_LITERAL-156)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_unary_operator
	return p
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (p *SQLiteParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SQLiteParserRULE_unary_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1684)
	_la = p.GetTokenStream().LA(1)

	if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLiteParserPLUS)|(1<<SQLiteParserMINUS)|(1<<SQLiteParserTILDE))) != 0) || _la == SQLiteParserK_NOT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IError_messageContext is an interface to support dynamic dispatch.
type IError_messageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsError_messageContext differentiates from other interfaces.
	IsError_messageContext()
}

type Error_messageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyError_messageContext() *Error_messageContext {
	var p = new(Error_messageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_error_message
	return p
}

func (*Error_messageContext) IsError_messageContext() {}

func NewError_messageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Error_messageContext {
	var p = new(Error_messageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_error_message

	return p
}

func (s *Error_messageContext) GetParser() antlr.Parser { return s.parser }

func (s *Error_messageContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Error_messageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Error_messageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Error_messageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterError_message(s)
	}
}

func (s *Error_messageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitError_message(s)
	}
}

func (p *SQLiteParser) Error_message() (localctx IError_messageContext) {
	localctx = NewError_messageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SQLiteParserRULE_error_message)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1686)
		p.Match(SQLiteParserSTRING_LITERAL)
	}

	return localctx
}

// IModule_argumentContext is an interface to support dynamic dispatch.
type IModule_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_argumentContext differentiates from other interfaces.
	IsModule_argumentContext()
}

type Module_argumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_argumentContext() *Module_argumentContext {
	var p = new(Module_argumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_argument
	return p
}

func (*Module_argumentContext) IsModule_argumentContext() {}

func NewModule_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_argumentContext {
	var p = new(Module_argumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_argument

	return p
}

func (s *Module_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_argumentContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Module_argumentContext) Column_def() IColumn_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Module_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterModule_argument(s)
	}
}

func (s *Module_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitModule_argument(s)
	}
}

func (p *SQLiteParser) Module_argument() (localctx IModule_argumentContext) {
	localctx = NewModule_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SQLiteParserRULE_module_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1690)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1688)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1689)
			p.Column_def()
		}

	}

	return localctx
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Column_aliasContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (p *SQLiteParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SQLiteParserRULE_column_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1692)
	_la = p.GetTokenStream().LA(1)

	if !(_la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_keyword
	return p
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ABORT, 0)
}

func (s *KeywordContext) K_ACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ACTION, 0)
}

func (s *KeywordContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ADD, 0)
}

func (s *KeywordContext) K_AFTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AFTER, 0)
}

func (s *KeywordContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALL, 0)
}

func (s *KeywordContext) K_ALTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ALTER, 0)
}

func (s *KeywordContext) K_ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ANALYZE, 0)
}

func (s *KeywordContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AND, 0)
}

func (s *KeywordContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AS, 0)
}

func (s *KeywordContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ASC, 0)
}

func (s *KeywordContext) K_ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ATTACH, 0)
}

func (s *KeywordContext) K_AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_AUTOINCREMENT, 0)
}

func (s *KeywordContext) K_BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEFORE, 0)
}

func (s *KeywordContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BEGIN, 0)
}

func (s *KeywordContext) K_BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BETWEEN, 0)
}

func (s *KeywordContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_BY, 0)
}

func (s *KeywordContext) K_CASCADE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASCADE, 0)
}

func (s *KeywordContext) K_CASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CASE, 0)
}

func (s *KeywordContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CAST, 0)
}

func (s *KeywordContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CHECK, 0)
}

func (s *KeywordContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLLATE, 0)
}

func (s *KeywordContext) K_COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COLUMN, 0)
}

func (s *KeywordContext) K_COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_COMMIT, 0)
}

func (s *KeywordContext) K_CONFLICT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONFLICT, 0)
}

func (s *KeywordContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CONSTRAINT, 0)
}

func (s *KeywordContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CREATE, 0)
}

func (s *KeywordContext) K_CROSS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CROSS, 0)
}

func (s *KeywordContext) K_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_DATE, 0)
}

func (s *KeywordContext) K_CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIME, 0)
}

func (s *KeywordContext) K_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_CURRENT_TIMESTAMP, 0)
}

func (s *KeywordContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DATABASE, 0)
}

func (s *KeywordContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFAULT, 0)
}

func (s *KeywordContext) K_DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRABLE, 0)
}

func (s *KeywordContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DEFERRED, 0)
}

func (s *KeywordContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DELETE, 0)
}

func (s *KeywordContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DESC, 0)
}

func (s *KeywordContext) K_DETACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DETACH, 0)
}

func (s *KeywordContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DISTINCT, 0)
}

func (s *KeywordContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_DROP, 0)
}

func (s *KeywordContext) K_EACH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EACH, 0)
}

func (s *KeywordContext) K_ELSE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ELSE, 0)
}

func (s *KeywordContext) K_END() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_END, 0)
}

func (s *KeywordContext) K_ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ESCAPE, 0)
}

func (s *KeywordContext) K_EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCEPT, 0)
}

func (s *KeywordContext) K_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXCLUSIVE, 0)
}

func (s *KeywordContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXISTS, 0)
}

func (s *KeywordContext) K_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_EXPLAIN, 0)
}

func (s *KeywordContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FAIL, 0)
}

func (s *KeywordContext) K_FOR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOR, 0)
}

func (s *KeywordContext) K_FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FOREIGN, 0)
}

func (s *KeywordContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FROM, 0)
}

func (s *KeywordContext) K_FULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_FULL, 0)
}

func (s *KeywordContext) K_GLOB() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GLOB, 0)
}

func (s *KeywordContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_GROUP, 0)
}

func (s *KeywordContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_HAVING, 0)
}

func (s *KeywordContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IF, 0)
}

func (s *KeywordContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IGNORE, 0)
}

func (s *KeywordContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IMMEDIATE, 0)
}

func (s *KeywordContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IN, 0)
}

func (s *KeywordContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEX, 0)
}

func (s *KeywordContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INDEXED, 0)
}

func (s *KeywordContext) K_INITIALLY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INITIALLY, 0)
}

func (s *KeywordContext) K_INNER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INNER, 0)
}

func (s *KeywordContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSERT, 0)
}

func (s *KeywordContext) K_INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INSTEAD, 0)
}

func (s *KeywordContext) K_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTERSECT, 0)
}

func (s *KeywordContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_INTO, 0)
}

func (s *KeywordContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_IS, 0)
}

func (s *KeywordContext) K_ISNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ISNULL, 0)
}

func (s *KeywordContext) K_JOIN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_JOIN, 0)
}

func (s *KeywordContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_KEY, 0)
}

func (s *KeywordContext) K_LEFT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LEFT, 0)
}

func (s *KeywordContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIKE, 0)
}

func (s *KeywordContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_LIMIT, 0)
}

func (s *KeywordContext) K_MATCH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_MATCH, 0)
}

func (s *KeywordContext) K_NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NATURAL, 0)
}

func (s *KeywordContext) K_NO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NO, 0)
}

func (s *KeywordContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOT, 0)
}

func (s *KeywordContext) K_NOTNULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NOTNULL, 0)
}

func (s *KeywordContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_NULL, 0)
}

func (s *KeywordContext) K_OF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OF, 0)
}

func (s *KeywordContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OFFSET, 0)
}

func (s *KeywordContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ON, 0)
}

func (s *KeywordContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OR, 0)
}

func (s *KeywordContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ORDER, 0)
}

func (s *KeywordContext) K_OUTER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_OUTER, 0)
}

func (s *KeywordContext) K_PLAN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PLAN, 0)
}

func (s *KeywordContext) K_PRAGMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRAGMA, 0)
}

func (s *KeywordContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_PRIMARY, 0)
}

func (s *KeywordContext) K_QUERY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_QUERY, 0)
}

func (s *KeywordContext) K_RAISE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RAISE, 0)
}

func (s *KeywordContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RECURSIVE, 0)
}

func (s *KeywordContext) K_REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REFERENCES, 0)
}

func (s *KeywordContext) K_REGEXP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REGEXP, 0)
}

func (s *KeywordContext) K_REINDEX() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REINDEX, 0)
}

func (s *KeywordContext) K_RELEASE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RELEASE, 0)
}

func (s *KeywordContext) K_RENAME() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RENAME, 0)
}

func (s *KeywordContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_REPLACE, 0)
}

func (s *KeywordContext) K_RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RESTRICT, 0)
}

func (s *KeywordContext) K_RIGHT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_RIGHT, 0)
}

func (s *KeywordContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROLLBACK, 0)
}

func (s *KeywordContext) K_ROW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_ROW, 0)
}

func (s *KeywordContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SAVEPOINT, 0)
}

func (s *KeywordContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SELECT, 0)
}

func (s *KeywordContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_SET, 0)
}

func (s *KeywordContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TABLE, 0)
}

func (s *KeywordContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMP, 0)
}

func (s *KeywordContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TEMPORARY, 0)
}

func (s *KeywordContext) K_THEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_THEN, 0)
}

func (s *KeywordContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TO, 0)
}

func (s *KeywordContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRANSACTION, 0)
}

func (s *KeywordContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_TRIGGER, 0)
}

func (s *KeywordContext) K_UNION() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNION, 0)
}

func (s *KeywordContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UNIQUE, 0)
}

func (s *KeywordContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_UPDATE, 0)
}

func (s *KeywordContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_USING, 0)
}

func (s *KeywordContext) K_VACUUM() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VACUUM, 0)
}

func (s *KeywordContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VALUES, 0)
}

func (s *KeywordContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIEW, 0)
}

func (s *KeywordContext) K_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_VIRTUAL, 0)
}

func (s *KeywordContext) K_WHEN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHEN, 0)
}

func (s *KeywordContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WHERE, 0)
}

func (s *KeywordContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITH, 0)
}

func (s *KeywordContext) K_WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserK_WITHOUT, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterKeyword(s)
	}
}

func (s *KeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitKeyword(s)
	}
}

func (p *SQLiteParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SQLiteParserRULE_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1694)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(SQLiteParserK_ABORT-25))|(1<<(SQLiteParserK_ACTION-25))|(1<<(SQLiteParserK_ADD-25))|(1<<(SQLiteParserK_AFTER-25))|(1<<(SQLiteParserK_ALL-25))|(1<<(SQLiteParserK_ALTER-25))|(1<<(SQLiteParserK_ANALYZE-25))|(1<<(SQLiteParserK_AND-25))|(1<<(SQLiteParserK_AS-25))|(1<<(SQLiteParserK_ASC-25))|(1<<(SQLiteParserK_ATTACH-25))|(1<<(SQLiteParserK_AUTOINCREMENT-25))|(1<<(SQLiteParserK_BEFORE-25))|(1<<(SQLiteParserK_BEGIN-25))|(1<<(SQLiteParserK_BETWEEN-25))|(1<<(SQLiteParserK_BY-25))|(1<<(SQLiteParserK_CASCADE-25))|(1<<(SQLiteParserK_CASE-25))|(1<<(SQLiteParserK_CAST-25))|(1<<(SQLiteParserK_CHECK-25))|(1<<(SQLiteParserK_COLLATE-25))|(1<<(SQLiteParserK_COLUMN-25))|(1<<(SQLiteParserK_COMMIT-25))|(1<<(SQLiteParserK_CONFLICT-25))|(1<<(SQLiteParserK_CONSTRAINT-25))|(1<<(SQLiteParserK_CREATE-25))|(1<<(SQLiteParserK_CROSS-25))|(1<<(SQLiteParserK_CURRENT_DATE-25))|(1<<(SQLiteParserK_CURRENT_TIME-25))|(1<<(SQLiteParserK_CURRENT_TIMESTAMP-25))|(1<<(SQLiteParserK_DATABASE-25))|(1<<(SQLiteParserK_DEFAULT-25)))) != 0) || (((_la-57)&-(0x1f+1)) == 0 && ((1<<uint((_la-57)))&((1<<(SQLiteParserK_DEFERRABLE-57))|(1<<(SQLiteParserK_DEFERRED-57))|(1<<(SQLiteParserK_DELETE-57))|(1<<(SQLiteParserK_DESC-57))|(1<<(SQLiteParserK_DETACH-57))|(1<<(SQLiteParserK_DISTINCT-57))|(1<<(SQLiteParserK_DROP-57))|(1<<(SQLiteParserK_EACH-57))|(1<<(SQLiteParserK_ELSE-57))|(1<<(SQLiteParserK_END-57))|(1<<(SQLiteParserK_ESCAPE-57))|(1<<(SQLiteParserK_EXCEPT-57))|(1<<(SQLiteParserK_EXCLUSIVE-57))|(1<<(SQLiteParserK_EXISTS-57))|(1<<(SQLiteParserK_EXPLAIN-57))|(1<<(SQLiteParserK_FAIL-57))|(1<<(SQLiteParserK_FOR-57))|(1<<(SQLiteParserK_FOREIGN-57))|(1<<(SQLiteParserK_FROM-57))|(1<<(SQLiteParserK_FULL-57))|(1<<(SQLiteParserK_GLOB-57))|(1<<(SQLiteParserK_GROUP-57))|(1<<(SQLiteParserK_HAVING-57))|(1<<(SQLiteParserK_IF-57))|(1<<(SQLiteParserK_IGNORE-57))|(1<<(SQLiteParserK_IMMEDIATE-57))|(1<<(SQLiteParserK_IN-57))|(1<<(SQLiteParserK_INDEX-57))|(1<<(SQLiteParserK_INDEXED-57))|(1<<(SQLiteParserK_INITIALLY-57))|(1<<(SQLiteParserK_INNER-57))|(1<<(SQLiteParserK_INSERT-57)))) != 0) || (((_la-89)&-(0x1f+1)) == 0 && ((1<<uint((_la-89)))&((1<<(SQLiteParserK_INSTEAD-89))|(1<<(SQLiteParserK_INTERSECT-89))|(1<<(SQLiteParserK_INTO-89))|(1<<(SQLiteParserK_IS-89))|(1<<(SQLiteParserK_ISNULL-89))|(1<<(SQLiteParserK_JOIN-89))|(1<<(SQLiteParserK_KEY-89))|(1<<(SQLiteParserK_LEFT-89))|(1<<(SQLiteParserK_LIKE-89))|(1<<(SQLiteParserK_LIMIT-89))|(1<<(SQLiteParserK_MATCH-89))|(1<<(SQLiteParserK_NATURAL-89))|(1<<(SQLiteParserK_NO-89))|(1<<(SQLiteParserK_NOT-89))|(1<<(SQLiteParserK_NOTNULL-89))|(1<<(SQLiteParserK_NULL-89))|(1<<(SQLiteParserK_OF-89))|(1<<(SQLiteParserK_OFFSET-89))|(1<<(SQLiteParserK_ON-89))|(1<<(SQLiteParserK_OR-89))|(1<<(SQLiteParserK_ORDER-89))|(1<<(SQLiteParserK_OUTER-89))|(1<<(SQLiteParserK_PLAN-89))|(1<<(SQLiteParserK_PRAGMA-89))|(1<<(SQLiteParserK_PRIMARY-89))|(1<<(SQLiteParserK_QUERY-89))|(1<<(SQLiteParserK_RAISE-89))|(1<<(SQLiteParserK_RECURSIVE-89))|(1<<(SQLiteParserK_REFERENCES-89))|(1<<(SQLiteParserK_REGEXP-89))|(1<<(SQLiteParserK_REINDEX-89))|(1<<(SQLiteParserK_RELEASE-89)))) != 0) || (((_la-121)&-(0x1f+1)) == 0 && ((1<<uint((_la-121)))&((1<<(SQLiteParserK_RENAME-121))|(1<<(SQLiteParserK_REPLACE-121))|(1<<(SQLiteParserK_RESTRICT-121))|(1<<(SQLiteParserK_RIGHT-121))|(1<<(SQLiteParserK_ROLLBACK-121))|(1<<(SQLiteParserK_ROW-121))|(1<<(SQLiteParserK_SAVEPOINT-121))|(1<<(SQLiteParserK_SELECT-121))|(1<<(SQLiteParserK_SET-121))|(1<<(SQLiteParserK_TABLE-121))|(1<<(SQLiteParserK_TEMP-121))|(1<<(SQLiteParserK_TEMPORARY-121))|(1<<(SQLiteParserK_THEN-121))|(1<<(SQLiteParserK_TO-121))|(1<<(SQLiteParserK_TRANSACTION-121))|(1<<(SQLiteParserK_TRIGGER-121))|(1<<(SQLiteParserK_UNION-121))|(1<<(SQLiteParserK_UNIQUE-121))|(1<<(SQLiteParserK_UPDATE-121))|(1<<(SQLiteParserK_USING-121))|(1<<(SQLiteParserK_VACUUM-121))|(1<<(SQLiteParserK_VALUES-121))|(1<<(SQLiteParserK_VIEW-121))|(1<<(SQLiteParserK_VIRTUAL-121))|(1<<(SQLiteParserK_WHEN-121))|(1<<(SQLiteParserK_WHERE-121))|(1<<(SQLiteParserK_WITH-121))|(1<<(SQLiteParserK_WITHOUT-121)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitName(s)
	}
}

func (p *SQLiteParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SQLiteParserRULE_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1696)
		p.Any_name()
	}

	return localctx
}

// IFunction_nameContext is an interface to support dynamic dispatch.
type IFunction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_nameContext differentiates from other interfaces.
	IsFunction_nameContext()
}

type Function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_nameContext() *Function_nameContext {
	var p = new(Function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_function_name
	return p
}

func (*Function_nameContext) IsFunction_nameContext() {}

func NewFunction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_nameContext {
	var p = new(Function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_function_name

	return p
}

func (s *Function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterFunction_name(s)
	}
}

func (s *Function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitFunction_name(s)
	}
}

func (p *SQLiteParser) Function_name() (localctx IFunction_nameContext) {
	localctx = NewFunction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SQLiteParserRULE_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1698)
		p.Any_name()
	}

	return localctx
}

// IDatabase_nameContext is an interface to support dynamic dispatch.
type IDatabase_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_nameContext differentiates from other interfaces.
	IsDatabase_nameContext()
}

type Database_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_nameContext() *Database_nameContext {
	var p = new(Database_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_database_name
	return p
}

func (*Database_nameContext) IsDatabase_nameContext() {}

func NewDatabase_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_nameContext {
	var p = new(Database_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_database_name

	return p
}

func (s *Database_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Database_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterDatabase_name(s)
	}
}

func (s *Database_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitDatabase_name(s)
	}
}

func (p *SQLiteParser) Database_name() (localctx IDatabase_nameContext) {
	localctx = NewDatabase_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SQLiteParserRULE_database_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1700)
		p.Any_name()
	}

	return localctx
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (p *SQLiteParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SQLiteParserRULE_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1702)
		p.Any_name()
	}

	return localctx
}

// ITable_or_index_nameContext is an interface to support dynamic dispatch.
type ITable_or_index_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_index_nameContext differentiates from other interfaces.
	IsTable_or_index_nameContext()
}

type Table_or_index_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_index_nameContext() *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_index_name
	return p
}

func (*Table_or_index_nameContext) IsTable_or_index_nameContext() {}

func NewTable_or_index_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_index_name

	return p
}

func (s *Table_or_index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_index_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_or_index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_or_index_name(s)
	}
}

func (p *SQLiteParser) Table_or_index_name() (localctx ITable_or_index_nameContext) {
	localctx = NewTable_or_index_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SQLiteParserRULE_table_or_index_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1704)
		p.Any_name()
	}

	return localctx
}

// INew_table_nameContext is an interface to support dynamic dispatch.
type INew_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNew_table_nameContext differentiates from other interfaces.
	IsNew_table_nameContext()
}

type New_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_table_nameContext() *New_table_nameContext {
	var p = new(New_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_new_table_name
	return p
}

func (*New_table_nameContext) IsNew_table_nameContext() {}

func NewNew_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_table_nameContext {
	var p = new(New_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_new_table_name

	return p
}

func (s *New_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *New_table_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *New_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterNew_table_name(s)
	}
}

func (s *New_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitNew_table_name(s)
	}
}

func (p *SQLiteParser) New_table_name() (localctx INew_table_nameContext) {
	localctx = NewNew_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SQLiteParserRULE_new_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1706)
		p.Any_name()
	}

	return localctx
}

// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name
	return p
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (p *SQLiteParser) Column_name() (localctx IColumn_nameContext) {
	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SQLiteParserRULE_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1708)
		p.Any_name()
	}

	return localctx
}

// ICollation_nameContext is an interface to support dynamic dispatch.
type ICollation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollation_nameContext differentiates from other interfaces.
	IsCollation_nameContext()
}

type Collation_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_nameContext() *Collation_nameContext {
	var p = new(Collation_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_collation_name
	return p
}

func (*Collation_nameContext) IsCollation_nameContext() {}

func NewCollation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_nameContext {
	var p = new(Collation_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_collation_name

	return p
}

func (s *Collation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Collation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterCollation_name(s)
	}
}

func (s *Collation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitCollation_name(s)
	}
}

func (p *SQLiteParser) Collation_name() (localctx ICollation_nameContext) {
	localctx = NewCollation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SQLiteParserRULE_collation_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1710)
		p.Any_name()
	}

	return localctx
}

// IForeign_tableContext is an interface to support dynamic dispatch.
type IForeign_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_tableContext differentiates from other interfaces.
	IsForeign_tableContext()
}

type Foreign_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_tableContext() *Foreign_tableContext {
	var p = new(Foreign_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_table
	return p
}

func (*Foreign_tableContext) IsForeign_tableContext() {}

func NewForeign_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_tableContext {
	var p = new(Foreign_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_table

	return p
}

func (s *Foreign_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_tableContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Foreign_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterForeign_table(s)
	}
}

func (s *Foreign_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitForeign_table(s)
	}
}

func (p *SQLiteParser) Foreign_table() (localctx IForeign_tableContext) {
	localctx = NewForeign_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SQLiteParserRULE_foreign_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1712)
		p.Any_name()
	}

	return localctx
}

// IIndex_nameContext is an interface to support dynamic dispatch.
type IIndex_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_nameContext differentiates from other interfaces.
	IsIndex_nameContext()
}

type Index_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_nameContext() *Index_nameContext {
	var p = new(Index_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_index_name
	return p
}

func (*Index_nameContext) IsIndex_nameContext() {}

func NewIndex_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_nameContext {
	var p = new(Index_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_index_name

	return p
}

func (s *Index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterIndex_name(s)
	}
}

func (s *Index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitIndex_name(s)
	}
}

func (p *SQLiteParser) Index_name() (localctx IIndex_nameContext) {
	localctx = NewIndex_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SQLiteParserRULE_index_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1714)
		p.Any_name()
	}

	return localctx
}

// ITrigger_nameContext is an interface to support dynamic dispatch.
type ITrigger_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrigger_nameContext differentiates from other interfaces.
	IsTrigger_nameContext()
}

type Trigger_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_nameContext() *Trigger_nameContext {
	var p = new(Trigger_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_trigger_name
	return p
}

func (*Trigger_nameContext) IsTrigger_nameContext() {}

func NewTrigger_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_nameContext {
	var p = new(Trigger_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_trigger_name

	return p
}

func (s *Trigger_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Trigger_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trigger_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTrigger_name(s)
	}
}

func (s *Trigger_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTrigger_name(s)
	}
}

func (p *SQLiteParser) Trigger_name() (localctx ITrigger_nameContext) {
	localctx = NewTrigger_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SQLiteParserRULE_trigger_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1716)
		p.Any_name()
	}

	return localctx
}

// IView_nameContext is an interface to support dynamic dispatch.
type IView_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_nameContext differentiates from other interfaces.
	IsView_nameContext()
}

type View_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_nameContext() *View_nameContext {
	var p = new(View_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_view_name
	return p
}

func (*View_nameContext) IsView_nameContext() {}

func NewView_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_nameContext {
	var p = new(View_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_view_name

	return p
}

func (s *View_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *View_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *View_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterView_name(s)
	}
}

func (s *View_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitView_name(s)
	}
}

func (p *SQLiteParser) View_name() (localctx IView_nameContext) {
	localctx = NewView_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SQLiteParserRULE_view_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1718)
		p.Any_name()
	}

	return localctx
}

// IModule_nameContext is an interface to support dynamic dispatch.
type IModule_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_nameContext differentiates from other interfaces.
	IsModule_nameContext()
}

type Module_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_nameContext() *Module_nameContext {
	var p = new(Module_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_name
	return p
}

func (*Module_nameContext) IsModule_nameContext() {}

func NewModule_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_nameContext {
	var p = new(Module_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_name

	return p
}

func (s *Module_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Module_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterModule_name(s)
	}
}

func (s *Module_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitModule_name(s)
	}
}

func (p *SQLiteParser) Module_name() (localctx IModule_nameContext) {
	localctx = NewModule_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SQLiteParserRULE_module_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1720)
		p.Any_name()
	}

	return localctx
}

// IPragma_nameContext is an interface to support dynamic dispatch.
type IPragma_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_nameContext differentiates from other interfaces.
	IsPragma_nameContext()
}

type Pragma_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_nameContext() *Pragma_nameContext {
	var p = new(Pragma_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_name
	return p
}

func (*Pragma_nameContext) IsPragma_nameContext() {}

func NewPragma_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_nameContext {
	var p = new(Pragma_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_name

	return p
}

func (s *Pragma_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Pragma_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterPragma_name(s)
	}
}

func (s *Pragma_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitPragma_name(s)
	}
}

func (p *SQLiteParser) Pragma_name() (localctx IPragma_nameContext) {
	localctx = NewPragma_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SQLiteParserRULE_pragma_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1722)
		p.Any_name()
	}

	return localctx
}

// ISavepoint_nameContext is an interface to support dynamic dispatch.
type ISavepoint_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_nameContext differentiates from other interfaces.
	IsSavepoint_nameContext()
}

type Savepoint_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_nameContext() *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_name
	return p
}

func (*Savepoint_nameContext) IsSavepoint_nameContext() {}

func NewSavepoint_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_name

	return p
}

func (s *Savepoint_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Savepoint_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitSavepoint_name(s)
	}
}

func (p *SQLiteParser) Savepoint_name() (localctx ISavepoint_nameContext) {
	localctx = NewSavepoint_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SQLiteParserRULE_savepoint_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1724)
		p.Any_name()
	}

	return localctx
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_alias
	return p
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (p *SQLiteParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SQLiteParserRULE_table_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1726)
		p.Any_name()
	}

	return localctx
}

// ITransaction_nameContext is an interface to support dynamic dispatch.
type ITransaction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_nameContext differentiates from other interfaces.
	IsTransaction_nameContext()
}

type Transaction_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_nameContext() *Transaction_nameContext {
	var p = new(Transaction_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_transaction_name
	return p
}

func (*Transaction_nameContext) IsTransaction_nameContext() {}

func NewTransaction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_nameContext {
	var p = new(Transaction_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_transaction_name

	return p
}

func (s *Transaction_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Transaction_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterTransaction_name(s)
	}
}

func (s *Transaction_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitTransaction_name(s)
	}
}

func (p *SQLiteParser) Transaction_name() (localctx ITransaction_nameContext) {
	localctx = NewTransaction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SQLiteParserRULE_transaction_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1728)
		p.Any_name()
	}

	return localctx
}

// IAny_nameContext is an interface to support dynamic dispatch.
type IAny_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_nameContext differentiates from other interfaces.
	IsAny_nameContext()
}

type Any_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_nameContext() *Any_nameContext {
	var p = new(Any_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLiteParserRULE_any_name
	return p
}

func (*Any_nameContext) IsAny_nameContext() {}

func NewAny_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_nameContext {
	var p = new(Any_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_any_name

	return p
}

func (s *Any_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_nameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Any_nameContext) Keyword() IKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *Any_nameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Any_nameContext) Any_name() IAny_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Any_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.EnterAny_name(s)
	}
}

func (s *Any_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteListener); ok {
		listenerT.ExitAny_name(s)
	}
}

func (p *SQLiteParser) Any_name() (localctx IAny_nameContext) {
	localctx = NewAny_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SQLiteParserRULE_any_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1737)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1730)
			p.Match(SQLiteParserIDENTIFIER)
		}

	case SQLiteParserK_ABORT, SQLiteParserK_ACTION, SQLiteParserK_ADD, SQLiteParserK_AFTER, SQLiteParserK_ALL, SQLiteParserK_ALTER, SQLiteParserK_ANALYZE, SQLiteParserK_AND, SQLiteParserK_AS, SQLiteParserK_ASC, SQLiteParserK_ATTACH, SQLiteParserK_AUTOINCREMENT, SQLiteParserK_BEFORE, SQLiteParserK_BEGIN, SQLiteParserK_BETWEEN, SQLiteParserK_BY, SQLiteParserK_CASCADE, SQLiteParserK_CASE, SQLiteParserK_CAST, SQLiteParserK_CHECK, SQLiteParserK_COLLATE, SQLiteParserK_COLUMN, SQLiteParserK_COMMIT, SQLiteParserK_CONFLICT, SQLiteParserK_CONSTRAINT, SQLiteParserK_CREATE, SQLiteParserK_CROSS, SQLiteParserK_CURRENT_DATE, SQLiteParserK_CURRENT_TIME, SQLiteParserK_CURRENT_TIMESTAMP, SQLiteParserK_DATABASE, SQLiteParserK_DEFAULT, SQLiteParserK_DEFERRABLE, SQLiteParserK_DEFERRED, SQLiteParserK_DELETE, SQLiteParserK_DESC, SQLiteParserK_DETACH, SQLiteParserK_DISTINCT, SQLiteParserK_DROP, SQLiteParserK_EACH, SQLiteParserK_ELSE, SQLiteParserK_END, SQLiteParserK_ESCAPE, SQLiteParserK_EXCEPT, SQLiteParserK_EXCLUSIVE, SQLiteParserK_EXISTS, SQLiteParserK_EXPLAIN, SQLiteParserK_FAIL, SQLiteParserK_FOR, SQLiteParserK_FOREIGN, SQLiteParserK_FROM, SQLiteParserK_FULL, SQLiteParserK_GLOB, SQLiteParserK_GROUP, SQLiteParserK_HAVING, SQLiteParserK_IF, SQLiteParserK_IGNORE, SQLiteParserK_IMMEDIATE, SQLiteParserK_IN, SQLiteParserK_INDEX, SQLiteParserK_INDEXED, SQLiteParserK_INITIALLY, SQLiteParserK_INNER, SQLiteParserK_INSERT, SQLiteParserK_INSTEAD, SQLiteParserK_INTERSECT, SQLiteParserK_INTO, SQLiteParserK_IS, SQLiteParserK_ISNULL, SQLiteParserK_JOIN, SQLiteParserK_KEY, SQLiteParserK_LEFT, SQLiteParserK_LIKE, SQLiteParserK_LIMIT, SQLiteParserK_MATCH, SQLiteParserK_NATURAL, SQLiteParserK_NO, SQLiteParserK_NOT, SQLiteParserK_NOTNULL, SQLiteParserK_NULL, SQLiteParserK_OF, SQLiteParserK_OFFSET, SQLiteParserK_ON, SQLiteParserK_OR, SQLiteParserK_ORDER, SQLiteParserK_OUTER, SQLiteParserK_PLAN, SQLiteParserK_PRAGMA, SQLiteParserK_PRIMARY, SQLiteParserK_QUERY, SQLiteParserK_RAISE, SQLiteParserK_RECURSIVE, SQLiteParserK_REFERENCES, SQLiteParserK_REGEXP, SQLiteParserK_REINDEX, SQLiteParserK_RELEASE, SQLiteParserK_RENAME, SQLiteParserK_REPLACE, SQLiteParserK_RESTRICT, SQLiteParserK_RIGHT, SQLiteParserK_ROLLBACK, SQLiteParserK_ROW, SQLiteParserK_SAVEPOINT, SQLiteParserK_SELECT, SQLiteParserK_SET, SQLiteParserK_TABLE, SQLiteParserK_TEMP, SQLiteParserK_TEMPORARY, SQLiteParserK_THEN, SQLiteParserK_TO, SQLiteParserK_TRANSACTION, SQLiteParserK_TRIGGER, SQLiteParserK_UNION, SQLiteParserK_UNIQUE, SQLiteParserK_UPDATE, SQLiteParserK_USING, SQLiteParserK_VACUUM, SQLiteParserK_VALUES, SQLiteParserK_VIEW, SQLiteParserK_VIRTUAL, SQLiteParserK_WHEN, SQLiteParserK_WHERE, SQLiteParserK_WITH, SQLiteParserK_WITHOUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1731)
			p.Keyword()
		}

	case SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1732)
			p.Match(SQLiteParserSTRING_LITERAL)
		}

	case SQLiteParserOPEN_PAR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1733)
			p.Match(SQLiteParserOPEN_PAR)
		}
		{
			p.SetState(1734)
			p.Any_name()
		}
		{
			p.SetState(1735)
			p.Match(SQLiteParserCLOSE_PAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *SQLiteParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 39:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SQLiteParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
