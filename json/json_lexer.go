// Generated from JSON.g4 by ANTLR 4.6.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 1072, 54993, 33286, 44333, 17431, 44785, 36224, 43741, 2, 15, 147, 8,
	1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9,
	7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4,
	13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18,
	9, 18, 4, 19, 9, 19, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 7, 10, 69, 10, 10,
	12, 10, 14, 10, 72, 11, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 7, 11, 79,
	10, 11, 12, 11, 14, 11, 82, 11, 11, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12,
	3, 13, 3, 13, 3, 13, 5, 13, 92, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 15, 3, 15, 3, 16, 5, 16, 103, 10, 16, 3, 16, 3, 16, 3, 16,
	6, 16, 108, 10, 16, 13, 16, 14, 16, 109, 3, 16, 5, 16, 113, 10, 16, 3,
	16, 5, 16, 116, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 122, 10, 16,
	3, 16, 5, 16, 125, 10, 16, 3, 17, 3, 17, 3, 17, 7, 17, 130, 10, 17, 12,
	17, 14, 17, 133, 11, 17, 5, 17, 135, 10, 17, 3, 18, 3, 18, 5, 18, 139,
	10, 18, 3, 18, 3, 18, 3, 19, 6, 19, 144, 10, 19, 13, 19, 14, 19, 145, 2,
	2, 20, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21,
	12, 23, 13, 25, 2, 27, 2, 29, 2, 31, 14, 33, 2, 35, 2, 37, 15, 3, 2, 10,
	4, 2, 36, 36, 94, 94, 10, 2, 36, 36, 49, 49, 94, 94, 100, 100, 104, 104,
	112, 112, 116, 116, 118, 118, 5, 2, 50, 59, 67, 72, 99, 104, 3, 2, 50,
	59, 3, 2, 51, 59, 4, 2, 71, 71, 103, 103, 4, 2, 45, 45, 47, 47, 5, 2, 11,
	12, 15, 15, 34, 34, 157, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2,
	2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3,
	2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23,
	3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 3, 39, 3, 2, 2, 2, 5,
	41, 3, 2, 2, 2, 7, 43, 3, 2, 2, 2, 9, 45, 3, 2, 2, 2, 11, 47, 3, 2, 2,
	2, 13, 49, 3, 2, 2, 2, 15, 54, 3, 2, 2, 2, 17, 60, 3, 2, 2, 2, 19, 65,
	3, 2, 2, 2, 21, 75, 3, 2, 2, 2, 23, 86, 3, 2, 2, 2, 25, 88, 3, 2, 2, 2,
	27, 93, 3, 2, 2, 2, 29, 99, 3, 2, 2, 2, 31, 124, 3, 2, 2, 2, 33, 134, 3,
	2, 2, 2, 35, 136, 3, 2, 2, 2, 37, 143, 3, 2, 2, 2, 39, 40, 7, 125, 2, 2,
	40, 4, 3, 2, 2, 2, 41, 42, 7, 46, 2, 2, 42, 6, 3, 2, 2, 2, 43, 44, 7, 127,
	2, 2, 44, 8, 3, 2, 2, 2, 45, 46, 7, 93, 2, 2, 46, 10, 3, 2, 2, 2, 47, 48,
	7, 95, 2, 2, 48, 12, 3, 2, 2, 2, 49, 50, 7, 118, 2, 2, 50, 51, 7, 116,
	2, 2, 51, 52, 7, 119, 2, 2, 52, 53, 7, 103, 2, 2, 53, 14, 3, 2, 2, 2, 54,
	55, 7, 104, 2, 2, 55, 56, 7, 99, 2, 2, 56, 57, 7, 110, 2, 2, 57, 58, 7,
	117, 2, 2, 58, 59, 7, 103, 2, 2, 59, 16, 3, 2, 2, 2, 60, 61, 7, 112, 2,
	2, 61, 62, 7, 119, 2, 2, 62, 63, 7, 110, 2, 2, 63, 64, 7, 110, 2, 2, 64,
	18, 3, 2, 2, 2, 65, 70, 7, 36, 2, 2, 66, 69, 5, 25, 13, 2, 67, 69, 10,
	2, 2, 2, 68, 66, 3, 2, 2, 2, 68, 67, 3, 2, 2, 2, 69, 72, 3, 2, 2, 2, 70,
	68, 3, 2, 2, 2, 70, 71, 3, 2, 2, 2, 71, 73, 3, 2, 2, 2, 72, 70, 3, 2, 2,
	2, 73, 74, 7, 36, 2, 2, 74, 20, 3, 2, 2, 2, 75, 80, 7, 36, 2, 2, 76, 79,
	5, 25, 13, 2, 77, 79, 10, 2, 2, 2, 78, 76, 3, 2, 2, 2, 78, 77, 3, 2, 2,
	2, 79, 82, 3, 2, 2, 2, 80, 78, 3, 2, 2, 2, 80, 81, 3, 2, 2, 2, 81, 83,
	3, 2, 2, 2, 82, 80, 3, 2, 2, 2, 83, 84, 7, 36, 2, 2, 84, 85, 5, 23, 12,
	2, 85, 22, 3, 2, 2, 2, 86, 87, 7, 60, 2, 2, 87, 24, 3, 2, 2, 2, 88, 91,
	7, 94, 2, 2, 89, 92, 9, 3, 2, 2, 90, 92, 5, 27, 14, 2, 91, 89, 3, 2, 2,
	2, 91, 90, 3, 2, 2, 2, 92, 26, 3, 2, 2, 2, 93, 94, 7, 119, 2, 2, 94, 95,
	5, 29, 15, 2, 95, 96, 5, 29, 15, 2, 96, 97, 5, 29, 15, 2, 97, 98, 5, 29,
	15, 2, 98, 28, 3, 2, 2, 2, 99, 100, 9, 4, 2, 2, 100, 30, 3, 2, 2, 2, 101,
	103, 7, 47, 2, 2, 102, 101, 3, 2, 2, 2, 102, 103, 3, 2, 2, 2, 103, 104,
	3, 2, 2, 2, 104, 105, 5, 33, 17, 2, 105, 107, 7, 48, 2, 2, 106, 108, 9,
	5, 2, 2, 107, 106, 3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 107, 3, 2, 2,
	2, 109, 110, 3, 2, 2, 2, 110, 112, 3, 2, 2, 2, 111, 113, 5, 35, 18, 2,
	112, 111, 3, 2, 2, 2, 112, 113, 3, 2, 2, 2, 113, 125, 3, 2, 2, 2, 114,
	116, 7, 47, 2, 2, 115, 114, 3, 2, 2, 2, 115, 116, 3, 2, 2, 2, 116, 117,
	3, 2, 2, 2, 117, 118, 5, 33, 17, 2, 118, 119, 5, 35, 18, 2, 119, 125, 3,
	2, 2, 2, 120, 122, 7, 47, 2, 2, 121, 120, 3, 2, 2, 2, 121, 122, 3, 2, 2,
	2, 122, 123, 3, 2, 2, 2, 123, 125, 5, 33, 17, 2, 124, 102, 3, 2, 2, 2,
	124, 115, 3, 2, 2, 2, 124, 121, 3, 2, 2, 2, 125, 32, 3, 2, 2, 2, 126, 135,
	7, 50, 2, 2, 127, 131, 9, 6, 2, 2, 128, 130, 9, 5, 2, 2, 129, 128, 3, 2,
	2, 2, 130, 133, 3, 2, 2, 2, 131, 129, 3, 2, 2, 2, 131, 132, 3, 2, 2, 2,
	132, 135, 3, 2, 2, 2, 133, 131, 3, 2, 2, 2, 134, 126, 3, 2, 2, 2, 134,
	127, 3, 2, 2, 2, 135, 34, 3, 2, 2, 2, 136, 138, 9, 7, 2, 2, 137, 139, 9,
	8, 2, 2, 138, 137, 3, 2, 2, 2, 138, 139, 3, 2, 2, 2, 139, 140, 3, 2, 2,
	2, 140, 141, 5, 33, 17, 2, 141, 36, 3, 2, 2, 2, 142, 144, 9, 9, 2, 2, 143,
	142, 3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145, 143, 3, 2, 2, 2, 145, 146,
	3, 2, 2, 2, 146, 38, 3, 2, 2, 2, 18, 2, 68, 70, 78, 80, 91, 102, 109, 112,
	115, 121, 124, 131, 134, 138, 145, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'{'", "','", "'}'", "'['", "']'", "'true'", "'false'", "'null'", "",
	"", "':'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "STRING", "KEY_STRING", "KEY_COLON",
	"NUMBER", "WS",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "STRING",
	"KEY_STRING", "KEY_COLON", "ESC", "UNICODE", "HEX", "NUMBER", "INT", "EXP",
	"WS",
}

type JSONLexer struct {
	*antlr.BaseLexer
	modeNames []string
	// TODO: EOF string
}

func NewJSONLexer(input antlr.CharStream) *JSONLexer {
	var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}

	l := new(JSONLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "JSON.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// JSONLexer tokens.
const (
	JSONLexerT__0       = 1
	JSONLexerT__1       = 2
	JSONLexerT__2       = 3
	JSONLexerT__3       = 4
	JSONLexerT__4       = 5
	JSONLexerT__5       = 6
	JSONLexerT__6       = 7
	JSONLexerT__7       = 8
	JSONLexerSTRING     = 9
	JSONLexerKEY_STRING = 10
	JSONLexerKEY_COLON  = 11
	JSONLexerNUMBER     = 12
	JSONLexerWS         = 13
)
